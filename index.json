{
    "benchmarks": {
        "bench_arrayexprs.ArrayExpressions.time_rel_diff_float32": {
            "code": "def f(self):\n    func(*self.samples[dtype])\n",
            "goal_time": 2.0,
            "name": "bench_arrayexprs.ArrayExpressions.time_rel_diff_float32",
            "number": 0,
            "repeat": 3,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_arrayexprs.ArrayExpressions.time_rel_diff_float64": {
            "code": "def f(self):\n    func(*self.samples[dtype])\n",
            "goal_time": 2.0,
            "name": "bench_arrayexprs.ArrayExpressions.time_rel_diff_float64",
            "number": 0,
            "repeat": 3,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_arrayexprs.ArrayExpressions.time_sq_diff_float32": {
            "code": "def f(self):\n    func(*self.samples[dtype])\n",
            "goal_time": 2.0,
            "name": "bench_arrayexprs.ArrayExpressions.time_sq_diff_float32",
            "number": 0,
            "repeat": 3,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_arrayexprs.ArrayExpressions.time_sq_diff_float64": {
            "code": "def f(self):\n    func(*self.samples[dtype])\n",
            "goal_time": 2.0,
            "name": "bench_arrayexprs.ArrayExpressions.time_sq_diff_float64",
            "number": 0,
            "repeat": 3,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_arrayexprs.ArrayExpressions.time_sum_float32": {
            "code": "def f(self):\n    func(*self.samples[dtype])\n",
            "goal_time": 2.0,
            "name": "bench_arrayexprs.ArrayExpressions.time_sum_float32",
            "number": 0,
            "repeat": 3,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_arrayexprs.ArrayExpressions.time_sum_float64": {
            "code": "def f(self):\n    func(*self.samples[dtype])\n",
            "goal_time": 2.0,
            "name": "bench_arrayexprs.ArrayExpressions.time_sum_float64",
            "number": 0,
            "repeat": 3,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_blackscholes.BlackScholes.time_blackscholes": {
            "code": "def time_blackscholes(self):\n    for i in range(10):\n        blackscholes(*args)\n",
            "goal_time": 2.0,
            "name": "bench_blackscholes.BlackScholes.time_blackscholes",
            "number": 0,
            "repeat": 3,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_centdiff.CenteredDifference.time_centered_difference_1d": {
            "code": "def time_centered_difference_1d(self):\n    centered_difference_range1d(u1, D1, dx)\n",
            "goal_time": 2.0,
            "name": "bench_centdiff.CenteredDifference.time_centered_difference_1d",
            "number": 0,
            "repeat": 3,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_centdiff.CenteredDifference.time_centered_difference_2d_C": {
            "code": "def time_centered_difference_2d_C(self):\n    centered_difference_range2d(u2c, D2c, dx)\n",
            "goal_time": 2.0,
            "name": "bench_centdiff.CenteredDifference.time_centered_difference_2d_C",
            "number": 0,
            "repeat": 3,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_centdiff.CenteredDifference.time_centered_difference_2d_fortran": {
            "code": "def time_centered_difference_2d_fortran(self):\n    centered_difference_range2d(u2f, D2f, dx)\n",
            "goal_time": 2.0,
            "name": "bench_centdiff.CenteredDifference.time_centered_difference_2d_fortran",
            "number": 0,
            "repeat": 3,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_centdiff.CenteredDifference.time_centered_difference_2d_non_contiguous": {
            "code": "def time_centered_difference_2d_non_contiguous(self):\n    centered_difference_range2d(u2a, D2a, dx)\n",
            "goal_time": 2.0,
            "name": "bench_centdiff.CenteredDifference.time_centered_difference_2d_non_contiguous",
            "number": 0,
            "repeat": 3,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_compiling.CachedCompilation.time_jit_mandel": {
            "code": "def time_jit_mandel(self):\n    jit(mandel_sig, cache=True, nopython=True)(mandel)\n",
            "goal_time": 2.0,
            "name": "bench_compiling.CachedCompilation.time_jit_mandel",
            "number": 0,
            "repeat": 3,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_compiling.CachedCompilation.time_jit_noop": {
            "code": "def time_jit_noop(self):\n    jit(\"int32(int32)\", cache=True, nopython=True)(no_op)\n",
            "goal_time": 2.0,
            "name": "bench_compiling.CachedCompilation.time_jit_noop",
            "number": 0,
            "repeat": 3,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_compiling.LoopLiftedCompilation.time_lift": {
            "code": "def time_lift(self):\n    # The only way to time the entire thing (including the inner\n    # function formed by the loop) is to call the function wrapper.\n    f = jit(lift)\n    f(1.0)\n",
            "goal_time": 2.0,
            "name": "bench_compiling.LoopLiftedCompilation.time_lift",
            "number": 0,
            "repeat": 3,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_compiling.NoPythonCompilation.time_jit_mandel": {
            "code": "def time_jit_mandel(self):\n    jit(mandel_sig, nopython=True)(mandel)\n",
            "goal_time": 2.0,
            "name": "bench_compiling.NoPythonCompilation.time_jit_mandel",
            "number": 0,
            "repeat": 3,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_compiling.NoPythonCompilation.time_jit_noop": {
            "code": "def time_jit_noop(self):\n    jit(\"int32(int32)\", nopython=True)(no_op)\n",
            "goal_time": 2.0,
            "name": "bench_compiling.NoPythonCompilation.time_jit_noop",
            "number": 0,
            "repeat": 3,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_compiling.PyObjectCompilation.time_jit_mandel_forceobj": {
            "code": "def time_jit_mandel_forceobj(self):\n    jit(mandel_sig, forceobj=True)(mandel)\n",
            "goal_time": 2.0,
            "name": "bench_compiling.PyObjectCompilation.time_jit_mandel_forceobj",
            "number": 0,
            "repeat": 3,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_compiling.PyObjectCompilation.time_jit_noop_fallback": {
            "code": "def time_jit_noop_fallback(self):\n    jit(\"int32(int32)\")(force_obj)\n",
            "goal_time": 2.0,
            "name": "bench_compiling.PyObjectCompilation.time_jit_noop_fallback",
            "number": 0,
            "repeat": 3,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_compiling.PyObjectCompilation.time_jit_noop_forceobj": {
            "code": "def time_jit_noop_forceobj(self):\n    jit(\"int32(int32)\", forceobj=True)(force_obj)\n",
            "goal_time": 2.0,
            "name": "bench_compiling.PyObjectCompilation.time_jit_noop_forceobj",
            "number": 0,
            "repeat": 3,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_cuda.BlackScholes.time_blackscholes": {
            "code": "def time_blackscholes(self):\n    blockdim = 512, 1\n    griddim = int(math.ceil(float(N) / blockdim[0])), 1\n    for i in range(10):\n        black_scholes_cuda[griddim, blockdim, self.stream](\n            self.d_callResult, self.d_putResult,\n            self.d_stockPrice, self.d_optionStrike, self.d_optionYears,\n            RISKFREE, VOLATILITY)\n    self.stream.synchronize()\n",
            "goal_time": 2.0,
            "name": "bench_cuda.BlackScholes.time_blackscholes",
            "number": 0,
            "repeat": 3,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_cuda.DataTransfer.time_transfer_from_gpu_large": {
            "code": "def time_transfer_from_gpu_large(self):\n    for i in range(10):\n        self.d_large_data.copy_to_host(self.large_data, self.stream)\n    self.stream.synchronize()\n",
            "goal_time": 2.0,
            "name": "bench_cuda.DataTransfer.time_transfer_from_gpu_large",
            "number": 0,
            "repeat": 3,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_cuda.DataTransfer.time_transfer_from_gpu_small": {
            "code": "def time_transfer_from_gpu_small(self):\n    for i in range(10):\n        self.d_small_data.copy_to_host(self.small_data, self.stream)\n    self.stream.synchronize()\n",
            "goal_time": 2.0,
            "name": "bench_cuda.DataTransfer.time_transfer_from_gpu_small",
            "number": 0,
            "repeat": 3,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_cuda.DataTransfer.time_transfer_to_gpu_large": {
            "code": "def time_transfer_to_gpu_large(self):\n    for i in range(10):\n        cuda.to_device(self.large_data, self.stream)\n    self.stream.synchronize()\n",
            "goal_time": 2.0,
            "name": "bench_cuda.DataTransfer.time_transfer_to_gpu_large",
            "number": 0,
            "repeat": 3,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_cuda.DataTransfer.time_transfer_to_gpu_small": {
            "code": "def time_transfer_to_gpu_small(self):\n    for i in range(10):\n        cuda.to_device(self.small_data, self.stream)\n    self.stream.synchronize()\n",
            "goal_time": 2.0,
            "name": "bench_cuda.DataTransfer.time_transfer_to_gpu_small",
            "number": 0,
            "repeat": 3,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_cuda.NBody.time_cpu_nbody": {
            "code": "def time_cpu_nbody(self):\n    run_cpu_nbody(self.positions, self.weights)\n",
            "goal_time": 2.0,
            "name": "bench_cuda.NBody.time_cpu_nbody",
            "number": 0,
            "repeat": 3,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_cuda.NBody.time_cuda_nbody": {
            "code": "def time_cuda_nbody(self):\n    self.runner.run()\n",
            "goal_time": 2.0,
            "name": "bench_cuda.NBody.time_cuda_nbody",
            "number": 0,
            "repeat": 3,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_cuda.Synthetic.time_addmul_f32": {
            "code": "def time_addmul_f32(self):\n    blockdim = 512, 1\n    griddim = int(math.ceil(float(self.n) / blockdim[0])), 1\n    for i in range(10):\n        addmul_f32[griddim, blockdim, self.stream](\n            self.d_f32, self.d_f32, self.d_f32)\n    self.stream.synchronize()\n",
            "goal_time": 2.0,
            "name": "bench_cuda.Synthetic.time_addmul_f32",
            "number": 0,
            "repeat": 3,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_cuda.Synthetic.time_addmul_f64": {
            "code": "def time_addmul_f64(self):\n    blockdim = 512, 1\n    griddim = int(math.ceil(float(self.n) / blockdim[0])), 1\n    for i in range(10):\n        addmul_f64[griddim, blockdim, self.stream](\n            self.d_f64, self.d_f64, self.d_f64)\n    self.stream.synchronize()\n",
            "goal_time": 2.0,
            "name": "bench_cuda.Synthetic.time_addmul_f64",
            "number": 0,
            "repeat": 3,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_cuda.Synthetic.time_reduce_f32": {
            "code": "def time_reduce_f32(self):\n    self.sum_reduce(self.d_f32, res=self.res_f32, stream=self.stream)\n    self.stream.synchronize()\n",
            "goal_time": 2.0,
            "name": "bench_cuda.Synthetic.time_reduce_f32",
            "number": 0,
            "repeat": 3,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_cuda.Synthetic.time_reduce_f64": {
            "code": "def time_reduce_f64(self):\n    self.sum_reduce(self.d_f64, res=self.res_f64, stream=self.stream)\n    self.stream.synchronize()\n",
            "goal_time": 2.0,
            "name": "bench_cuda.Synthetic.time_reduce_f64",
            "number": 0,
            "repeat": 3,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_cuda.Synthetic.time_run_empty_kernel": {
            "code": "def time_run_empty_kernel(self):\n    no_op[1, 1, self.stream]()\n    self.stream.synchronize()\n",
            "goal_time": 2.0,
            "name": "bench_cuda.Synthetic.time_run_empty_kernel",
            "number": 0,
            "repeat": 3,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_dispatch.NoPythonDispatch.time_dispatch_array_1d": {
            "code": "def timefunc(self, arg=samples[name]):\n    func = binary\n    for i in range(1000):\n        func(arg, arg)\n",
            "goal_time": 2.0,
            "name": "bench_dispatch.NoPythonDispatch.time_dispatch_array_1d",
            "number": 0,
            "repeat": 3,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_dispatch.NoPythonDispatch.time_dispatch_array_3d": {
            "code": "def timefunc(self, arg=samples[name]):\n    func = binary\n    for i in range(1000):\n        func(arg, arg)\n",
            "goal_time": 2.0,
            "name": "bench_dispatch.NoPythonDispatch.time_dispatch_array_3d",
            "number": 0,
            "repeat": 3,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_dispatch.NoPythonDispatch.time_dispatch_array_records": {
            "code": "def timefunc(self, arg=samples[name]):\n    func = binary\n    for i in range(1000):\n        func(arg, arg)\n",
            "goal_time": 2.0,
            "name": "bench_dispatch.NoPythonDispatch.time_dispatch_array_records",
            "number": 0,
            "repeat": 3,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_dispatch.NoPythonDispatch.time_dispatch_bool": {
            "code": "def timefunc(self, arg=samples[name]):\n    func = binary\n    for i in range(1000):\n        func(arg, arg)\n",
            "goal_time": 2.0,
            "name": "bench_dispatch.NoPythonDispatch.time_dispatch_bool",
            "number": 0,
            "repeat": 3,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_dispatch.NoPythonDispatch.time_dispatch_bytearray": {
            "code": "def timefunc(self, arg=samples[name]):\n    func = binary\n    for i in range(1000):\n        func(arg, arg)\n",
            "goal_time": 2.0,
            "name": "bench_dispatch.NoPythonDispatch.time_dispatch_bytearray",
            "number": 0,
            "repeat": 3,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_dispatch.NoPythonDispatch.time_dispatch_complex": {
            "code": "def timefunc(self, arg=samples[name]):\n    func = binary\n    for i in range(1000):\n        func(arg, arg)\n",
            "goal_time": 2.0,
            "name": "bench_dispatch.NoPythonDispatch.time_dispatch_complex",
            "number": 0,
            "repeat": 3,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_dispatch.NoPythonDispatch.time_dispatch_float": {
            "code": "def timefunc(self, arg=samples[name]):\n    func = binary\n    for i in range(1000):\n        func(arg, arg)\n",
            "goal_time": 2.0,
            "name": "bench_dispatch.NoPythonDispatch.time_dispatch_float",
            "number": 0,
            "repeat": 3,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_dispatch.NoPythonDispatch.time_dispatch_int": {
            "code": "def timefunc(self, arg=samples[name]):\n    func = binary\n    for i in range(1000):\n        func(arg, arg)\n",
            "goal_time": 2.0,
            "name": "bench_dispatch.NoPythonDispatch.time_dispatch_int",
            "number": 0,
            "repeat": 3,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_dispatch.NoPythonDispatch.time_dispatch_recarray": {
            "code": "def timefunc(self, arg=samples[name]):\n    func = binary\n    for i in range(1000):\n        func(arg, arg)\n",
            "goal_time": 2.0,
            "name": "bench_dispatch.NoPythonDispatch.time_dispatch_recarray",
            "number": 0,
            "repeat": 3,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_dispatch.NoPythonDispatch.time_dispatch_record": {
            "code": "def timefunc(self, arg=samples[name]):\n    func = binary\n    for i in range(1000):\n        func(arg, arg)\n",
            "goal_time": 2.0,
            "name": "bench_dispatch.NoPythonDispatch.time_dispatch_record",
            "number": 0,
            "repeat": 3,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_dispatch.NoPythonDispatch.time_dispatch_tuple": {
            "code": "def timefunc(self, arg=samples[name]):\n    func = binary\n    for i in range(1000):\n        func(arg, arg)\n",
            "goal_time": 2.0,
            "name": "bench_dispatch.NoPythonDispatch.time_dispatch_tuple",
            "number": 0,
            "repeat": 3,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_dispatch.PyObjectDispatch.time_dispatch_pyobject": {
            "code": "def time_dispatch_pyobject(self):\n    x = object()\n    for i in range(1000):\n        binary_pyobj(x, x)\n",
            "goal_time": 2.0,
            "name": "bench_dispatch.PyObjectDispatch.time_dispatch_pyobject",
            "number": 0,
            "repeat": 3,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_gameoflife.GameOfLife.time_gameoflife": {
            "code": "def time_gameoflife(self):\n    run_game(10)\n",
            "goal_time": 2.0,
            "name": "bench_gameoflife.GameOfLife.time_gameoflife",
            "number": 0,
            "repeat": 3,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_ising.IsingModel.time_ising": {
            "code": "def time_ising(self):\n    x = x_start.copy()\n    for i in range(N_iterations):\n        update(x)\n",
            "goal_time": 2.0,
            "name": "bench_ising.IsingModel.time_ising",
            "number": 0,
            "repeat": 3,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_iterating.NumpyIterators.time_array_iter_1d": {
            "code": "def time_array_iter_1d(self):\n    array_iter_1d(arr1)\n",
            "goal_time": 2.0,
            "name": "bench_iterating.NumpyIterators.time_array_iter_1d",
            "number": 0,
            "repeat": 3,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_iterating.NumpyIterators.time_flat_index_1d": {
            "code": "def time_flat_index_1d(self):\n    flat_index(arr1)\n",
            "goal_time": 2.0,
            "name": "bench_iterating.NumpyIterators.time_flat_index_1d",
            "number": 0,
            "repeat": 3,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_iterating.NumpyIterators.time_flat_index_2d_C": {
            "code": "def time_flat_index_2d_C(self):\n    flat_index(arr2c)\n",
            "goal_time": 2.0,
            "name": "bench_iterating.NumpyIterators.time_flat_index_2d_C",
            "number": 0,
            "repeat": 3,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_iterating.NumpyIterators.time_flat_index_2d_fortran": {
            "code": "def time_flat_index_2d_fortran(self):\n    flat_index(arr2f)\n",
            "goal_time": 2.0,
            "name": "bench_iterating.NumpyIterators.time_flat_index_2d_fortran",
            "number": 0,
            "repeat": 3,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_iterating.NumpyIterators.time_flat_index_2d_non_contiguous": {
            "code": "def time_flat_index_2d_non_contiguous(self):\n    flat_index(arr2a)\n",
            "goal_time": 2.0,
            "name": "bench_iterating.NumpyIterators.time_flat_index_2d_non_contiguous",
            "number": 0,
            "repeat": 3,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_iterating.NumpyIterators.time_flat_iter_1d": {
            "code": "def time_flat_iter_1d(self):\n    flat_iter(arr1)\n",
            "goal_time": 2.0,
            "name": "bench_iterating.NumpyIterators.time_flat_iter_1d",
            "number": 0,
            "repeat": 3,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_iterating.NumpyIterators.time_flat_iter_2d_C": {
            "code": "def time_flat_iter_2d_C(self):\n    flat_iter(arr2c)\n",
            "goal_time": 2.0,
            "name": "bench_iterating.NumpyIterators.time_flat_iter_2d_C",
            "number": 0,
            "repeat": 3,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_iterating.NumpyIterators.time_flat_iter_2d_fortran": {
            "code": "def time_flat_iter_2d_fortran(self):\n    flat_iter(arr2f)\n",
            "goal_time": 2.0,
            "name": "bench_iterating.NumpyIterators.time_flat_iter_2d_fortran",
            "number": 0,
            "repeat": 3,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_iterating.NumpyIterators.time_flat_iter_2d_non_contiguous": {
            "code": "def time_flat_iter_2d_non_contiguous(self):\n    flat_iter(arr2a)\n",
            "goal_time": 2.0,
            "name": "bench_iterating.NumpyIterators.time_flat_iter_2d_non_contiguous",
            "number": 0,
            "repeat": 3,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_iterating.NumpyIterators.time_ndindex_1d": {
            "code": "def time_ndindex_1d(self):\n    ndindex(arr1)\n",
            "goal_time": 2.0,
            "name": "bench_iterating.NumpyIterators.time_ndindex_1d",
            "number": 0,
            "repeat": 3,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_iterating.NumpyIterators.time_ndindex_2d": {
            "code": "def time_ndindex_2d(self):\n    ndindex(arr2c)\n",
            "goal_time": 2.0,
            "name": "bench_iterating.NumpyIterators.time_ndindex_2d",
            "number": 0,
            "repeat": 3,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_iterating.NumpyIterators.time_range_index_1d": {
            "code": "def time_range_index_1d(self):\n    range1d(arr1)\n",
            "goal_time": 2.0,
            "name": "bench_iterating.NumpyIterators.time_range_index_1d",
            "number": 0,
            "repeat": 3,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_iterating.NumpyIterators.time_range_index_2d": {
            "code": "def time_range_index_2d(self):\n    range2d(arr2c)\n",
            "goal_time": 2.0,
            "name": "bench_iterating.NumpyIterators.time_range_index_2d",
            "number": 0,
            "repeat": 3,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_lists.ListConstruction.time_list_append": {
            "code": "def time_list_append(self):\n    list_append(self.n, 0)\n",
            "goal_time": 2.0,
            "name": "bench_lists.ListConstruction.time_list_append",
            "number": 0,
            "repeat": 3,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_lists.ListConstruction.time_list_call": {
            "code": "def time_list_call(self):\n    list_call(self.n, 0)\n",
            "goal_time": 2.0,
            "name": "bench_lists.ListConstruction.time_list_call",
            "number": 0,
            "repeat": 3,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_lists.ListConstruction.time_list_extend": {
            "code": "def time_list_extend(self):\n    list_extend(self.n, 0)\n",
            "goal_time": 2.0,
            "name": "bench_lists.ListConstruction.time_list_extend",
            "number": 0,
            "repeat": 3,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_lists.ListMutation.time_list_insert": {
            "code": "def time_list_insert(self):\n    # list.insert() is quadratic, so reduce the effort\n    list_insert(self.n // 10, 0)\n",
            "goal_time": 2.0,
            "name": "bench_lists.ListMutation.time_list_insert",
            "number": 0,
            "repeat": 3,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_lists.ListMutation.time_list_pop": {
            "code": "def time_list_pop(self):\n    list_pop(self.n)\n",
            "goal_time": 2.0,
            "name": "bench_lists.ListMutation.time_list_pop",
            "number": 0,
            "repeat": 3,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_lists.ListReturn.time_list_return": {
            "code": "def time_list_return(self):\n    list_return(self.n)\n",
            "goal_time": 2.0,
            "name": "bench_lists.ListReturn.time_list_return",
            "number": 0,
            "repeat": 3,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_misc.IndirectIndexing.time_signed_indirect_indexing": {
            "code": "def time_signed_indirect_indexing(self):\n    self.targets[:] = 0\n    grouped_sum(self.values, self.labels, self.targets)\n",
            "goal_time": 2.0,
            "name": "bench_misc.IndirectIndexing.time_signed_indirect_indexing",
            "number": 0,
            "repeat": 3,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_misc.IndirectIndexing.time_unsigned_indirect_indexing": {
            "code": "def time_unsigned_indirect_indexing(self):\n    self.targets[:] = 0\n    grouped_sum(self.values, self.unsigned_labels, self.targets)\n",
            "goal_time": 2.0,
            "name": "bench_misc.IndirectIndexing.time_unsigned_indirect_indexing",
            "number": 0,
            "repeat": 3,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_misc.InitializationTime.time_new_process_import_numba": {
            "code": "def time_new_process_import_numba(self):\n    subprocess.check_call([sys.executable, \"-c\", \"from numba import jit\"])\n",
            "goal_time": 2.0,
            "name": "bench_misc.InitializationTime.time_new_process_import_numba",
            "number": 1,
            "repeat": 10,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_nbody.NBody.time_numba_nbody": {
            "code": "def time_numba_nbody(self):\n    run_numba_nbody(self.positions, self.weights)\n",
            "goal_time": 2.0,
            "name": "bench_nbody.NBody.time_numba_nbody",
            "number": 0,
            "repeat": 3,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_numbagg.Numbagg.time_move_nanmean": {
            "code": "def time_move_nanmean(self):\n    arr = some_nans\n    res = move_nanmean(arr, np.asarray(10))\n    assert res.shape == arr.shape\n",
            "goal_time": 2.0,
            "name": "bench_numbagg.Numbagg.time_move_nanmean",
            "number": 0,
            "repeat": 3,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_numbagg.Numbagg.time_move_nanmean_2d": {
            "code": "def time_move_nanmean_2d(self):\n    arr = some_nans_2d\n    res = move_nanmean(arr, np.asarray(10))\n    assert res.shape == arr.shape\n",
            "goal_time": 2.0,
            "name": "bench_numbagg.Numbagg.time_move_nanmean_2d",
            "number": 0,
            "repeat": 3,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_numbagg.Numbagg.time_nanmean_gufunc": {
            "code": "def time_nanmean_gufunc(self):\n    gu_nanmean(some_nans_2d)\n",
            "goal_time": 2.0,
            "name": "bench_numbagg.Numbagg.time_nanmean_gufunc",
            "number": 0,
            "repeat": 3,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_numbagg.Numbagg.time_nanmean_jit_1d": {
            "code": "def time_nanmean_jit_1d(self):\n    nanmean(some_nans)\n",
            "goal_time": 2.0,
            "name": "bench_numbagg.Numbagg.time_nanmean_jit_1d",
            "number": 0,
            "repeat": 3,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_numbagg.Numbagg.time_nanmean_jit_2d": {
            "code": "def time_nanmean_jit_2d(self):\n    nanmean(some_nans_2d)\n",
            "goal_time": 2.0,
            "name": "bench_numbagg.Numbagg.time_nanmean_jit_2d",
            "number": 0,
            "repeat": 3,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_numbagg.Numbagg.time_nanmean_jit_2d_reversed": {
            "code": "def time_nanmean_jit_2d_reversed(self):\n    nanmean(some_nans_2d_reversed)\n",
            "goal_time": 2.0,
            "name": "bench_numbagg.Numbagg.time_nanmean_jit_2d_reversed",
            "number": 0,
            "repeat": 3,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_sorting.ArraySorting.time_sort_duplicates_array": {
            "code": "def time_sort_duplicates_array(self):\n    \"\"\"\n    Sort a random array with many duplicates.\n    \"\"\"\n    sort(self.duplicates_array)\n",
            "goal_time": 2.0,
            "name": "bench_sorting.ArraySorting.time_sort_duplicates_array",
            "number": 0,
            "repeat": 3,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_sorting.ArraySorting.time_sort_random_array": {
            "code": "def time_sort_random_array(self):\n    \"\"\"\n    Sort a random array.\n    \"\"\"\n    sort(self.random_array)\n",
            "goal_time": 2.0,
            "name": "bench_sorting.ArraySorting.time_sort_random_array",
            "number": 0,
            "repeat": 3,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_sorting.ArraySorting.time_sort_sorted_array": {
            "code": "def time_sort_sorted_array(self):\n    \"\"\"\n    Sort an already sorted array.\n    \"\"\"\n    sort(self.sorted_array)\n",
            "goal_time": 2.0,
            "name": "bench_sorting.ArraySorting.time_sort_sorted_array",
            "number": 0,
            "repeat": 3,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_sorting.ArraySorting.time_sort_triangle_array": {
            "code": "def time_sort_triangle_array(self):\n    \"\"\"\n    Sort a \"triangular\" array: ascending then descending.\n    \"\"\"\n    sort(self.triangle_array)\n",
            "goal_time": 2.0,
            "name": "bench_sorting.ArraySorting.time_sort_triangle_array",
            "number": 0,
            "repeat": 3,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_vectorize.Vectorize.time_mul_complex128": {
            "code": "def f(self):\n    func(self.samples[dtype], self.samples[dtype], self.out[dtype])\n",
            "goal_time": 2.0,
            "name": "bench_vectorize.Vectorize.time_mul_complex128",
            "number": 0,
            "repeat": 3,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_vectorize.Vectorize.time_mul_complex64": {
            "code": "def f(self):\n    func(self.samples[dtype], self.samples[dtype], self.out[dtype])\n",
            "goal_time": 2.0,
            "name": "bench_vectorize.Vectorize.time_mul_complex64",
            "number": 0,
            "repeat": 3,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_vectorize.Vectorize.time_mul_float32": {
            "code": "def f(self):\n    func(self.samples[dtype], self.samples[dtype], self.out[dtype])\n",
            "goal_time": 2.0,
            "name": "bench_vectorize.Vectorize.time_mul_float32",
            "number": 0,
            "repeat": 3,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_vectorize.Vectorize.time_mul_float64": {
            "code": "def f(self):\n    func(self.samples[dtype], self.samples[dtype], self.out[dtype])\n",
            "goal_time": 2.0,
            "name": "bench_vectorize.Vectorize.time_mul_float64",
            "number": 0,
            "repeat": 3,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_vectorize.Vectorize.time_rel_diff_float32": {
            "code": "def f(self):\n    func(self.samples[dtype], self.samples[dtype], self.out[dtype])\n",
            "goal_time": 2.0,
            "name": "bench_vectorize.Vectorize.time_rel_diff_float32",
            "number": 0,
            "repeat": 3,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_vectorize.Vectorize.time_rel_diff_float64": {
            "code": "def f(self):\n    func(self.samples[dtype], self.samples[dtype], self.out[dtype])\n",
            "goal_time": 2.0,
            "name": "bench_vectorize.Vectorize.time_rel_diff_float64",
            "number": 0,
            "repeat": 3,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        }
    },
    "date_to_hash": {
        "1392223365000": "a74ae074",
        "1392754353000": "ef4b77ff",
        "1393177513000": "010083c2",
        "1393567898000": "c5a6d846",
        "1393858398000": "41630060",
        "1393951855000": "8f738134",
        "1394489909000": "20011558",
        "1394753083000": "dc29549a",
        "1394832753000": "5ad18f8e",
        "1395092711000": "867b9394",
        "1395322108000": "bba59c1e",
        "1395396943000": "85fe7d00",
        "1396560248000": "eecced07",
        "1397161690000": "d0e154da",
        "1397506821000": "6af77ce8",
        "1400895445000": "3ca4914e",
        "1402581253000": "a2e4978f",
        "1402942318000": "e8670e78",
        "1403205277000": "2fbbe73e",
        "1403621462000": "2997ffdd",
        "1403709668000": "3a8717aa",
        "1404228318000": "4567fbf2",
        "1404749658000": "261692d5",
        "1404767683000": "92a208a3",
        "1404937413000": "09fdbe0c",
        "1405445674000": "dd106832",
        "1405954108000": "96b44115",
        "1406039837000": "3acda4b1",
        "1406323664000": "4a4d886c",
        "1406672370000": "ac221b87",
        "1406817413000": "54dd45fa",
        "1407359611000": "d766d63b",
        "1407807794000": "f9d88e71",
        "1408052796000": "f9a65cca",
        "1408377175000": "31d7f678",
        "1408644505000": "718dbab2",
        "1409151684000": "0e0b01d4",
        "1409678550000": "88ee9dad",
        "1410360515000": "f36df8a8",
        "1410377927000": "dd69abd5",
        "1410551528000": "d3faadb9",
        "1411594972000": "fe117b52",
        "1412635207000": "4b9a9925",
        "1412888353000": "9ea44efe",
        "1413223400000": "78c59f87",
        "1413388134000": "918e37f3",
        "1413401119000": "85b96e72",
        "1413570755000": "3644f8de",
        "1414015347000": "0a7e111f",
        "1415152790000": "db6a5530",
        "1416505307000": "0f15588d",
        "1416586357000": "12163383",
        "1416853854000": "9c282339",
        "1416913552000": "d297968b",
        "1417023398000": "0cfa5730",
        "1417095475000": "2f5e41fe",
        "1417739460000": "60ca8897",
        "1418069780000": "35546517",
        "1418748862000": "84331646",
        "1418752295000": "e3b50a3f",
        "1418758936000": "7d8cb0dc",
        "1418760961000": "1e2131b4",
        "1418853257000": "62325e12",
        "1418853586000": "f86d1505",
        "1418854295000": "6d06c8ca",
        "1418915718000": "15372689",
        "1418915893000": "81e5b478",
        "1418927751000": "a370bf75",
        "1419874793000": "179bb391",
        "1419888452000": "4363aaca",
        "1419951798000": "f58982a3",
        "1419955484000": "e09ee8ad",
        "1420624322000": "c096a0bb",
        "1420641754000": "c091e4a0",
        "1420727800000": "f381c7db",
        "1420745668000": "773695e7",
        "1420745888000": "9bd2b084",
        "1420852014000": "819d4e00",
        "1421062368000": "88eed424",
        "1421075982000": "93acb878",
        "1421076022000": "e2a56c37",
        "1421082922000": "63c89927",
        "1421170699000": "ffed1d84",
        "1421170755000": "41d94be0",
        "1421172795000": "be0cf84a",
        "1421242593000": "0c71bf79",
        "1421360664000": "f64c7473",
        "1421365657000": "54f18cb5",
        "1421412177000": "e97cf936",
        "1421438304000": "344fb500",
        "1421438326000": "3b15097b",
        "1421696898000": "1a2adc55",
        "1421697246000": "9c1b0546",
        "1421698038000": "5fdd9731",
        "1421698934000": "a91a848c",
        "1421700143000": "d4e1fc4f",
        "1421771248000": "162d5a9c",
        "1421838856000": "d28fb6b3",
        "1421847889000": "afd9617e",
        "1421922286000": "cb9d4860",
        "1421939721000": "bf79d1b8",
        "1421939780000": "4088b82e",
        "1421943616000": "d6b55fc5",
        "1422022139000": "8b15e2e3",
        "1422298456000": "bf401bb8",
        "1422375568000": "39b602db",
        "1422376031000": "91dc71fc",
        "1422377295000": "0215963e",
        "1422377760000": "d2ebb7e3",
        "1422378444000": "b06852a5",
        "1422380007000": "6a3db50a",
        "1422381441000": "0c9d8810",
        "1422386509000": "692b2943",
        "1422454838000": "cb43ff5e",
        "1422454914000": "0979e155",
        "1422455069000": "b4588160",
        "1422458186000": "216eef6e",
        "1422473051000": "6c9188e8",
        "1422485220000": "92c03752",
        "1422550790000": "18aa4deb",
        "1422889793000": "772e4c0a",
        "1427485031000": "e6ada631",
        "1427488451000": "901ce985",
        "1427488805000": "f7431da7",
        "1427489098000": "6de6c912",
        "1427727355000": "5cc97bba",
        "1427799801000": "b0039d95",
        "1427816745000": "1936b611",
        "1427824598000": "be08c7b9",
        "1427833202000": "f89c5e51",
        "1427836519000": "d20dd846",
        "1427911994000": "41838234",
        "1427912244000": "067ef8fa",
        "1427919923000": "53416ebb",
        "1428332697000": "068b7f4f",
        "1428341457000": "4d92a3f5",
        "1428342543000": "a0519972",
        "1428355495000": "e7592a82",
        "1428437389000": "dd322923",
        "1428953040000": "7e4d8b9b",
        "1429028262000": "a7c9c35c",
        "1429193419000": "47f8ef8e",
        "1429193463000": "f28476de",
        "1429203909000": "9d03ba5f",
        "1429301760000": "f021dbd5",
        "1429563967000": "0ab348a9",
        "1429564038000": "f12916a3",
        "1429564226000": "a30f9fba",
        "1429621635000": "fa809c2d",
        "1429634677000": "21d8e90f",
        "1429637613000": "33b3692d",
        "1429648942000": "c9490d07",
        "1429706706000": "f244c34c",
        "1429713990000": "d30bf713",
        "1429714256000": "808fcf4a",
        "1429809131000": "38454cfb",
        "1429999892000": "c51d7c09",
        "1430144892000": "667ddfae",
        "1430162784000": "4998ada8",
        "1430233261000": "84f98643",
        "1430409352000": "1f2bdd6a",
        "1430500979000": "c0d2ecf5",
        "1430589746000": "a47593bb",
        "1430831534000": "bf2e4bab",
        "1430848423000": "de20294a",
        "1430921691000": "194dab80",
        "1430925191000": "06952c75",
        "1430944050000": "07256524",
        "1431010520000": "8b82d323",
        "1431014105000": "0ba1eebe",
        "1431049910000": "6a6fe785",
        "1431051166000": "bd9ae670",
        "1431125166000": "7bdc418a",
        "1431337198000": "df3864a0",
        "1431346182000": "75709c3e",
        "1431357680000": "bf81bfc0",
        "1431449637000": "9a5a6b48",
        "1431455845000": "d06fdd06",
        "1431456602000": "6d14b28d",
        "1431523542000": "40c3cc02",
        "1431538077000": "c324dd67",
        "1431553534000": "e9c5e26c",
        "1431558847000": "1bd1c9e1",
        "1431594047000": "e10ede8a",
        "1431611452000": "49c09840",
        "1431620924000": "80ba72c9",
        "1431621668000": "18a4972c",
        "1431627433000": "27538522",
        "1431631570000": "bc247a42",
        "1431632129000": "1f5aec7d",
        "1431636387000": "67538d9f",
        "1431942385000": "6f63a377",
        "1431960766000": "acf37d40",
        "1431960894000": "6c1251cb",
        "1431971998000": "6f5e2b44",
        "1431972012000": "99630edc",
        "1432158952000": "11d2ca0e",
        "1432159586000": "29796945",
        "1432159771000": "88ec574a",
        "1432159814000": "d616291b",
        "1432226471000": "9fee8c37",
        "1432230694000": "e9c95668",
        "1432570490000": "8a37f7f0",
        "1432655059000": "eb95cb94",
        "1432663228000": "e9b6e9d4",
        "1432667795000": "7cab1b62",
        "1432691248000": "c2fde094",
        "1432817015000": "af05164b",
        "1432843491000": "98752647",
        "1432919986000": "205ac49f",
        "1433188473000": "ebf00d17",
        "1433257755000": "c2a3c0c2",
        "1433263956000": "46f6f7d7",
        "1433540599000": "b4a71795",
        "1433540673000": "0308a5d0",
        "1433542574000": "5c2a3f43",
        "1433780474000": "0e9ca4d7",
        "1433789270000": "f68cfe29",
        "1433794171000": "31ebcdb8",
        "1433853641000": "8a2ec149",
        "1433853665000": "2fe24210",
        "1433875098000": "b1b76c2b",
        "1433881530000": "02e030eb",
        "1433951435000": "0ff7dce2",
        "1433951504000": "d3807d4e",
        "1433967723000": "1010eed8",
        "1433967751000": "5fe59a59",
        "1434025907000": "84de42d0",
        "1434145217000": "710f7e7e",
        "1434378608000": "65d86474",
        "1434382615000": "902583a6",
        "1434465386000": "1380c036",
        "1434476953000": "49d01f4e",
        "1434478844000": "6efdca69",
        "1434482694000": "f28cf4c2",
        "1434491241000": "82e6abf9",
        "1434663265000": "bb972d06",
        "1434663514000": "3603f4a1",
        "1434741390000": "5b8a4efa",
        "1434766626000": "2d60096d",
        "1434986519000": "22c6afae",
        "1435073263000": "e6dbb3ad",
        "1435092912000": "d3040076",
        "1435185781000": "a3caf8b2",
        "1435251794000": "ed8fb9ff",
        "1435257543000": "04a0d31e",
        "1435335088000": "d0f4e3dd",
        "1435343863000": "58f21008",
        "1435357581000": "9357a6df",
        "1435649418000": "3d98398e",
        "1435685057000": "f91c8dc0",
        "1435686914000": "265e74d8",
        "1435686927000": "356939d1",
        "1435686951000": "4e8921b4",
        "1435693888000": "6a6e07fc",
        "1435718142000": "901daa5e",
        "1435873868000": "565f0587",
        "1436208506000": "127ce43f",
        "1436208572000": "8c12b367",
        "1436208691000": "eee24302",
        "1436208773000": "1f9a01b9",
        "1436208885000": "a2103f2c",
        "1436208957000": "dcea6d8a",
        "1436212190000": "f0690a76",
        "1436218713000": "4a0fe77c",
        "1436230958000": "78b40320",
        "1436291484000": "9558477c",
        "1436299184000": "3005f413",
        "1436299219000": "35a75cb4",
        "1436367017000": "1414d815",
        "1436376084000": "f93c06c9",
        "1436465884000": "b2eac037",
        "1436466089000": "9394d3ec",
        "1436497882000": "81ec3d44",
        "1436641152000": "377299d7",
        "1437058662000": "747ab842",
        "1437066039000": "3b51e6a7",
        "1438105735000": "00a62889",
        "1438111416000": "5c7212d8",
        "1438111907000": "0064907d",
        "1438610440000": "f957ade0",
        "1438613865000": "d34e1c8d",
        "1438637190000": "5995af0b",
        "1438724909000": "47c20e01",
        "1438810563000": "ae6fe05e",
        "1438810659000": "58bcc634",
        "1438810824000": "aebd68d5",
        "1438882011000": "c9d1b19a",
        "1438972971000": "b46272fc",
        "1439221514000": "3ef98a7f",
        "1439243556000": "dc51f4c8",
        "1439324973000": "eea9231b",
        "1439491736000": "abc09e10",
        "1439495963000": "0021237b",
        "1439826970000": "6b7b2ea7",
        "1439826981000": "f8c84798",
        "1439906173000": "7fc1c444",
        "1439915759000": "10412424",
        "1439918061000": "8c8e2827",
        "1440018953000": "cb27cd45",
        "1440022177000": "657c2528",
        "1440086017000": "62184d39",
        "1440088037000": "488b7c54",
        "1440088100000": "82ca5cb4",
        "1440088144000": "b28586b8",
        "1440088346000": "d45ff4c0",
        "1440096100000": "9382cdd5",
        "1440100202000": "a8b82c8a",
        "1440100269000": "ba741e98",
        "1440435978000": "90804601",
        "1440684588000": "8e14d62d",
        "1440693874000": "22af8d3e",
        "1440795401000": "cbe6f6e6",
        "1441033001000": "3ad095f7",
        "1441048080000": "ddab3125",
        "1441055724000": "1f45144a",
        "1441207835000": "76d0eef0",
        "1441212910000": "06b49718",
        "1441729430000": "fa993bc1",
        "1441730227000": "25f007f4",
        "1441795122000": "36f6f080",
        "1441795948000": "b353974a",
        "1441893484000": "032913c4",
        "1441919683000": "255d15b2",
        "1441921706000": "1c371994",
        "1441921824000": "d0de18a7",
        "1441988544000": "ec1b520f",
        "1442242403000": "c789d1d9",
        "1442261691000": "189543a5",
        "1442265291000": "f2d60149",
        "1442337135000": "fa90844d",
        "1442337355000": "1e1fd568",
        "1442346168000": "eb297486",
        "1442356551000": "d7c0d470",
        "1442406816000": "8349fd41",
        "1442415335000": "769a507d",
        "1442417887000": "8cdf4843",
        "1442417980000": "6797f17b",
        "1442422734000": "ac9929db",
        "1442437660000": "148f439e",
        "1442520688000": "30c874ed",
        "1442938711000": "8d7c9d1c",
        "1442950978000": "a854ae85",
        "1443524441000": "864ae61c",
        "1443722776000": "7557d099",
        "1443789996000": "d2311f7f",
        "1444054021000": "b6e05cab",
        "1444054647000": "921fa522",
        "1444054769000": "f7882356",
        "1444054813000": "50eeb810",
        "1444079889000": "488c97b7",
        "1444080186000": "4e823e27",
        "1444134946000": "b5984513",
        "1444146616000": "f09755a3",
        "1444153365000": "50249d4c",
        "1444249304000": "11e13f9f",
        "1444413996000": "defcf9ca",
        "1444667321000": "9bd2a949",
        "1444674624000": "e5b9cbbf",
        "1444678480000": "f3c46576",
        "1444686275000": "f0c18370",
        "1444748770000": "3a268213",
        "1444749326000": "88b4eb28",
        "1444751727000": "992a1c1f",
        "1444756900000": "a4a4c4b5",
        "1444837972000": "c418c6db",
        "1444853603000": "2554d268",
        "1444910010000": "30d8eee0",
        "1444916839000": "69618c17",
        "1444960122000": "caa94f9e",
        "1445018873000": "ef3cdfe2",
        "1445031097000": "c79a928d",
        "1445035584000": "62055228",
        "1445270543000": "429aa14e",
        "1445271836000": "3dc77a74",
        "1445355463000": "ece941f6",
        "1445356220000": "0d5c047c",
        "1445617605000": "fb16abd9",
        "1445624489000": "3e868454",
        "1445949209000": "b7501691",
        "1445964117000": "e01b4109",
        "1445966204000": "b45875fd",
        "1445973790000": "c37d9e12",
        "1446057805000": "48378ced",
        "1446061022000": "9edfb785",
        "1446155961000": "012eba9f",
        "1446483143000": "1c078de1",
        "1446567151000": "ccfc5669",
        "1446573273000": "aa8a0846",
        "1446578416000": "e54d9c1f",
        "1446581008000": "e1a14852",
        "1446603049000": "7faf6006",
        "1446605744000": "eafcea60",
        "1446733116000": "255a666b",
        "1446733152000": "0f79c49b",
        "1446733162000": "f8b3ec9c",
        "1446733315000": "1902d7f0",
        "1447958686000": "345d601e",
        "1448040439000": "0798ad41",
        "1448046444000": "c1b730f5",
        "1448555244000": "916d6825",
        "1448894048000": "52b919a2",
        "1448894227000": "95f90883",
        "1448894296000": "b1ca4f09",
        "1448899829000": "6c7d865f",
        "1448900639000": "5ed7ff9c",
        "1448905851000": "7bc1535d",
        "1448906762000": "4e8b584b",
        "1448918914000": "02604d1d",
        "1449000547000": "b21fa352",
        "1449078852000": "d7855701",
        "1449079893000": "98938dc3",
        "1449150364000": "f481c56f",
        "1449151289000": "ed0094cf",
        "1449157600000": "0e6aa23e",
        "1449163203000": "bbfcca41",
        "1449170929000": "40e6594e",
        "1449170968000": "b2316625",
        "1449523984000": "e50ab6ee",
        "1449582347000": "2a7f56d7",
        "1449601169000": "11ccbbd8",
        "1449604888000": "4ed91979",
        "1449605191000": "4554e445",
        "1449605346000": "6cb85aee",
        "1449610662000": "0b26203f",
        "1449613303000": "36b1a042",
        "1449688770000": "0e3e4801",
        "1449689957000": "54e45c62",
        "1449806188000": "1e2dd399",
        "1450106092000": "0bb88e6d",
        "1450374446000": "196886c1",
        "1450379158000": "d61f4597",
        "1451507723000": "cc21828f",
        "1451523250000": "ec2dc85f",
        "1451573710000": "f2da0390",
        "1451580193000": "2f2302fd",
        "1452011794000": "26ce9d6d",
        "1452011934000": "d871da0d",
        "1452106064000": "88bafa0a",
        "1452121467000": "de51861a",
        "1452186707000": "2d214ade",
        "1452294147000": "47f5d74c",
        "1452543993000": "62800469",
        "1452612405000": "86f10867",
        "1452617224000": "54f93d96",
        "1452706490000": "20be5ee5",
        "1452711020000": "94ec3ac4",
        "1452877155000": "63433701",
        "1452877522000": "e03abc9c",
        "1452877582000": "f3ec60bb",
        "1452888153000": "9b17e63e",
        "1453127983000": "3bf052b4",
        "1453128244000": "18694371",
        "1453135711000": "2bdd7f50",
        "1453138365000": "dde50d83",
        "1453141737000": "5a37bd3c",
        "1453225394000": "3c9219ed",
        "1453308369000": "ad948372",
        "1453311390000": "2a3e31a0",
        "1453412207000": "a823caea",
        "1453412800000": "4f2915ff",
        "1453414253000": "4dd63339",
        "1453414319000": "0775f451",
        "1453722811000": "84d1340a",
        "1453735240000": "efd5672f",
        "1453739257000": "35014474",
        "1453821428000": "54b5c4a8",
        "1453834670000": "c0d6355d",
        "1453837664000": "5f77e389",
        "1453837823000": "f6eb2f65",
        "1453846572000": "629aa795",
        "1453903554000": "0f80f584",
        "1453916073000": "17289994",
        "1453938800000": "f0ba2f69",
        "1453992440000": "767d1ba2",
        "1453992509000": "f6aed896",
        "1453992553000": "c26beff2",
        "1453992628000": "8a1e2d0d",
        "1454001839000": "26714bb2",
        "1454003901000": "81c83aaa",
        "1454013129000": "7942f670",
        "1454013165000": "f21eb2d8",
        "1454091656000": "b369b386",
        "1454343787000": "49b387fe",
        "1454349902000": "09c27e7f",
        "1454428284000": "940ab398",
        "1454595261000": "513f9688",
        "1454621431000": "34908eac",
        "1454623905000": "41ac00e0",
        "1455018277000": "b7071f25",
        "1455042774000": "86d34e29",
        "1455048340000": "83513c6a",
        "1455048418000": "43bd4337",
        "1455048524000": "c14e90b7",
        "1455048756000": "4e7f3609",
        "1455114831000": "b2c3dced",
        "1455139601000": "f7f53d55",
        "1455193520000": "6805eb60",
        "1455210161000": "656ae596",
        "1455566353000": "d6170bef",
        "1455570086000": "0eef5858",
        "1455570095000": "dba174f3",
        "1455631564000": "860617bc",
        "1455645454000": "b9a877c5",
        "1455716682000": "b7a188d2",
        "1455721080000": "036ee223",
        "1455730773000": "1938754a",
        "1455730812000": "f6e46316",
        "1455737152000": "8d7e4520",
        "1455737222000": "fabf1a33",
        "1455746626000": "e8855bc4",
        "1455815147000": "dfbd14f4",
        "1455815167000": "e00bc55a",
        "1455824034000": "f16f201c",
        "1455837657000": "77d6a60c",
        "1456153259000": "0a098f40",
        "1456216136000": "88e4fecf",
        "1456301253000": "a436b5ff",
        "1456419830000": "7213d1aa",
        "1456765036000": "180c576d",
        "1456843540000": "4ed24abe",
        "1456843585000": "672040be",
        "1456851655000": "d31fc2b7",
        "1456860388000": "f6c25bc1",
        "1456860395000": "842d2d94",
        "1457379669000": "ab241f5a",
        "1457383166000": "4bc20dae",
        "1457385651000": "3afc1f33",
        "1457386454000": "cb8d5f33",
        "1457391097000": "ac2f2787",
        "1457446274000": "40f81f2b",
        "1457452403000": "eb208b1d",
        "1457452679000": "5dc286db",
        "1457464106000": "b0e4b81f",
        "1457539069000": "75076dec",
        "1457539237000": "bbb6b279",
        "1457541376000": "03595306",
        "1457631755000": "d8a8a039",
        "1457631786000": "da02eea0",
        "1457631840000": "1ca85e17"
    },
    "machines": {
        "nvidia1": {
            "arch": "x86_64",
            "cpu": "Intel(R) Core(TM) i7-4820K CPU @ 3.70GHz",
            "machine": "nvidia1",
            "os": "Linux 3.11.0-15-generic",
            "ram": "32885840",
            "version": 1
        }
    },
    "params": {
        "arch": [
            "x86_64"
        ],
        "cpu": [
            "Intel(R) Core(TM) i7-4820K CPU @ 3.70GHz"
        ],
        "cudatoolkit": [
            null
        ],
        "llvmlite": [
            null
        ],
        "llvmpy": [
            null
        ],
        "machine": [
            "nvidia1"
        ],
        "numpy": [
            null
        ],
        "os": [
            "Linux 3.11.0-15-generic"
        ],
        "python": [
            "3.4"
        ],
        "ram": [
            "32885840"
        ]
    },
    "project": "numba",
    "project_url": "http://numba.pydata.org/",
    "show_commit_url": "https://github.com/numba/numba/commit/",
    "tags": {
        "0.10.0": 1375305135000,
        "0.10.1": 1377793439000,
        "0.10.2": 1378407372000,
        "0.11.0": 1380164192000,
        "0.11.1": 1384199446000,
        "0.12.0": 1391538273000,
        "0.12.1": 1392754353000,
        "0.12.2": 1393880386000,
        "0.13.0": 1395416480000,
        "0.13.1": 1397602403000,
        "0.13.2": 1402061218000,
        "0.13.3": 1404845709000,
        "0.13.4": 1406755512000,
        "0.13.4rc2": 1406752249000,
        "0.13.4rc3": 1406755512000,
        "0.14.0": 1410392069000,
        "0.15.0": 1413310231000,
        "0.15.1": 1413402353000,
        "0.16.0": 1418760961000,
        "0.17.0": 1422889793000,
        "0.17.0rc1": 1422889793000,
        "0.18.0": 1427727355000,
        "0.18.0rc1": 1427489098000,
        "0.18.1": 1427919923000,
        "0.18.2": 1428437389000,
        "0.19.0": 1432919986000,
        "0.19.1": 1433257755000,
        "0.19.2": 1433866825000,
        "0.2": 1349319088000,
        "0.20.0": 1435718142000,
        "0.21.0": 1441212910000,
        "0.22.0": 1446155961000,
        "0.22.1": 1446605744000,
        "0.23.0": 1452711020000,
        "0.23.1": 1453311390000,
        "0.24.0": 1456860395000,
        "0.25.0": 1459771368000,
        "0.26.0.dev": 1459771368000,
        "0.3": 1352591078000,
        "0.3.1": 1352764522000,
        "0.3.2": 1353347048000,
        "0.5.0": 1358555707000,
        "0.6.0": 1360104340000,
        "0.7.0": 1362396474000,
        "0.7.1": 1363031465000,
        "0.7.2": 1363803646000,
        "0.8.0": 1366053968000,
        "0.8.1": 1366843208000,
        "0.9.0": 1370205366000,
        "0.9.1": 1375305135000,
        "dev": 1344644645000,
        "v0.1": 1345050987000,
        "v0.1.1": 1346450423000,
        "v0.1rc0": 1344977571000
    }
}