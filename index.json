{
    "benchmarks": {
        "bench_arrayexprs.ArrayExpressions.time_cube_float32": {
            "code": "class <locals>:\n    def f(self):\n        f = getattr(self, func)\n        f(*self.samples[dtype])\n\ndef setup():\n    ArrayExpressions.setupClass()\n\nclass ArrayExpressions:\n    def setup(self):\n        from numba import jit\n    \n        jitter = jit(nopython=True)\n        self.sum = jitter(sum)\n        self.sq_diff = jitter(sq_diff)\n        self.rel_diff = jitter(rel_diff)\n        self.square = jitter(square)\n        self.cube = jitter(cube)",
            "name": "bench_arrayexprs.ArrayExpressions.time_cube_float32",
            "number": 0,
            "param_names": [],
            "params": [],
            "processes": 2,
            "repeat": 0,
            "sample_time": 0.1,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds",
            "version": "1151032abb1a474047d75729df99dd3d8747e03d4286942f01814ef3596b355f",
            "warmup_time": -1
        },
        "bench_arrayexprs.ArrayExpressions.time_cube_float64": {
            "code": "class <locals>:\n    def f(self):\n        f = getattr(self, func)\n        f(*self.samples[dtype])\n\ndef setup():\n    ArrayExpressions.setupClass()\n\nclass ArrayExpressions:\n    def setup(self):\n        from numba import jit\n    \n        jitter = jit(nopython=True)\n        self.sum = jitter(sum)\n        self.sq_diff = jitter(sq_diff)\n        self.rel_diff = jitter(rel_diff)\n        self.square = jitter(square)\n        self.cube = jitter(cube)",
            "name": "bench_arrayexprs.ArrayExpressions.time_cube_float64",
            "number": 0,
            "param_names": [],
            "params": [],
            "processes": 2,
            "repeat": 0,
            "sample_time": 0.1,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds",
            "version": "1151032abb1a474047d75729df99dd3d8747e03d4286942f01814ef3596b355f",
            "warmup_time": -1
        },
        "bench_arrayexprs.ArrayExpressions.time_rel_diff_float32": {
            "code": "class <locals>:\n    def f(self):\n        f = getattr(self, func)\n        f(*self.samples[dtype])\n\ndef setup():\n    ArrayExpressions.setupClass()\n\nclass ArrayExpressions:\n    def setup(self):\n        from numba import jit\n    \n        jitter = jit(nopython=True)\n        self.sum = jitter(sum)\n        self.sq_diff = jitter(sq_diff)\n        self.rel_diff = jitter(rel_diff)\n        self.square = jitter(square)\n        self.cube = jitter(cube)",
            "name": "bench_arrayexprs.ArrayExpressions.time_rel_diff_float32",
            "number": 0,
            "param_names": [],
            "params": [],
            "processes": 2,
            "repeat": 0,
            "sample_time": 0.1,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds",
            "version": "1151032abb1a474047d75729df99dd3d8747e03d4286942f01814ef3596b355f",
            "warmup_time": -1
        },
        "bench_arrayexprs.ArrayExpressions.time_rel_diff_float64": {
            "code": "class <locals>:\n    def f(self):\n        f = getattr(self, func)\n        f(*self.samples[dtype])\n\ndef setup():\n    ArrayExpressions.setupClass()\n\nclass ArrayExpressions:\n    def setup(self):\n        from numba import jit\n    \n        jitter = jit(nopython=True)\n        self.sum = jitter(sum)\n        self.sq_diff = jitter(sq_diff)\n        self.rel_diff = jitter(rel_diff)\n        self.square = jitter(square)\n        self.cube = jitter(cube)",
            "name": "bench_arrayexprs.ArrayExpressions.time_rel_diff_float64",
            "number": 0,
            "param_names": [],
            "params": [],
            "processes": 2,
            "repeat": 0,
            "sample_time": 0.1,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds",
            "version": "1151032abb1a474047d75729df99dd3d8747e03d4286942f01814ef3596b355f",
            "warmup_time": -1
        },
        "bench_arrayexprs.ArrayExpressions.time_sq_diff_float32": {
            "code": "class <locals>:\n    def f(self):\n        f = getattr(self, func)\n        f(*self.samples[dtype])\n\ndef setup():\n    ArrayExpressions.setupClass()\n\nclass ArrayExpressions:\n    def setup(self):\n        from numba import jit\n    \n        jitter = jit(nopython=True)\n        self.sum = jitter(sum)\n        self.sq_diff = jitter(sq_diff)\n        self.rel_diff = jitter(rel_diff)\n        self.square = jitter(square)\n        self.cube = jitter(cube)",
            "name": "bench_arrayexprs.ArrayExpressions.time_sq_diff_float32",
            "number": 0,
            "param_names": [],
            "params": [],
            "processes": 2,
            "repeat": 0,
            "sample_time": 0.1,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds",
            "version": "1151032abb1a474047d75729df99dd3d8747e03d4286942f01814ef3596b355f",
            "warmup_time": -1
        },
        "bench_arrayexprs.ArrayExpressions.time_sq_diff_float64": {
            "code": "class <locals>:\n    def f(self):\n        f = getattr(self, func)\n        f(*self.samples[dtype])\n\ndef setup():\n    ArrayExpressions.setupClass()\n\nclass ArrayExpressions:\n    def setup(self):\n        from numba import jit\n    \n        jitter = jit(nopython=True)\n        self.sum = jitter(sum)\n        self.sq_diff = jitter(sq_diff)\n        self.rel_diff = jitter(rel_diff)\n        self.square = jitter(square)\n        self.cube = jitter(cube)",
            "name": "bench_arrayexprs.ArrayExpressions.time_sq_diff_float64",
            "number": 0,
            "param_names": [],
            "params": [],
            "processes": 2,
            "repeat": 0,
            "sample_time": 0.1,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds",
            "version": "1151032abb1a474047d75729df99dd3d8747e03d4286942f01814ef3596b355f",
            "warmup_time": -1
        },
        "bench_arrayexprs.ArrayExpressions.time_square_float32": {
            "code": "class <locals>:\n    def f(self):\n        f = getattr(self, func)\n        f(*self.samples[dtype])\n\ndef setup():\n    ArrayExpressions.setupClass()\n\nclass ArrayExpressions:\n    def setup(self):\n        from numba import jit\n    \n        jitter = jit(nopython=True)\n        self.sum = jitter(sum)\n        self.sq_diff = jitter(sq_diff)\n        self.rel_diff = jitter(rel_diff)\n        self.square = jitter(square)\n        self.cube = jitter(cube)",
            "name": "bench_arrayexprs.ArrayExpressions.time_square_float32",
            "number": 0,
            "param_names": [],
            "params": [],
            "processes": 2,
            "repeat": 0,
            "sample_time": 0.1,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds",
            "version": "1151032abb1a474047d75729df99dd3d8747e03d4286942f01814ef3596b355f",
            "warmup_time": -1
        },
        "bench_arrayexprs.ArrayExpressions.time_square_float64": {
            "code": "class <locals>:\n    def f(self):\n        f = getattr(self, func)\n        f(*self.samples[dtype])\n\ndef setup():\n    ArrayExpressions.setupClass()\n\nclass ArrayExpressions:\n    def setup(self):\n        from numba import jit\n    \n        jitter = jit(nopython=True)\n        self.sum = jitter(sum)\n        self.sq_diff = jitter(sq_diff)\n        self.rel_diff = jitter(rel_diff)\n        self.square = jitter(square)\n        self.cube = jitter(cube)",
            "name": "bench_arrayexprs.ArrayExpressions.time_square_float64",
            "number": 0,
            "param_names": [],
            "params": [],
            "processes": 2,
            "repeat": 0,
            "sample_time": 0.1,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds",
            "version": "1151032abb1a474047d75729df99dd3d8747e03d4286942f01814ef3596b355f",
            "warmup_time": -1
        },
        "bench_arrayexprs.ArrayExpressions.time_sum_float32": {
            "code": "class <locals>:\n    def f(self):\n        f = getattr(self, func)\n        f(*self.samples[dtype])\n\ndef setup():\n    ArrayExpressions.setupClass()\n\nclass ArrayExpressions:\n    def setup(self):\n        from numba import jit\n    \n        jitter = jit(nopython=True)\n        self.sum = jitter(sum)\n        self.sq_diff = jitter(sq_diff)\n        self.rel_diff = jitter(rel_diff)\n        self.square = jitter(square)\n        self.cube = jitter(cube)",
            "name": "bench_arrayexprs.ArrayExpressions.time_sum_float32",
            "number": 0,
            "param_names": [],
            "params": [],
            "processes": 2,
            "repeat": 0,
            "sample_time": 0.1,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds",
            "version": "1151032abb1a474047d75729df99dd3d8747e03d4286942f01814ef3596b355f",
            "warmup_time": -1
        },
        "bench_arrayexprs.ArrayExpressions.time_sum_float64": {
            "code": "class <locals>:\n    def f(self):\n        f = getattr(self, func)\n        f(*self.samples[dtype])\n\ndef setup():\n    ArrayExpressions.setupClass()\n\nclass ArrayExpressions:\n    def setup(self):\n        from numba import jit\n    \n        jitter = jit(nopython=True)\n        self.sum = jitter(sum)\n        self.sq_diff = jitter(sq_diff)\n        self.rel_diff = jitter(rel_diff)\n        self.square = jitter(square)\n        self.cube = jitter(cube)",
            "name": "bench_arrayexprs.ArrayExpressions.time_sum_float64",
            "number": 0,
            "param_names": [],
            "params": [],
            "processes": 2,
            "repeat": 0,
            "sample_time": 0.1,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds",
            "version": "1151032abb1a474047d75729df99dd3d8747e03d4286942f01814ef3596b355f",
            "warmup_time": -1
        },
        "bench_blackscholes.BlackScholes.time_blackscholes": {
            "code": "class BlackScholes:\n    def time_blackscholes(self):\n        for i in range(10):\n            blackscholes(*args)\n\ndef setup():\n    \"\"\"\n    Precompile jitted functions.\n    \"\"\"\n    global cnd, blackscholes\n    from numba import jit\n\n\n    @jit(nopython=True)\n    def cnd(d):\n        K = 1.0 / (1.0 + 0.2316419 * math.fabs(d))\n        ret_val = (RSQRT2PI * math.exp(-0.5 * d * d) *\n                (K * (A1 + K * (A2 + K * (A3 + K * (A4 + K * A5))))))\n        if d > 0:\n            ret_val = 1.0 - ret_val\n        return ret_val\n\n\n    @jit(nopython=True)\n    def blackscholes(callResult, putResult, stockPrice, optionStrike,\n                    optionYears, Riskfree, Volatility):\n        S = stockPrice\n        X = optionStrike\n        T = optionYears\n        R = Riskfree\n        V = Volatility\n        for i in range(len(S)):\n            sqrtT = math.sqrt(T[i])\n            d1 = (math.log(S[i] / X[i]) + (R + 0.5 * V * V) * T[i]) / (V * sqrtT)\n            d2 = d1 - V * sqrtT\n            cndd1 = cnd(d1)\n            cndd2 = cnd(d2)\n\n            expRT = math.exp((-1. * R) * T[i])\n            callResult[i] = (S[i] * cndd1 - X[i] * expRT * cndd2)\n            putResult[i] = (X[i] * expRT * (1.0 - cndd2) - S[i] * (1.0 - cndd1))\n\n\n\n    blackscholes(*args)",
            "name": "bench_blackscholes.BlackScholes.time_blackscholes",
            "number": 0,
            "param_names": [],
            "params": [],
            "processes": 2,
            "repeat": 0,
            "sample_time": 0.1,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds",
            "version": "713317b9a430aef49eeec252abe1094c762b66cb0a4bfe98c94d411aec759716",
            "warmup_time": -1
        },
        "bench_centdiff.CenteredDifference.time_centered_difference_1d": {
            "code": "class CenteredDifference:\n    def time_centered_difference_1d(self):\n        centered_difference_range1d(u1, D1, dx)\n\ndef setup():\n    global centered_difference_range1d, centered_difference_range2d\n    from numba import jit\n\n    @jit(nopython=True)\n    def centered_difference_range1d(u, D, dx=1.):\n        m, = u.shape\n        for i in range(1, m - 1):\n            D[i] = (u[i-1] + u[i+1] - 2.0*u[i]) / dx**2\n        return D\n\n    @jit(nopython=True)\n    def centered_difference_range2d(u, D, dx=1.):\n        m, n = u.shape\n        for i in range(1, m - 1):\n            for j in range(1, n - 1):\n                D[i,j] = (u[i+1,j] + u[i,j+1] + u[i-1,j] + u[i,j-1] - 4.0*u[i,j]) / dx**2\n        return D",
            "name": "bench_centdiff.CenteredDifference.time_centered_difference_1d",
            "number": 0,
            "param_names": [],
            "params": [],
            "processes": 2,
            "repeat": 0,
            "sample_time": 0.1,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds",
            "version": "346a30e261ca79ed2cda69d7b874027c6421aa74ec323be016703c840bda9e48",
            "warmup_time": -1
        },
        "bench_centdiff.CenteredDifference.time_centered_difference_2d_C": {
            "code": "class CenteredDifference:\n    def time_centered_difference_2d_C(self):\n        centered_difference_range2d(u2c, D2c, dx)\n\ndef setup():\n    global centered_difference_range1d, centered_difference_range2d\n    from numba import jit\n\n    @jit(nopython=True)\n    def centered_difference_range1d(u, D, dx=1.):\n        m, = u.shape\n        for i in range(1, m - 1):\n            D[i] = (u[i-1] + u[i+1] - 2.0*u[i]) / dx**2\n        return D\n\n    @jit(nopython=True)\n    def centered_difference_range2d(u, D, dx=1.):\n        m, n = u.shape\n        for i in range(1, m - 1):\n            for j in range(1, n - 1):\n                D[i,j] = (u[i+1,j] + u[i,j+1] + u[i-1,j] + u[i,j-1] - 4.0*u[i,j]) / dx**2\n        return D",
            "name": "bench_centdiff.CenteredDifference.time_centered_difference_2d_C",
            "number": 0,
            "param_names": [],
            "params": [],
            "processes": 2,
            "repeat": 0,
            "sample_time": 0.1,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds",
            "version": "4931b9a5724f1867b2f4289eec02d0b52b757cfe4c7b0772043836f4064252eb",
            "warmup_time": -1
        },
        "bench_centdiff.CenteredDifference.time_centered_difference_2d_fortran": {
            "code": "class CenteredDifference:\n    def time_centered_difference_2d_fortran(self):\n        centered_difference_range2d(u2f, D2f, dx)\n\ndef setup():\n    global centered_difference_range1d, centered_difference_range2d\n    from numba import jit\n\n    @jit(nopython=True)\n    def centered_difference_range1d(u, D, dx=1.):\n        m, = u.shape\n        for i in range(1, m - 1):\n            D[i] = (u[i-1] + u[i+1] - 2.0*u[i]) / dx**2\n        return D\n\n    @jit(nopython=True)\n    def centered_difference_range2d(u, D, dx=1.):\n        m, n = u.shape\n        for i in range(1, m - 1):\n            for j in range(1, n - 1):\n                D[i,j] = (u[i+1,j] + u[i,j+1] + u[i-1,j] + u[i,j-1] - 4.0*u[i,j]) / dx**2\n        return D",
            "name": "bench_centdiff.CenteredDifference.time_centered_difference_2d_fortran",
            "number": 0,
            "param_names": [],
            "params": [],
            "processes": 2,
            "repeat": 0,
            "sample_time": 0.1,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds",
            "version": "d178f6a31b51aff3e8d3271dd2e2718fdff8298e5ccc8d985acdf1e37049d02b",
            "warmup_time": -1
        },
        "bench_centdiff.CenteredDifference.time_centered_difference_2d_non_contiguous": {
            "code": "class CenteredDifference:\n    def time_centered_difference_2d_non_contiguous(self):\n        centered_difference_range2d(u2a, D2a, dx)\n\ndef setup():\n    global centered_difference_range1d, centered_difference_range2d\n    from numba import jit\n\n    @jit(nopython=True)\n    def centered_difference_range1d(u, D, dx=1.):\n        m, = u.shape\n        for i in range(1, m - 1):\n            D[i] = (u[i-1] + u[i+1] - 2.0*u[i]) / dx**2\n        return D\n\n    @jit(nopython=True)\n    def centered_difference_range2d(u, D, dx=1.):\n        m, n = u.shape\n        for i in range(1, m - 1):\n            for j in range(1, n - 1):\n                D[i,j] = (u[i+1,j] + u[i,j+1] + u[i-1,j] + u[i,j-1] - 4.0*u[i,j]) / dx**2\n        return D",
            "name": "bench_centdiff.CenteredDifference.time_centered_difference_2d_non_contiguous",
            "number": 0,
            "param_names": [],
            "params": [],
            "processes": 2,
            "repeat": 0,
            "sample_time": 0.1,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds",
            "version": "6444f2b118b6fa213f3e6b588a26bae278754d3c7f3a52e09ffff5c0b6e709b3",
            "warmup_time": -1
        },
        "bench_compiling.CachedCompilation.time_jit_mandel": {
            "code": "class CachedCompilation:\n    def time_jit_mandel(self):\n        jit(mandel_sig, cache=True, nopython=True)(mandel)\n\ndef setup():\n    global jit\n    from numba import jit\n\nclass CachedCompilation:\n    def setup_cache(self):\n        from numba import jit\n        # Ensure the functions are cached into the ASV environment\n        # before running the actual benchmark methods.\n        jit(mandel_sig, cache=True, nopython=True)(mandel)\n        jit(\"int32(int32)\", cache=True, nopython=True)(no_op)",
            "name": "bench_compiling.CachedCompilation.time_jit_mandel",
            "number": 0,
            "param_names": [],
            "params": [],
            "processes": 2,
            "repeat": 0,
            "sample_time": 0.1,
            "setup_cache_key": "/mnt/home/sklam/dev/numba-benchmark/benchmarks/bench_compiling.py:73",
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds",
            "version": "31e72bce638c21023b9d4c26195cd4ebdcccda552a431270eeb06ea18f550ea3",
            "warmup_time": -1
        },
        "bench_compiling.CachedCompilation.time_jit_noop": {
            "code": "class CachedCompilation:\n    def time_jit_noop(self):\n        jit(\"int32(int32)\", cache=True, nopython=True)(no_op)\n\ndef setup():\n    global jit\n    from numba import jit\n\nclass CachedCompilation:\n    def setup_cache(self):\n        from numba import jit\n        # Ensure the functions are cached into the ASV environment\n        # before running the actual benchmark methods.\n        jit(mandel_sig, cache=True, nopython=True)(mandel)\n        jit(\"int32(int32)\", cache=True, nopython=True)(no_op)",
            "name": "bench_compiling.CachedCompilation.time_jit_noop",
            "number": 0,
            "param_names": [],
            "params": [],
            "processes": 2,
            "repeat": 0,
            "sample_time": 0.1,
            "setup_cache_key": "/mnt/home/sklam/dev/numba-benchmark/benchmarks/bench_compiling.py:73",
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds",
            "version": "20b3b035b520c679bebebe1398a47ea9d0dd85cf0c412ab08e98a5e167f1f57d",
            "warmup_time": -1
        },
        "bench_compiling.LoopLiftedCompilation.time_lift": {
            "code": "class LoopLiftedCompilation:\n    def time_lift(self):\n        # The only way to time the entire thing (including the inner\n        # function formed by the loop) is to call the function wrapper.\n        f = jit(lift)\n        f(1.0)\n\ndef setup():\n    global jit\n    from numba import jit",
            "name": "bench_compiling.LoopLiftedCompilation.time_lift",
            "number": 0,
            "param_names": [],
            "params": [],
            "processes": 2,
            "repeat": 0,
            "sample_time": 0.1,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds",
            "version": "fdd062a3b3282be795df2896e8f64900902cda619a91af87de528cfcd6cb3d6b",
            "warmup_time": -1
        },
        "bench_compiling.NoPythonCompilation.time_jit_mandel": {
            "code": "class NoPythonCompilation:\n    def time_jit_mandel(self):\n        jit(mandel_sig, nopython=True)(mandel)\n\ndef setup():\n    global jit\n    from numba import jit",
            "name": "bench_compiling.NoPythonCompilation.time_jit_mandel",
            "number": 0,
            "param_names": [],
            "params": [],
            "processes": 2,
            "repeat": 0,
            "sample_time": 0.1,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds",
            "version": "1a619b88830330f5ce3ee18f2c92ec41a5cdb1f549bb441fdb0303f8cfd63fa0",
            "warmup_time": -1
        },
        "bench_compiling.NoPythonCompilation.time_jit_noop": {
            "code": "class NoPythonCompilation:\n    def time_jit_noop(self):\n        jit(\"int32(int32)\", nopython=True)(no_op)\n\ndef setup():\n    global jit\n    from numba import jit",
            "name": "bench_compiling.NoPythonCompilation.time_jit_noop",
            "number": 0,
            "param_names": [],
            "params": [],
            "processes": 2,
            "repeat": 0,
            "sample_time": 0.1,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds",
            "version": "0aa9d7870a50c68f04ab9c981ce12208e1f430afb8c51c681e91cddca7a056af",
            "warmup_time": -1
        },
        "bench_compiling.PyObjectCompilation.time_jit_mandel_forceobj": {
            "code": "class PyObjectCompilation:\n    def time_jit_mandel_forceobj(self):\n        jit(mandel_sig, forceobj=True, looplift=False)(mandel)\n\ndef setup():\n    global jit\n    from numba import jit",
            "name": "bench_compiling.PyObjectCompilation.time_jit_mandel_forceobj",
            "number": 0,
            "param_names": [],
            "params": [],
            "processes": 2,
            "repeat": 0,
            "sample_time": 0.1,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds",
            "version": "697ed3240cacc08c5e1479c724a1345999f5d28441492f772cd6a37e87660793",
            "warmup_time": -1
        },
        "bench_compiling.PyObjectCompilation.time_jit_noop_fallback": {
            "code": "class PyObjectCompilation:\n    def time_jit_noop_fallback(self):\n        jit(\"int32(int32)\")(force_obj)\n\ndef setup():\n    global jit\n    from numba import jit",
            "name": "bench_compiling.PyObjectCompilation.time_jit_noop_fallback",
            "number": 0,
            "param_names": [],
            "params": [],
            "processes": 2,
            "repeat": 0,
            "sample_time": 0.1,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds",
            "version": "1923c71bd4f2e278762785b7e4b762a4bd1baf051a1e92f45c224e30b1b53ba2",
            "warmup_time": -1
        },
        "bench_compiling.PyObjectCompilation.time_jit_noop_forceobj": {
            "code": "class PyObjectCompilation:\n    def time_jit_noop_forceobj(self):\n        jit(\"int32(int32)\", forceobj=True)(force_obj)\n\ndef setup():\n    global jit\n    from numba import jit",
            "name": "bench_compiling.PyObjectCompilation.time_jit_noop_forceobj",
            "number": 0,
            "param_names": [],
            "params": [],
            "processes": 2,
            "repeat": 0,
            "sample_time": 0.1,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds",
            "version": "4d86add590e9e4c9935ba4d707e3fb334dcce473a57798f3b446114457ebeb30",
            "warmup_time": -1
        },
        "bench_cuda.BlackScholes.time_blackscholes": {
            "code": "class BlackScholes:\n    def time_blackscholes(self):\n        blockdim = 512, 1\n        griddim = int(math.ceil(float(N) / blockdim[0])), 1\n        for i in range(10):\n            black_scholes_cuda[griddim, blockdim, self.stream](\n                self.d_callResult, self.d_putResult,\n                self.d_stockPrice, self.d_optionStrike, self.d_optionYears,\n                RISKFREE, VOLATILITY)\n        self.stream.synchronize()\n\ndef setup():\n    _jit_setup1()\n    _jit_setup2()\n\nclass BlackScholes:\n    def setup(self):\n        self.stream = cuda.stream()\n        self.d_callResult = cuda.to_device(callResultGold, self.stream)\n        self.d_putResult = cuda.to_device(putResultGold, self.stream)\n        self.d_stockPrice = cuda.to_device(stockPrice, self.stream)\n        self.d_optionStrike = cuda.to_device(optionStrike, self.stream)\n        self.d_optionYears = cuda.to_device(optionYears, self.stream)\n        self.stream.synchronize()",
            "name": "bench_cuda.BlackScholes.time_blackscholes",
            "number": 0,
            "param_names": [],
            "params": [],
            "processes": 2,
            "repeat": 0,
            "sample_time": 0.1,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds",
            "version": "4a457708adad4165a73f676965e3d4bb544b2e02bbc9944ebb5397fbb1493d97",
            "warmup_time": -1
        },
        "bench_cuda.DataTransfer.time_transfer_from_gpu_large": {
            "code": "class DataTransfer:\n    def time_transfer_from_gpu_large(self):\n        for i in range(10):\n            self.d_large_data.copy_to_host(self.large_data, self.stream)\n        self.stream.synchronize()\n\ndef setup():\n    _jit_setup1()\n    _jit_setup2()\n\nclass DataTransfer:\n    def setup(self):\n        self.stream = cuda.stream()\n        self.small_data = np.zeros(512, dtype=np.float64)\n        self.large_data = np.zeros(512 * 1024, dtype=np.float64)\n        self.d_small_data = cuda.to_device(self.small_data, self.stream)\n        self.d_large_data = cuda.to_device(self.large_data, self.stream)\n        self.stream.synchronize()",
            "name": "bench_cuda.DataTransfer.time_transfer_from_gpu_large",
            "number": 0,
            "param_names": [],
            "params": [],
            "processes": 2,
            "repeat": 0,
            "sample_time": 0.1,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds",
            "version": "627ef5f5c0cab131d4bdb52bd9cc299c93195c054cf4f9f1dd6984189f318573",
            "warmup_time": -1
        },
        "bench_cuda.DataTransfer.time_transfer_from_gpu_small": {
            "code": "class DataTransfer:\n    def time_transfer_from_gpu_small(self):\n        for i in range(10):\n            self.d_small_data.copy_to_host(self.small_data, self.stream)\n        self.stream.synchronize()\n\ndef setup():\n    _jit_setup1()\n    _jit_setup2()\n\nclass DataTransfer:\n    def setup(self):\n        self.stream = cuda.stream()\n        self.small_data = np.zeros(512, dtype=np.float64)\n        self.large_data = np.zeros(512 * 1024, dtype=np.float64)\n        self.d_small_data = cuda.to_device(self.small_data, self.stream)\n        self.d_large_data = cuda.to_device(self.large_data, self.stream)\n        self.stream.synchronize()",
            "name": "bench_cuda.DataTransfer.time_transfer_from_gpu_small",
            "number": 0,
            "param_names": [],
            "params": [],
            "processes": 2,
            "repeat": 0,
            "sample_time": 0.1,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds",
            "version": "e05c66672408a57598ab202ec459859c32903b3eb4c138f2382909fea0acba57",
            "warmup_time": -1
        },
        "bench_cuda.DataTransfer.time_transfer_to_gpu_large": {
            "code": "class DataTransfer:\n    def time_transfer_to_gpu_large(self):\n        for i in range(10):\n            cuda.to_device(self.large_data, self.stream)\n        self.stream.synchronize()\n\ndef setup():\n    _jit_setup1()\n    _jit_setup2()\n\nclass DataTransfer:\n    def setup(self):\n        self.stream = cuda.stream()\n        self.small_data = np.zeros(512, dtype=np.float64)\n        self.large_data = np.zeros(512 * 1024, dtype=np.float64)\n        self.d_small_data = cuda.to_device(self.small_data, self.stream)\n        self.d_large_data = cuda.to_device(self.large_data, self.stream)\n        self.stream.synchronize()",
            "name": "bench_cuda.DataTransfer.time_transfer_to_gpu_large",
            "number": 0,
            "param_names": [],
            "params": [],
            "processes": 2,
            "repeat": 0,
            "sample_time": 0.1,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds",
            "version": "e92aeef7a46c8f1ae4858791b2a95483195f85cd6b481c31ddae0210786ca557",
            "warmup_time": -1
        },
        "bench_cuda.DataTransfer.time_transfer_to_gpu_small": {
            "code": "class DataTransfer:\n    def time_transfer_to_gpu_small(self):\n        for i in range(10):\n            cuda.to_device(self.small_data, self.stream)\n        self.stream.synchronize()\n\ndef setup():\n    _jit_setup1()\n    _jit_setup2()\n\nclass DataTransfer:\n    def setup(self):\n        self.stream = cuda.stream()\n        self.small_data = np.zeros(512, dtype=np.float64)\n        self.large_data = np.zeros(512 * 1024, dtype=np.float64)\n        self.d_small_data = cuda.to_device(self.small_data, self.stream)\n        self.d_large_data = cuda.to_device(self.large_data, self.stream)\n        self.stream.synchronize()",
            "name": "bench_cuda.DataTransfer.time_transfer_to_gpu_small",
            "number": 0,
            "param_names": [],
            "params": [],
            "processes": 2,
            "repeat": 0,
            "sample_time": 0.1,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds",
            "version": "579d23ce90eda6dfbe8856731832783b31bb12ba3445d01f9938233aaf1e0916",
            "warmup_time": -1
        },
        "bench_cuda.NBody.time_cpu_nbody": {
            "code": "class NBody:\n    def time_cpu_nbody(self):\n        run_cpu_nbody(self.positions, self.weights)\n\ndef setup():\n    _jit_setup1()\n    _jit_setup2()\n\nclass NBody:\n    def setup(self):\n        # Sanity check our implementation\n        p, w = make_nbody_samples(tile_size * 2)\n        runner = NBodyCUDARunner(p, w)\n        runner.run()\n        cuda_res = runner.results()\n        cpu_res = run_cpu_nbody(p, w)\n        assert np.allclose(cuda_res, cpu_res, 1e-4), (cuda_res, cpu_res)\n        # Make actual benchmark samples and prepare data transfer\n        self.positions, self.weights = make_nbody_samples(self.n_bodies)\n        self.runner = NBodyCUDARunner(self.positions, self.weights)",
            "name": "bench_cuda.NBody.time_cpu_nbody",
            "number": 0,
            "param_names": [],
            "params": [],
            "processes": 2,
            "repeat": 0,
            "sample_time": 0.1,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds",
            "version": "bd1b3a45b9aada49d32ae28fdc3fd31b672f09b6a9fb9b5179b59572eb30cebe",
            "warmup_time": -1
        },
        "bench_cuda.NBody.time_cuda_nbody": {
            "code": "class NBody:\n    def time_cuda_nbody(self):\n        self.runner.run()\n\ndef setup():\n    _jit_setup1()\n    _jit_setup2()\n\nclass NBody:\n    def setup(self):\n        # Sanity check our implementation\n        p, w = make_nbody_samples(tile_size * 2)\n        runner = NBodyCUDARunner(p, w)\n        runner.run()\n        cuda_res = runner.results()\n        cpu_res = run_cpu_nbody(p, w)\n        assert np.allclose(cuda_res, cpu_res, 1e-4), (cuda_res, cpu_res)\n        # Make actual benchmark samples and prepare data transfer\n        self.positions, self.weights = make_nbody_samples(self.n_bodies)\n        self.runner = NBodyCUDARunner(self.positions, self.weights)",
            "name": "bench_cuda.NBody.time_cuda_nbody",
            "number": 0,
            "param_names": [],
            "params": [],
            "processes": 2,
            "repeat": 0,
            "sample_time": 0.1,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds",
            "version": "5b4c25c6c67d0a1be4e141104c929a892b7ca63fafc8b85e344bb223ba5e0667",
            "warmup_time": -1
        },
        "bench_cuda.Synthetic.time_addmul_f32": {
            "code": "class Synthetic:\n    def time_addmul_f32(self):\n        blockdim = 512, 1\n        griddim = int(math.ceil(float(self.n) / blockdim[0])), 1\n        for i in range(10):\n            addmul_f32[griddim, blockdim, self.stream](\n                self.d_f32, self.d_f32, self.d_f32)\n        self.stream.synchronize()\n\ndef setup():\n    _jit_setup1()\n    _jit_setup2()\n\nclass Synthetic:\n    def setup(self):\n        self.no_op = cuda.jit(argtypes=())(no_op)\n        self.stream = cuda.stream()\n        self.f32 = np.zeros(self.n, dtype=np.float32)\n        self.d_f32 = cuda.to_device(self.f32, self.stream)\n        self.f64 = np.zeros(self.n, dtype=np.float64)\n        self.d_f64 = cuda.to_device(self.f64, self.stream)\n        self.sum_reduce = cuda.reduce(lambda x, y: x+y)\n        self.res_f32 = cuda.to_device(np.zeros(1, dtype=np.float32))\n        self.res_f64 = cuda.to_device(np.zeros(1, dtype=np.float64))\n        self.stream.synchronize()",
            "name": "bench_cuda.Synthetic.time_addmul_f32",
            "number": 0,
            "param_names": [],
            "params": [],
            "processes": 2,
            "repeat": 0,
            "sample_time": 0.1,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds",
            "version": "3d4d84e0ba35073275b596474bddf0ba09bb2f0761d7317f398b7af972224d81",
            "warmup_time": -1
        },
        "bench_cuda.Synthetic.time_addmul_f64": {
            "code": "class Synthetic:\n    def time_addmul_f64(self):\n        blockdim = 512, 1\n        griddim = int(math.ceil(float(self.n) / blockdim[0])), 1\n        for i in range(10):\n            addmul_f64[griddim, blockdim, self.stream](\n                self.d_f64, self.d_f64, self.d_f64)\n        self.stream.synchronize()\n\ndef setup():\n    _jit_setup1()\n    _jit_setup2()\n\nclass Synthetic:\n    def setup(self):\n        self.no_op = cuda.jit(argtypes=())(no_op)\n        self.stream = cuda.stream()\n        self.f32 = np.zeros(self.n, dtype=np.float32)\n        self.d_f32 = cuda.to_device(self.f32, self.stream)\n        self.f64 = np.zeros(self.n, dtype=np.float64)\n        self.d_f64 = cuda.to_device(self.f64, self.stream)\n        self.sum_reduce = cuda.reduce(lambda x, y: x+y)\n        self.res_f32 = cuda.to_device(np.zeros(1, dtype=np.float32))\n        self.res_f64 = cuda.to_device(np.zeros(1, dtype=np.float64))\n        self.stream.synchronize()",
            "name": "bench_cuda.Synthetic.time_addmul_f64",
            "number": 0,
            "param_names": [],
            "params": [],
            "processes": 2,
            "repeat": 0,
            "sample_time": 0.1,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds",
            "version": "d40df27c87a924c27c65502e6f24001107ab6cac083e272405d436d5f1e4c4cb",
            "warmup_time": -1
        },
        "bench_cuda.Synthetic.time_reduce_f32": {
            "code": "class Synthetic:\n    def time_reduce_f32(self):\n        self.sum_reduce(self.d_f32, res=self.res_f32, stream=self.stream)\n        self.stream.synchronize()\n\ndef setup():\n    _jit_setup1()\n    _jit_setup2()\n\nclass Synthetic:\n    def setup(self):\n        self.no_op = cuda.jit(argtypes=())(no_op)\n        self.stream = cuda.stream()\n        self.f32 = np.zeros(self.n, dtype=np.float32)\n        self.d_f32 = cuda.to_device(self.f32, self.stream)\n        self.f64 = np.zeros(self.n, dtype=np.float64)\n        self.d_f64 = cuda.to_device(self.f64, self.stream)\n        self.sum_reduce = cuda.reduce(lambda x, y: x+y)\n        self.res_f32 = cuda.to_device(np.zeros(1, dtype=np.float32))\n        self.res_f64 = cuda.to_device(np.zeros(1, dtype=np.float64))\n        self.stream.synchronize()",
            "name": "bench_cuda.Synthetic.time_reduce_f32",
            "number": 0,
            "param_names": [],
            "params": [],
            "processes": 2,
            "repeat": 0,
            "sample_time": 0.1,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds",
            "version": "b52d9ff3d4bb96858a6cce2e71bdce2c5394c0326322f980d7d6d23d4516b8fe",
            "warmup_time": -1
        },
        "bench_cuda.Synthetic.time_reduce_f64": {
            "code": "class Synthetic:\n    def time_reduce_f64(self):\n        self.sum_reduce(self.d_f64, res=self.res_f64, stream=self.stream)\n        self.stream.synchronize()\n\ndef setup():\n    _jit_setup1()\n    _jit_setup2()\n\nclass Synthetic:\n    def setup(self):\n        self.no_op = cuda.jit(argtypes=())(no_op)\n        self.stream = cuda.stream()\n        self.f32 = np.zeros(self.n, dtype=np.float32)\n        self.d_f32 = cuda.to_device(self.f32, self.stream)\n        self.f64 = np.zeros(self.n, dtype=np.float64)\n        self.d_f64 = cuda.to_device(self.f64, self.stream)\n        self.sum_reduce = cuda.reduce(lambda x, y: x+y)\n        self.res_f32 = cuda.to_device(np.zeros(1, dtype=np.float32))\n        self.res_f64 = cuda.to_device(np.zeros(1, dtype=np.float64))\n        self.stream.synchronize()",
            "name": "bench_cuda.Synthetic.time_reduce_f64",
            "number": 0,
            "param_names": [],
            "params": [],
            "processes": 2,
            "repeat": 0,
            "sample_time": 0.1,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds",
            "version": "42c187dd3a477b110fae4e2210aecb9822d93705b2bb757cbf554ccd50a03532",
            "warmup_time": -1
        },
        "bench_cuda.Synthetic.time_run_empty_kernel": {
            "code": "class Synthetic:\n    def time_run_empty_kernel(self):\n        self.no_op[1, 1, self.stream]()\n        self.stream.synchronize()\n\ndef setup():\n    _jit_setup1()\n    _jit_setup2()\n\nclass Synthetic:\n    def setup(self):\n        self.no_op = cuda.jit(argtypes=())(no_op)\n        self.stream = cuda.stream()\n        self.f32 = np.zeros(self.n, dtype=np.float32)\n        self.d_f32 = cuda.to_device(self.f32, self.stream)\n        self.f64 = np.zeros(self.n, dtype=np.float64)\n        self.d_f64 = cuda.to_device(self.f64, self.stream)\n        self.sum_reduce = cuda.reduce(lambda x, y: x+y)\n        self.res_f32 = cuda.to_device(np.zeros(1, dtype=np.float32))\n        self.res_f64 = cuda.to_device(np.zeros(1, dtype=np.float64))\n        self.stream.synchronize()",
            "name": "bench_cuda.Synthetic.time_run_empty_kernel",
            "number": 0,
            "param_names": [],
            "params": [],
            "processes": 2,
            "repeat": 0,
            "sample_time": 0.1,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds",
            "version": "9831057d2f0c86594e2f83dfec1fac2da4310283a0b8f1618f9652c77673ac36",
            "warmup_time": -1
        },
        "bench_dispatch.NoPythonDispatch.time_dispatch_array_1d": {
            "code": "class <locals>:\n    def timefunc(self, arg=samples[name]):\n        func = binary\n        for i in range(1000):\n            func(arg, arg)\n\ndef setup():\n    \"\"\"\n    Precompile jitted functions.  This will register many specializations\n    to choose from.\n    \"\"\"\n    from numba import jit\n    global binary, binary_pyobj, unary_default\n\n    @jit(nopython=True)\n    def binary(x, y):\n        pass\n\n    @jit(forceobj=True)\n    def binary_pyobj(x, y):\n        pass\n\n    @jit(nopython=True)\n    def unary_default(x=None):\n        pass\n\n    for tp in samples.values():\n        binary(tp, tp)\n    binary_pyobj(object(), object())\n    unary_default()",
            "name": "bench_dispatch.NoPythonDispatch.time_dispatch_array_1d",
            "number": 0,
            "param_names": [],
            "params": [],
            "processes": 2,
            "repeat": 0,
            "sample_time": 0.1,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds",
            "version": "05707650b7675868c56d7bfe435123521dd8d4229819c38286c2148266dcbcc6",
            "warmup_time": -1
        },
        "bench_dispatch.NoPythonDispatch.time_dispatch_array_3d": {
            "code": "class <locals>:\n    def timefunc(self, arg=samples[name]):\n        func = binary\n        for i in range(1000):\n            func(arg, arg)\n\ndef setup():\n    \"\"\"\n    Precompile jitted functions.  This will register many specializations\n    to choose from.\n    \"\"\"\n    from numba import jit\n    global binary, binary_pyobj, unary_default\n\n    @jit(nopython=True)\n    def binary(x, y):\n        pass\n\n    @jit(forceobj=True)\n    def binary_pyobj(x, y):\n        pass\n\n    @jit(nopython=True)\n    def unary_default(x=None):\n        pass\n\n    for tp in samples.values():\n        binary(tp, tp)\n    binary_pyobj(object(), object())\n    unary_default()",
            "name": "bench_dispatch.NoPythonDispatch.time_dispatch_array_3d",
            "number": 0,
            "param_names": [],
            "params": [],
            "processes": 2,
            "repeat": 0,
            "sample_time": 0.1,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds",
            "version": "05707650b7675868c56d7bfe435123521dd8d4229819c38286c2148266dcbcc6",
            "warmup_time": -1
        },
        "bench_dispatch.NoPythonDispatch.time_dispatch_array_records": {
            "code": "class <locals>:\n    def timefunc(self, arg=samples[name]):\n        func = binary\n        for i in range(1000):\n            func(arg, arg)\n\ndef setup():\n    \"\"\"\n    Precompile jitted functions.  This will register many specializations\n    to choose from.\n    \"\"\"\n    from numba import jit\n    global binary, binary_pyobj, unary_default\n\n    @jit(nopython=True)\n    def binary(x, y):\n        pass\n\n    @jit(forceobj=True)\n    def binary_pyobj(x, y):\n        pass\n\n    @jit(nopython=True)\n    def unary_default(x=None):\n        pass\n\n    for tp in samples.values():\n        binary(tp, tp)\n    binary_pyobj(object(), object())\n    unary_default()",
            "name": "bench_dispatch.NoPythonDispatch.time_dispatch_array_records",
            "number": 0,
            "param_names": [],
            "params": [],
            "processes": 2,
            "repeat": 0,
            "sample_time": 0.1,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds",
            "version": "05707650b7675868c56d7bfe435123521dd8d4229819c38286c2148266dcbcc6",
            "warmup_time": -1
        },
        "bench_dispatch.NoPythonDispatch.time_dispatch_bool": {
            "code": "class <locals>:\n    def timefunc(self, arg=samples[name]):\n        func = binary\n        for i in range(1000):\n            func(arg, arg)\n\ndef setup():\n    \"\"\"\n    Precompile jitted functions.  This will register many specializations\n    to choose from.\n    \"\"\"\n    from numba import jit\n    global binary, binary_pyobj, unary_default\n\n    @jit(nopython=True)\n    def binary(x, y):\n        pass\n\n    @jit(forceobj=True)\n    def binary_pyobj(x, y):\n        pass\n\n    @jit(nopython=True)\n    def unary_default(x=None):\n        pass\n\n    for tp in samples.values():\n        binary(tp, tp)\n    binary_pyobj(object(), object())\n    unary_default()",
            "name": "bench_dispatch.NoPythonDispatch.time_dispatch_bool",
            "number": 0,
            "param_names": [],
            "params": [],
            "processes": 2,
            "repeat": 0,
            "sample_time": 0.1,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds",
            "version": "05707650b7675868c56d7bfe435123521dd8d4229819c38286c2148266dcbcc6",
            "warmup_time": -1
        },
        "bench_dispatch.NoPythonDispatch.time_dispatch_bytearray": {
            "code": "class <locals>:\n    def timefunc(self, arg=samples[name]):\n        func = binary\n        for i in range(1000):\n            func(arg, arg)\n\ndef setup():\n    \"\"\"\n    Precompile jitted functions.  This will register many specializations\n    to choose from.\n    \"\"\"\n    from numba import jit\n    global binary, binary_pyobj, unary_default\n\n    @jit(nopython=True)\n    def binary(x, y):\n        pass\n\n    @jit(forceobj=True)\n    def binary_pyobj(x, y):\n        pass\n\n    @jit(nopython=True)\n    def unary_default(x=None):\n        pass\n\n    for tp in samples.values():\n        binary(tp, tp)\n    binary_pyobj(object(), object())\n    unary_default()",
            "name": "bench_dispatch.NoPythonDispatch.time_dispatch_bytearray",
            "number": 0,
            "param_names": [],
            "params": [],
            "processes": 2,
            "repeat": 0,
            "sample_time": 0.1,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds",
            "version": "05707650b7675868c56d7bfe435123521dd8d4229819c38286c2148266dcbcc6",
            "warmup_time": -1
        },
        "bench_dispatch.NoPythonDispatch.time_dispatch_complex": {
            "code": "class <locals>:\n    def timefunc(self, arg=samples[name]):\n        func = binary\n        for i in range(1000):\n            func(arg, arg)\n\ndef setup():\n    \"\"\"\n    Precompile jitted functions.  This will register many specializations\n    to choose from.\n    \"\"\"\n    from numba import jit\n    global binary, binary_pyobj, unary_default\n\n    @jit(nopython=True)\n    def binary(x, y):\n        pass\n\n    @jit(forceobj=True)\n    def binary_pyobj(x, y):\n        pass\n\n    @jit(nopython=True)\n    def unary_default(x=None):\n        pass\n\n    for tp in samples.values():\n        binary(tp, tp)\n    binary_pyobj(object(), object())\n    unary_default()",
            "name": "bench_dispatch.NoPythonDispatch.time_dispatch_complex",
            "number": 0,
            "param_names": [],
            "params": [],
            "processes": 2,
            "repeat": 0,
            "sample_time": 0.1,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds",
            "version": "05707650b7675868c56d7bfe435123521dd8d4229819c38286c2148266dcbcc6",
            "warmup_time": -1
        },
        "bench_dispatch.NoPythonDispatch.time_dispatch_defaults": {
            "code": "class NoPythonDispatch:\n    def time_dispatch_defaults(self):\n        unary_default()\n\ndef setup():\n    \"\"\"\n    Precompile jitted functions.  This will register many specializations\n    to choose from.\n    \"\"\"\n    from numba import jit\n    global binary, binary_pyobj, unary_default\n\n    @jit(nopython=True)\n    def binary(x, y):\n        pass\n\n    @jit(forceobj=True)\n    def binary_pyobj(x, y):\n        pass\n\n    @jit(nopython=True)\n    def unary_default(x=None):\n        pass\n\n    for tp in samples.values():\n        binary(tp, tp)\n    binary_pyobj(object(), object())\n    unary_default()",
            "name": "bench_dispatch.NoPythonDispatch.time_dispatch_defaults",
            "number": 0,
            "param_names": [],
            "params": [],
            "processes": 2,
            "repeat": 0,
            "sample_time": 0.1,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds",
            "version": "9fba0101c9f7c382cb5cbac32232e3548aaea428b652d55f266d6600c4207842",
            "warmup_time": -1
        },
        "bench_dispatch.NoPythonDispatch.time_dispatch_float": {
            "code": "class <locals>:\n    def timefunc(self, arg=samples[name]):\n        func = binary\n        for i in range(1000):\n            func(arg, arg)\n\ndef setup():\n    \"\"\"\n    Precompile jitted functions.  This will register many specializations\n    to choose from.\n    \"\"\"\n    from numba import jit\n    global binary, binary_pyobj, unary_default\n\n    @jit(nopython=True)\n    def binary(x, y):\n        pass\n\n    @jit(forceobj=True)\n    def binary_pyobj(x, y):\n        pass\n\n    @jit(nopython=True)\n    def unary_default(x=None):\n        pass\n\n    for tp in samples.values():\n        binary(tp, tp)\n    binary_pyobj(object(), object())\n    unary_default()",
            "name": "bench_dispatch.NoPythonDispatch.time_dispatch_float",
            "number": 0,
            "param_names": [],
            "params": [],
            "processes": 2,
            "repeat": 0,
            "sample_time": 0.1,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds",
            "version": "05707650b7675868c56d7bfe435123521dd8d4229819c38286c2148266dcbcc6",
            "warmup_time": -1
        },
        "bench_dispatch.NoPythonDispatch.time_dispatch_int": {
            "code": "class <locals>:\n    def timefunc(self, arg=samples[name]):\n        func = binary\n        for i in range(1000):\n            func(arg, arg)\n\ndef setup():\n    \"\"\"\n    Precompile jitted functions.  This will register many specializations\n    to choose from.\n    \"\"\"\n    from numba import jit\n    global binary, binary_pyobj, unary_default\n\n    @jit(nopython=True)\n    def binary(x, y):\n        pass\n\n    @jit(forceobj=True)\n    def binary_pyobj(x, y):\n        pass\n\n    @jit(nopython=True)\n    def unary_default(x=None):\n        pass\n\n    for tp in samples.values():\n        binary(tp, tp)\n    binary_pyobj(object(), object())\n    unary_default()",
            "name": "bench_dispatch.NoPythonDispatch.time_dispatch_int",
            "number": 0,
            "param_names": [],
            "params": [],
            "processes": 2,
            "repeat": 0,
            "sample_time": 0.1,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds",
            "version": "05707650b7675868c56d7bfe435123521dd8d4229819c38286c2148266dcbcc6",
            "warmup_time": -1
        },
        "bench_dispatch.NoPythonDispatch.time_dispatch_recarray": {
            "code": "class <locals>:\n    def timefunc(self, arg=samples[name]):\n        func = binary\n        for i in range(1000):\n            func(arg, arg)\n\ndef setup():\n    \"\"\"\n    Precompile jitted functions.  This will register many specializations\n    to choose from.\n    \"\"\"\n    from numba import jit\n    global binary, binary_pyobj, unary_default\n\n    @jit(nopython=True)\n    def binary(x, y):\n        pass\n\n    @jit(forceobj=True)\n    def binary_pyobj(x, y):\n        pass\n\n    @jit(nopython=True)\n    def unary_default(x=None):\n        pass\n\n    for tp in samples.values():\n        binary(tp, tp)\n    binary_pyobj(object(), object())\n    unary_default()",
            "name": "bench_dispatch.NoPythonDispatch.time_dispatch_recarray",
            "number": 0,
            "param_names": [],
            "params": [],
            "processes": 2,
            "repeat": 0,
            "sample_time": 0.1,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds",
            "version": "05707650b7675868c56d7bfe435123521dd8d4229819c38286c2148266dcbcc6",
            "warmup_time": -1
        },
        "bench_dispatch.NoPythonDispatch.time_dispatch_record": {
            "code": "class <locals>:\n    def timefunc(self, arg=samples[name]):\n        func = binary\n        for i in range(1000):\n            func(arg, arg)\n\ndef setup():\n    \"\"\"\n    Precompile jitted functions.  This will register many specializations\n    to choose from.\n    \"\"\"\n    from numba import jit\n    global binary, binary_pyobj, unary_default\n\n    @jit(nopython=True)\n    def binary(x, y):\n        pass\n\n    @jit(forceobj=True)\n    def binary_pyobj(x, y):\n        pass\n\n    @jit(nopython=True)\n    def unary_default(x=None):\n        pass\n\n    for tp in samples.values():\n        binary(tp, tp)\n    binary_pyobj(object(), object())\n    unary_default()",
            "name": "bench_dispatch.NoPythonDispatch.time_dispatch_record",
            "number": 0,
            "param_names": [],
            "params": [],
            "processes": 2,
            "repeat": 0,
            "sample_time": 0.1,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds",
            "version": "05707650b7675868c56d7bfe435123521dd8d4229819c38286c2148266dcbcc6",
            "warmup_time": -1
        },
        "bench_dispatch.NoPythonDispatch.time_dispatch_tuple": {
            "code": "class <locals>:\n    def timefunc(self, arg=samples[name]):\n        func = binary\n        for i in range(1000):\n            func(arg, arg)\n\ndef setup():\n    \"\"\"\n    Precompile jitted functions.  This will register many specializations\n    to choose from.\n    \"\"\"\n    from numba import jit\n    global binary, binary_pyobj, unary_default\n\n    @jit(nopython=True)\n    def binary(x, y):\n        pass\n\n    @jit(forceobj=True)\n    def binary_pyobj(x, y):\n        pass\n\n    @jit(nopython=True)\n    def unary_default(x=None):\n        pass\n\n    for tp in samples.values():\n        binary(tp, tp)\n    binary_pyobj(object(), object())\n    unary_default()",
            "name": "bench_dispatch.NoPythonDispatch.time_dispatch_tuple",
            "number": 0,
            "param_names": [],
            "params": [],
            "processes": 2,
            "repeat": 0,
            "sample_time": 0.1,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds",
            "version": "05707650b7675868c56d7bfe435123521dd8d4229819c38286c2148266dcbcc6",
            "warmup_time": -1
        },
        "bench_dispatch.PyObjectDispatch.time_dispatch_pyobject": {
            "code": "class PyObjectDispatch:\n    def time_dispatch_pyobject(self):\n        x = object()\n        for i in range(1000):\n            binary_pyobj(x, x)\n\ndef setup():\n    \"\"\"\n    Precompile jitted functions.  This will register many specializations\n    to choose from.\n    \"\"\"\n    from numba import jit\n    global binary, binary_pyobj, unary_default\n\n    @jit(nopython=True)\n    def binary(x, y):\n        pass\n\n    @jit(forceobj=True)\n    def binary_pyobj(x, y):\n        pass\n\n    @jit(nopython=True)\n    def unary_default(x=None):\n        pass\n\n    for tp in samples.values():\n        binary(tp, tp)\n    binary_pyobj(object(), object())\n    unary_default()",
            "name": "bench_dispatch.PyObjectDispatch.time_dispatch_pyobject",
            "number": 0,
            "param_names": [],
            "params": [],
            "processes": 2,
            "repeat": 0,
            "sample_time": 0.1,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds",
            "version": "8ed3e0180ccac61c9469e83a2525e187d967a9478e9896941acb82d21a3adc72",
            "warmup_time": -1
        },
        "bench_gameoflife.GameOfLife.time_gameoflife": {
            "code": "class GameOfLife:\n    def time_gameoflife(self):\n        run_game(10)\n\ndef setup():\n    \"\"\"\n    Precompile jitted functions.\n    \"\"\"\n\n    from numba import jit\n\n    global wrap, increment_neighbors, numba_life_step\n\n\n    @jit(nopython=True)\n    def wrap(k, max_k):\n        if k == -1:\n            return max_k - 1\n        elif k == max_k:\n            return 0\n        else:\n            return k\n\n    @jit(nopython=True)\n    def increment_neighbors(i, j, neighbors):\n        ni, nj = neighbors.shape\n        for delta_i in (-1, 0, 1):\n            neighbor_i = wrap(i + delta_i, ni)\n            for delta_j in (-1, 0, 1):\n                if delta_i != 0 or delta_j != 0:\n                    neighbor_j = wrap(j + delta_j, nj)\n                    neighbors[neighbor_i, neighbor_j] += 1\n\n    @jit\n    def numba_life_step(X):\n        # Compute # of live neighbours per cell\n        neighbors = np.zeros_like(X, dtype=np.int8)\n        for i in range(X.shape[0]):\n            for j in range(X.shape[1]):\n                if X[i,j]:\n                    increment_neighbors(i, j, neighbors)\n        # Return next iteration of the game state\n        return (neighbors == 3) | (X & (neighbors == 2))\n\n    run_game(10)",
            "name": "bench_gameoflife.GameOfLife.time_gameoflife",
            "number": 0,
            "param_names": [],
            "params": [],
            "processes": 2,
            "repeat": 0,
            "sample_time": 0.1,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds",
            "version": "3a62cd617bff882688bdb0a603333b98170f24fc0fc77ea3f6d653aac46a72ee",
            "warmup_time": -1
        },
        "bench_ising.IsingModel.time_ising": {
            "code": "class IsingModel:\n    def time_ising(self):\n        x = x_start.copy()\n        for i in range(N_iterations):\n            update(x)\n\ndef setup():\n\n    from numba import jit\n\n    global _update, update\n\n    @jit(nopython=True)\n    def _update(x, i, j):\n        n, m = x.shape\n        dE = 2* x[i, j] * (\n                        x[(i-1)%n, (j-1)%m]\n                    + x[(i-1)%n,  j     ]\n                    + x[(i-1)%n, (j+1)%m]\n\n                    + x[ i     , (j-1)%m]\n                    + x[ i     , (j+1)%m]\n\n                    + x[(i+1)%n, (j-1)%m]\n                    + x[(i+1)%n,  j     ]\n                    + x[(i+1)%n, (j+1)%m]\n                    )\n        if dE <= 0 or exp(-dE / kT) > np.random.random():\n            x[i, j] *= -1\n\n    @jit(nopython=True)\n    def update(x):\n        n, m = x.shape\n\n        for i in range(n):\n            for j in range(0, m, 2):  # Even columns first to avoid overlap\n                _update(x, j, i)\n\n        for i in range(n):\n            for j in range(1, m, 2):  # Odd columns second to avoid overlap\n                _update(x, j, i)",
            "name": "bench_ising.IsingModel.time_ising",
            "number": 0,
            "param_names": [],
            "params": [],
            "processes": 2,
            "repeat": 0,
            "sample_time": 0.1,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds",
            "version": "72f6ae6e633558ee6af5118f6c3877e5b6979722eff230e381df38fcdb06be87",
            "warmup_time": -1
        },
        "bench_iterating.MonoArrayIterators.time_array_iter_1d": {
            "code": "class MonoArrayIterators:\n    def time_array_iter_1d(self):\n        array_iter_1d(arr1)\n\ndef setup():\n    from numba import jit\n\n\n    @jit(nopython=True)\n    def array_iter_1d(arr):\n        total = zero\n        for val in arr:\n            total += val\n        return total\n\n    @jit(nopython=True)\n    def flat_iter(arr):\n        total = zero\n        for val in arr.flat:\n            total += val\n        return total\n\n    @jit(nopython=True)\n    def flat_index(arr):\n        total = zero\n        flat = arr.flat\n        for i in range(arr.size):\n            total += flat[i]\n        return total\n\n    @jit(nopython=True)\n    def ndindex(arr):\n        total = zero\n        for ind in np.ndindex(arr.shape):\n            total += arr[ind]\n        return total\n\n    @jit(nopython=True)\n    def range1d(arr):\n        total = zero\n        n, = arr.shape\n        for i in range(n):\n            total += arr[i]\n        return total\n\n    @jit(nopython=True)\n    def range2d(arr):\n        total = zero\n        m, n = arr.shape\n        for i in range(m):\n            for j in range(n):\n                total += arr[i, j]\n        return total\n\n    @jit(nopython=True)\n    def nditer1(a):\n        total = zero\n        for u in np.nditer(a):\n            total += u.item()\n        return total\n\n    @jit(nopython=True)\n    def nditer2(a, b):\n        total = zero\n        for u, v in np.nditer((a, b)):\n            total += u.item() * v.item()\n        return total\n\n    @jit(nopython=True)\n    def nditer3(a, b, out):\n        total = zero\n        for u, v, res in np.nditer((a, b, out)):\n            res.itemset(u.item() * v.item())\n        return total\n\n    @jit(nopython=True)\n    def zip_iter(a, b):\n        total = zero\n        for u, v in zip(a, b):\n            total += u * v\n        return total\n\n    @jit(nopython=True)\n    def zip_flat(a, b):\n        total = zero\n        for u, v in zip(a.flat, b.flat):\n            total += u * v\n        return total\n\n    globals().update(locals())",
            "name": "bench_iterating.MonoArrayIterators.time_array_iter_1d",
            "number": 0,
            "param_names": [],
            "params": [],
            "processes": 2,
            "repeat": 0,
            "sample_time": 0.1,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds",
            "version": "57da53fe053d58fe885e45316cb6d7cacb759ae3a2ab7bff6fc60a3872f50ae5",
            "warmup_time": -1
        },
        "bench_iterating.MonoArrayIterators.time_flat_index_1d": {
            "code": "class MonoArrayIterators:\n    def time_flat_index_1d(self):\n        flat_index(arr1)\n\ndef setup():\n    from numba import jit\n\n\n    @jit(nopython=True)\n    def array_iter_1d(arr):\n        total = zero\n        for val in arr:\n            total += val\n        return total\n\n    @jit(nopython=True)\n    def flat_iter(arr):\n        total = zero\n        for val in arr.flat:\n            total += val\n        return total\n\n    @jit(nopython=True)\n    def flat_index(arr):\n        total = zero\n        flat = arr.flat\n        for i in range(arr.size):\n            total += flat[i]\n        return total\n\n    @jit(nopython=True)\n    def ndindex(arr):\n        total = zero\n        for ind in np.ndindex(arr.shape):\n            total += arr[ind]\n        return total\n\n    @jit(nopython=True)\n    def range1d(arr):\n        total = zero\n        n, = arr.shape\n        for i in range(n):\n            total += arr[i]\n        return total\n\n    @jit(nopython=True)\n    def range2d(arr):\n        total = zero\n        m, n = arr.shape\n        for i in range(m):\n            for j in range(n):\n                total += arr[i, j]\n        return total\n\n    @jit(nopython=True)\n    def nditer1(a):\n        total = zero\n        for u in np.nditer(a):\n            total += u.item()\n        return total\n\n    @jit(nopython=True)\n    def nditer2(a, b):\n        total = zero\n        for u, v in np.nditer((a, b)):\n            total += u.item() * v.item()\n        return total\n\n    @jit(nopython=True)\n    def nditer3(a, b, out):\n        total = zero\n        for u, v, res in np.nditer((a, b, out)):\n            res.itemset(u.item() * v.item())\n        return total\n\n    @jit(nopython=True)\n    def zip_iter(a, b):\n        total = zero\n        for u, v in zip(a, b):\n            total += u * v\n        return total\n\n    @jit(nopython=True)\n    def zip_flat(a, b):\n        total = zero\n        for u, v in zip(a.flat, b.flat):\n            total += u * v\n        return total\n\n    globals().update(locals())",
            "name": "bench_iterating.MonoArrayIterators.time_flat_index_1d",
            "number": 0,
            "param_names": [],
            "params": [],
            "processes": 2,
            "repeat": 0,
            "sample_time": 0.1,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds",
            "version": "b7f1d3a1d70fb1e55addabda8a1b9c7b7b38728f8ad1c84290eae97e394c1a8a",
            "warmup_time": -1
        },
        "bench_iterating.MonoArrayIterators.time_flat_index_2d_C": {
            "code": "class MonoArrayIterators:\n    def time_flat_index_2d_C(self):\n        flat_index(arr2c)\n\ndef setup():\n    from numba import jit\n\n\n    @jit(nopython=True)\n    def array_iter_1d(arr):\n        total = zero\n        for val in arr:\n            total += val\n        return total\n\n    @jit(nopython=True)\n    def flat_iter(arr):\n        total = zero\n        for val in arr.flat:\n            total += val\n        return total\n\n    @jit(nopython=True)\n    def flat_index(arr):\n        total = zero\n        flat = arr.flat\n        for i in range(arr.size):\n            total += flat[i]\n        return total\n\n    @jit(nopython=True)\n    def ndindex(arr):\n        total = zero\n        for ind in np.ndindex(arr.shape):\n            total += arr[ind]\n        return total\n\n    @jit(nopython=True)\n    def range1d(arr):\n        total = zero\n        n, = arr.shape\n        for i in range(n):\n            total += arr[i]\n        return total\n\n    @jit(nopython=True)\n    def range2d(arr):\n        total = zero\n        m, n = arr.shape\n        for i in range(m):\n            for j in range(n):\n                total += arr[i, j]\n        return total\n\n    @jit(nopython=True)\n    def nditer1(a):\n        total = zero\n        for u in np.nditer(a):\n            total += u.item()\n        return total\n\n    @jit(nopython=True)\n    def nditer2(a, b):\n        total = zero\n        for u, v in np.nditer((a, b)):\n            total += u.item() * v.item()\n        return total\n\n    @jit(nopython=True)\n    def nditer3(a, b, out):\n        total = zero\n        for u, v, res in np.nditer((a, b, out)):\n            res.itemset(u.item() * v.item())\n        return total\n\n    @jit(nopython=True)\n    def zip_iter(a, b):\n        total = zero\n        for u, v in zip(a, b):\n            total += u * v\n        return total\n\n    @jit(nopython=True)\n    def zip_flat(a, b):\n        total = zero\n        for u, v in zip(a.flat, b.flat):\n            total += u * v\n        return total\n\n    globals().update(locals())",
            "name": "bench_iterating.MonoArrayIterators.time_flat_index_2d_C",
            "number": 0,
            "param_names": [],
            "params": [],
            "processes": 2,
            "repeat": 0,
            "sample_time": 0.1,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds",
            "version": "54bf4a92f4608ef149d73c7bb8ebdc927ef4c5aaa5bc54bc6bf52c44cec7c734",
            "warmup_time": -1
        },
        "bench_iterating.MonoArrayIterators.time_flat_index_2d_fortran": {
            "code": "class MonoArrayIterators:\n    def time_flat_index_2d_fortran(self):\n        flat_index(arr2f)\n\ndef setup():\n    from numba import jit\n\n\n    @jit(nopython=True)\n    def array_iter_1d(arr):\n        total = zero\n        for val in arr:\n            total += val\n        return total\n\n    @jit(nopython=True)\n    def flat_iter(arr):\n        total = zero\n        for val in arr.flat:\n            total += val\n        return total\n\n    @jit(nopython=True)\n    def flat_index(arr):\n        total = zero\n        flat = arr.flat\n        for i in range(arr.size):\n            total += flat[i]\n        return total\n\n    @jit(nopython=True)\n    def ndindex(arr):\n        total = zero\n        for ind in np.ndindex(arr.shape):\n            total += arr[ind]\n        return total\n\n    @jit(nopython=True)\n    def range1d(arr):\n        total = zero\n        n, = arr.shape\n        for i in range(n):\n            total += arr[i]\n        return total\n\n    @jit(nopython=True)\n    def range2d(arr):\n        total = zero\n        m, n = arr.shape\n        for i in range(m):\n            for j in range(n):\n                total += arr[i, j]\n        return total\n\n    @jit(nopython=True)\n    def nditer1(a):\n        total = zero\n        for u in np.nditer(a):\n            total += u.item()\n        return total\n\n    @jit(nopython=True)\n    def nditer2(a, b):\n        total = zero\n        for u, v in np.nditer((a, b)):\n            total += u.item() * v.item()\n        return total\n\n    @jit(nopython=True)\n    def nditer3(a, b, out):\n        total = zero\n        for u, v, res in np.nditer((a, b, out)):\n            res.itemset(u.item() * v.item())\n        return total\n\n    @jit(nopython=True)\n    def zip_iter(a, b):\n        total = zero\n        for u, v in zip(a, b):\n            total += u * v\n        return total\n\n    @jit(nopython=True)\n    def zip_flat(a, b):\n        total = zero\n        for u, v in zip(a.flat, b.flat):\n            total += u * v\n        return total\n\n    globals().update(locals())",
            "name": "bench_iterating.MonoArrayIterators.time_flat_index_2d_fortran",
            "number": 0,
            "param_names": [],
            "params": [],
            "processes": 2,
            "repeat": 0,
            "sample_time": 0.1,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds",
            "version": "5e91cfec080ae7169f5c9ee5c35f728e43d56c1b8aa65fe6698200c4199a0e09",
            "warmup_time": -1
        },
        "bench_iterating.MonoArrayIterators.time_flat_index_2d_non_contiguous": {
            "code": "class MonoArrayIterators:\n    def time_flat_index_2d_non_contiguous(self):\n        flat_index(arr2a)\n\ndef setup():\n    from numba import jit\n\n\n    @jit(nopython=True)\n    def array_iter_1d(arr):\n        total = zero\n        for val in arr:\n            total += val\n        return total\n\n    @jit(nopython=True)\n    def flat_iter(arr):\n        total = zero\n        for val in arr.flat:\n            total += val\n        return total\n\n    @jit(nopython=True)\n    def flat_index(arr):\n        total = zero\n        flat = arr.flat\n        for i in range(arr.size):\n            total += flat[i]\n        return total\n\n    @jit(nopython=True)\n    def ndindex(arr):\n        total = zero\n        for ind in np.ndindex(arr.shape):\n            total += arr[ind]\n        return total\n\n    @jit(nopython=True)\n    def range1d(arr):\n        total = zero\n        n, = arr.shape\n        for i in range(n):\n            total += arr[i]\n        return total\n\n    @jit(nopython=True)\n    def range2d(arr):\n        total = zero\n        m, n = arr.shape\n        for i in range(m):\n            for j in range(n):\n                total += arr[i, j]\n        return total\n\n    @jit(nopython=True)\n    def nditer1(a):\n        total = zero\n        for u in np.nditer(a):\n            total += u.item()\n        return total\n\n    @jit(nopython=True)\n    def nditer2(a, b):\n        total = zero\n        for u, v in np.nditer((a, b)):\n            total += u.item() * v.item()\n        return total\n\n    @jit(nopython=True)\n    def nditer3(a, b, out):\n        total = zero\n        for u, v, res in np.nditer((a, b, out)):\n            res.itemset(u.item() * v.item())\n        return total\n\n    @jit(nopython=True)\n    def zip_iter(a, b):\n        total = zero\n        for u, v in zip(a, b):\n            total += u * v\n        return total\n\n    @jit(nopython=True)\n    def zip_flat(a, b):\n        total = zero\n        for u, v in zip(a.flat, b.flat):\n            total += u * v\n        return total\n\n    globals().update(locals())",
            "name": "bench_iterating.MonoArrayIterators.time_flat_index_2d_non_contiguous",
            "number": 0,
            "param_names": [],
            "params": [],
            "processes": 2,
            "repeat": 0,
            "sample_time": 0.1,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds",
            "version": "2cf244735c42fe17473d3c82052219e4f46a79fe4258363be73771f73245378f",
            "warmup_time": -1
        },
        "bench_iterating.MonoArrayIterators.time_flat_iter_1d": {
            "code": "class MonoArrayIterators:\n    def time_flat_iter_1d(self):\n        flat_iter(arr1)\n\ndef setup():\n    from numba import jit\n\n\n    @jit(nopython=True)\n    def array_iter_1d(arr):\n        total = zero\n        for val in arr:\n            total += val\n        return total\n\n    @jit(nopython=True)\n    def flat_iter(arr):\n        total = zero\n        for val in arr.flat:\n            total += val\n        return total\n\n    @jit(nopython=True)\n    def flat_index(arr):\n        total = zero\n        flat = arr.flat\n        for i in range(arr.size):\n            total += flat[i]\n        return total\n\n    @jit(nopython=True)\n    def ndindex(arr):\n        total = zero\n        for ind in np.ndindex(arr.shape):\n            total += arr[ind]\n        return total\n\n    @jit(nopython=True)\n    def range1d(arr):\n        total = zero\n        n, = arr.shape\n        for i in range(n):\n            total += arr[i]\n        return total\n\n    @jit(nopython=True)\n    def range2d(arr):\n        total = zero\n        m, n = arr.shape\n        for i in range(m):\n            for j in range(n):\n                total += arr[i, j]\n        return total\n\n    @jit(nopython=True)\n    def nditer1(a):\n        total = zero\n        for u in np.nditer(a):\n            total += u.item()\n        return total\n\n    @jit(nopython=True)\n    def nditer2(a, b):\n        total = zero\n        for u, v in np.nditer((a, b)):\n            total += u.item() * v.item()\n        return total\n\n    @jit(nopython=True)\n    def nditer3(a, b, out):\n        total = zero\n        for u, v, res in np.nditer((a, b, out)):\n            res.itemset(u.item() * v.item())\n        return total\n\n    @jit(nopython=True)\n    def zip_iter(a, b):\n        total = zero\n        for u, v in zip(a, b):\n            total += u * v\n        return total\n\n    @jit(nopython=True)\n    def zip_flat(a, b):\n        total = zero\n        for u, v in zip(a.flat, b.flat):\n            total += u * v\n        return total\n\n    globals().update(locals())",
            "name": "bench_iterating.MonoArrayIterators.time_flat_iter_1d",
            "number": 0,
            "param_names": [],
            "params": [],
            "processes": 2,
            "repeat": 0,
            "sample_time": 0.1,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds",
            "version": "8337e998541e2b10c16e119da431671bcd4804e27c6f54b41a8c4f232db83bf7",
            "warmup_time": -1
        },
        "bench_iterating.MonoArrayIterators.time_flat_iter_2d_C": {
            "code": "class MonoArrayIterators:\n    def time_flat_iter_2d_C(self):\n        flat_iter(arr2c)\n\ndef setup():\n    from numba import jit\n\n\n    @jit(nopython=True)\n    def array_iter_1d(arr):\n        total = zero\n        for val in arr:\n            total += val\n        return total\n\n    @jit(nopython=True)\n    def flat_iter(arr):\n        total = zero\n        for val in arr.flat:\n            total += val\n        return total\n\n    @jit(nopython=True)\n    def flat_index(arr):\n        total = zero\n        flat = arr.flat\n        for i in range(arr.size):\n            total += flat[i]\n        return total\n\n    @jit(nopython=True)\n    def ndindex(arr):\n        total = zero\n        for ind in np.ndindex(arr.shape):\n            total += arr[ind]\n        return total\n\n    @jit(nopython=True)\n    def range1d(arr):\n        total = zero\n        n, = arr.shape\n        for i in range(n):\n            total += arr[i]\n        return total\n\n    @jit(nopython=True)\n    def range2d(arr):\n        total = zero\n        m, n = arr.shape\n        for i in range(m):\n            for j in range(n):\n                total += arr[i, j]\n        return total\n\n    @jit(nopython=True)\n    def nditer1(a):\n        total = zero\n        for u in np.nditer(a):\n            total += u.item()\n        return total\n\n    @jit(nopython=True)\n    def nditer2(a, b):\n        total = zero\n        for u, v in np.nditer((a, b)):\n            total += u.item() * v.item()\n        return total\n\n    @jit(nopython=True)\n    def nditer3(a, b, out):\n        total = zero\n        for u, v, res in np.nditer((a, b, out)):\n            res.itemset(u.item() * v.item())\n        return total\n\n    @jit(nopython=True)\n    def zip_iter(a, b):\n        total = zero\n        for u, v in zip(a, b):\n            total += u * v\n        return total\n\n    @jit(nopython=True)\n    def zip_flat(a, b):\n        total = zero\n        for u, v in zip(a.flat, b.flat):\n            total += u * v\n        return total\n\n    globals().update(locals())",
            "name": "bench_iterating.MonoArrayIterators.time_flat_iter_2d_C",
            "number": 0,
            "param_names": [],
            "params": [],
            "processes": 2,
            "repeat": 0,
            "sample_time": 0.1,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds",
            "version": "06e96407434bd4f3fd579dc94a6fd87187327702b9d4809b2b15cba0cbeeeb38",
            "warmup_time": -1
        },
        "bench_iterating.MonoArrayIterators.time_flat_iter_2d_fortran": {
            "code": "class MonoArrayIterators:\n    def time_flat_iter_2d_fortran(self):\n        flat_iter(arr2f)\n\ndef setup():\n    from numba import jit\n\n\n    @jit(nopython=True)\n    def array_iter_1d(arr):\n        total = zero\n        for val in arr:\n            total += val\n        return total\n\n    @jit(nopython=True)\n    def flat_iter(arr):\n        total = zero\n        for val in arr.flat:\n            total += val\n        return total\n\n    @jit(nopython=True)\n    def flat_index(arr):\n        total = zero\n        flat = arr.flat\n        for i in range(arr.size):\n            total += flat[i]\n        return total\n\n    @jit(nopython=True)\n    def ndindex(arr):\n        total = zero\n        for ind in np.ndindex(arr.shape):\n            total += arr[ind]\n        return total\n\n    @jit(nopython=True)\n    def range1d(arr):\n        total = zero\n        n, = arr.shape\n        for i in range(n):\n            total += arr[i]\n        return total\n\n    @jit(nopython=True)\n    def range2d(arr):\n        total = zero\n        m, n = arr.shape\n        for i in range(m):\n            for j in range(n):\n                total += arr[i, j]\n        return total\n\n    @jit(nopython=True)\n    def nditer1(a):\n        total = zero\n        for u in np.nditer(a):\n            total += u.item()\n        return total\n\n    @jit(nopython=True)\n    def nditer2(a, b):\n        total = zero\n        for u, v in np.nditer((a, b)):\n            total += u.item() * v.item()\n        return total\n\n    @jit(nopython=True)\n    def nditer3(a, b, out):\n        total = zero\n        for u, v, res in np.nditer((a, b, out)):\n            res.itemset(u.item() * v.item())\n        return total\n\n    @jit(nopython=True)\n    def zip_iter(a, b):\n        total = zero\n        for u, v in zip(a, b):\n            total += u * v\n        return total\n\n    @jit(nopython=True)\n    def zip_flat(a, b):\n        total = zero\n        for u, v in zip(a.flat, b.flat):\n            total += u * v\n        return total\n\n    globals().update(locals())",
            "name": "bench_iterating.MonoArrayIterators.time_flat_iter_2d_fortran",
            "number": 0,
            "param_names": [],
            "params": [],
            "processes": 2,
            "repeat": 0,
            "sample_time": 0.1,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds",
            "version": "38ac6b00833d808327fc6d569f3ac3adab20c02afa5cd4619221e014524e382e",
            "warmup_time": -1
        },
        "bench_iterating.MonoArrayIterators.time_flat_iter_2d_non_contiguous": {
            "code": "class MonoArrayIterators:\n    def time_flat_iter_2d_non_contiguous(self):\n        flat_iter(arr2a)\n\ndef setup():\n    from numba import jit\n\n\n    @jit(nopython=True)\n    def array_iter_1d(arr):\n        total = zero\n        for val in arr:\n            total += val\n        return total\n\n    @jit(nopython=True)\n    def flat_iter(arr):\n        total = zero\n        for val in arr.flat:\n            total += val\n        return total\n\n    @jit(nopython=True)\n    def flat_index(arr):\n        total = zero\n        flat = arr.flat\n        for i in range(arr.size):\n            total += flat[i]\n        return total\n\n    @jit(nopython=True)\n    def ndindex(arr):\n        total = zero\n        for ind in np.ndindex(arr.shape):\n            total += arr[ind]\n        return total\n\n    @jit(nopython=True)\n    def range1d(arr):\n        total = zero\n        n, = arr.shape\n        for i in range(n):\n            total += arr[i]\n        return total\n\n    @jit(nopython=True)\n    def range2d(arr):\n        total = zero\n        m, n = arr.shape\n        for i in range(m):\n            for j in range(n):\n                total += arr[i, j]\n        return total\n\n    @jit(nopython=True)\n    def nditer1(a):\n        total = zero\n        for u in np.nditer(a):\n            total += u.item()\n        return total\n\n    @jit(nopython=True)\n    def nditer2(a, b):\n        total = zero\n        for u, v in np.nditer((a, b)):\n            total += u.item() * v.item()\n        return total\n\n    @jit(nopython=True)\n    def nditer3(a, b, out):\n        total = zero\n        for u, v, res in np.nditer((a, b, out)):\n            res.itemset(u.item() * v.item())\n        return total\n\n    @jit(nopython=True)\n    def zip_iter(a, b):\n        total = zero\n        for u, v in zip(a, b):\n            total += u * v\n        return total\n\n    @jit(nopython=True)\n    def zip_flat(a, b):\n        total = zero\n        for u, v in zip(a.flat, b.flat):\n            total += u * v\n        return total\n\n    globals().update(locals())",
            "name": "bench_iterating.MonoArrayIterators.time_flat_iter_2d_non_contiguous",
            "number": 0,
            "param_names": [],
            "params": [],
            "processes": 2,
            "repeat": 0,
            "sample_time": 0.1,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds",
            "version": "7c602cc257568b80d8d1f65f1548b5d2681839adbc8847a83d1150a839ec44a5",
            "warmup_time": -1
        },
        "bench_iterating.MonoArrayIterators.time_ndindex_1d": {
            "code": "class MonoArrayIterators:\n    def time_ndindex_1d(self):\n        ndindex(arr1)\n\ndef setup():\n    from numba import jit\n\n\n    @jit(nopython=True)\n    def array_iter_1d(arr):\n        total = zero\n        for val in arr:\n            total += val\n        return total\n\n    @jit(nopython=True)\n    def flat_iter(arr):\n        total = zero\n        for val in arr.flat:\n            total += val\n        return total\n\n    @jit(nopython=True)\n    def flat_index(arr):\n        total = zero\n        flat = arr.flat\n        for i in range(arr.size):\n            total += flat[i]\n        return total\n\n    @jit(nopython=True)\n    def ndindex(arr):\n        total = zero\n        for ind in np.ndindex(arr.shape):\n            total += arr[ind]\n        return total\n\n    @jit(nopython=True)\n    def range1d(arr):\n        total = zero\n        n, = arr.shape\n        for i in range(n):\n            total += arr[i]\n        return total\n\n    @jit(nopython=True)\n    def range2d(arr):\n        total = zero\n        m, n = arr.shape\n        for i in range(m):\n            for j in range(n):\n                total += arr[i, j]\n        return total\n\n    @jit(nopython=True)\n    def nditer1(a):\n        total = zero\n        for u in np.nditer(a):\n            total += u.item()\n        return total\n\n    @jit(nopython=True)\n    def nditer2(a, b):\n        total = zero\n        for u, v in np.nditer((a, b)):\n            total += u.item() * v.item()\n        return total\n\n    @jit(nopython=True)\n    def nditer3(a, b, out):\n        total = zero\n        for u, v, res in np.nditer((a, b, out)):\n            res.itemset(u.item() * v.item())\n        return total\n\n    @jit(nopython=True)\n    def zip_iter(a, b):\n        total = zero\n        for u, v in zip(a, b):\n            total += u * v\n        return total\n\n    @jit(nopython=True)\n    def zip_flat(a, b):\n        total = zero\n        for u, v in zip(a.flat, b.flat):\n            total += u * v\n        return total\n\n    globals().update(locals())",
            "name": "bench_iterating.MonoArrayIterators.time_ndindex_1d",
            "number": 0,
            "param_names": [],
            "params": [],
            "processes": 2,
            "repeat": 0,
            "sample_time": 0.1,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds",
            "version": "b2ae77fc8cd6358c0dfc04beec2e3c8d022b0e1b9902a321ca2c079935611569",
            "warmup_time": -1
        },
        "bench_iterating.MonoArrayIterators.time_ndindex_2d": {
            "code": "class MonoArrayIterators:\n    def time_ndindex_2d(self):\n        ndindex(arr2c)\n\ndef setup():\n    from numba import jit\n\n\n    @jit(nopython=True)\n    def array_iter_1d(arr):\n        total = zero\n        for val in arr:\n            total += val\n        return total\n\n    @jit(nopython=True)\n    def flat_iter(arr):\n        total = zero\n        for val in arr.flat:\n            total += val\n        return total\n\n    @jit(nopython=True)\n    def flat_index(arr):\n        total = zero\n        flat = arr.flat\n        for i in range(arr.size):\n            total += flat[i]\n        return total\n\n    @jit(nopython=True)\n    def ndindex(arr):\n        total = zero\n        for ind in np.ndindex(arr.shape):\n            total += arr[ind]\n        return total\n\n    @jit(nopython=True)\n    def range1d(arr):\n        total = zero\n        n, = arr.shape\n        for i in range(n):\n            total += arr[i]\n        return total\n\n    @jit(nopython=True)\n    def range2d(arr):\n        total = zero\n        m, n = arr.shape\n        for i in range(m):\n            for j in range(n):\n                total += arr[i, j]\n        return total\n\n    @jit(nopython=True)\n    def nditer1(a):\n        total = zero\n        for u in np.nditer(a):\n            total += u.item()\n        return total\n\n    @jit(nopython=True)\n    def nditer2(a, b):\n        total = zero\n        for u, v in np.nditer((a, b)):\n            total += u.item() * v.item()\n        return total\n\n    @jit(nopython=True)\n    def nditer3(a, b, out):\n        total = zero\n        for u, v, res in np.nditer((a, b, out)):\n            res.itemset(u.item() * v.item())\n        return total\n\n    @jit(nopython=True)\n    def zip_iter(a, b):\n        total = zero\n        for u, v in zip(a, b):\n            total += u * v\n        return total\n\n    @jit(nopython=True)\n    def zip_flat(a, b):\n        total = zero\n        for u, v in zip(a.flat, b.flat):\n            total += u * v\n        return total\n\n    globals().update(locals())",
            "name": "bench_iterating.MonoArrayIterators.time_ndindex_2d",
            "number": 0,
            "param_names": [],
            "params": [],
            "processes": 2,
            "repeat": 0,
            "sample_time": 0.1,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds",
            "version": "d9b8205974d4155aee3e3805ae90cdfd23d4b04a32dd159d3cba73e35e2cb7b9",
            "warmup_time": -1
        },
        "bench_iterating.MonoArrayIterators.time_nditer_iter_1d": {
            "code": "class MonoArrayIterators:\n    def time_nditer_iter_1d(self):\n        nditer1(arr1)\n\ndef setup():\n    from numba import jit\n\n\n    @jit(nopython=True)\n    def array_iter_1d(arr):\n        total = zero\n        for val in arr:\n            total += val\n        return total\n\n    @jit(nopython=True)\n    def flat_iter(arr):\n        total = zero\n        for val in arr.flat:\n            total += val\n        return total\n\n    @jit(nopython=True)\n    def flat_index(arr):\n        total = zero\n        flat = arr.flat\n        for i in range(arr.size):\n            total += flat[i]\n        return total\n\n    @jit(nopython=True)\n    def ndindex(arr):\n        total = zero\n        for ind in np.ndindex(arr.shape):\n            total += arr[ind]\n        return total\n\n    @jit(nopython=True)\n    def range1d(arr):\n        total = zero\n        n, = arr.shape\n        for i in range(n):\n            total += arr[i]\n        return total\n\n    @jit(nopython=True)\n    def range2d(arr):\n        total = zero\n        m, n = arr.shape\n        for i in range(m):\n            for j in range(n):\n                total += arr[i, j]\n        return total\n\n    @jit(nopython=True)\n    def nditer1(a):\n        total = zero\n        for u in np.nditer(a):\n            total += u.item()\n        return total\n\n    @jit(nopython=True)\n    def nditer2(a, b):\n        total = zero\n        for u, v in np.nditer((a, b)):\n            total += u.item() * v.item()\n        return total\n\n    @jit(nopython=True)\n    def nditer3(a, b, out):\n        total = zero\n        for u, v, res in np.nditer((a, b, out)):\n            res.itemset(u.item() * v.item())\n        return total\n\n    @jit(nopython=True)\n    def zip_iter(a, b):\n        total = zero\n        for u, v in zip(a, b):\n            total += u * v\n        return total\n\n    @jit(nopython=True)\n    def zip_flat(a, b):\n        total = zero\n        for u, v in zip(a.flat, b.flat):\n            total += u * v\n        return total\n\n    globals().update(locals())",
            "name": "bench_iterating.MonoArrayIterators.time_nditer_iter_1d",
            "number": 0,
            "param_names": [],
            "params": [],
            "processes": 2,
            "repeat": 0,
            "sample_time": 0.1,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds",
            "version": "259812336d8205b39158019bb9319313d854044173fb3526d6323e4ebb8ed1ba",
            "warmup_time": -1
        },
        "bench_iterating.MonoArrayIterators.time_nditer_iter_2d_C": {
            "code": "class MonoArrayIterators:\n    def time_nditer_iter_2d_C(self):\n        nditer1(arr2c)\n\ndef setup():\n    from numba import jit\n\n\n    @jit(nopython=True)\n    def array_iter_1d(arr):\n        total = zero\n        for val in arr:\n            total += val\n        return total\n\n    @jit(nopython=True)\n    def flat_iter(arr):\n        total = zero\n        for val in arr.flat:\n            total += val\n        return total\n\n    @jit(nopython=True)\n    def flat_index(arr):\n        total = zero\n        flat = arr.flat\n        for i in range(arr.size):\n            total += flat[i]\n        return total\n\n    @jit(nopython=True)\n    def ndindex(arr):\n        total = zero\n        for ind in np.ndindex(arr.shape):\n            total += arr[ind]\n        return total\n\n    @jit(nopython=True)\n    def range1d(arr):\n        total = zero\n        n, = arr.shape\n        for i in range(n):\n            total += arr[i]\n        return total\n\n    @jit(nopython=True)\n    def range2d(arr):\n        total = zero\n        m, n = arr.shape\n        for i in range(m):\n            for j in range(n):\n                total += arr[i, j]\n        return total\n\n    @jit(nopython=True)\n    def nditer1(a):\n        total = zero\n        for u in np.nditer(a):\n            total += u.item()\n        return total\n\n    @jit(nopython=True)\n    def nditer2(a, b):\n        total = zero\n        for u, v in np.nditer((a, b)):\n            total += u.item() * v.item()\n        return total\n\n    @jit(nopython=True)\n    def nditer3(a, b, out):\n        total = zero\n        for u, v, res in np.nditer((a, b, out)):\n            res.itemset(u.item() * v.item())\n        return total\n\n    @jit(nopython=True)\n    def zip_iter(a, b):\n        total = zero\n        for u, v in zip(a, b):\n            total += u * v\n        return total\n\n    @jit(nopython=True)\n    def zip_flat(a, b):\n        total = zero\n        for u, v in zip(a.flat, b.flat):\n            total += u * v\n        return total\n\n    globals().update(locals())",
            "name": "bench_iterating.MonoArrayIterators.time_nditer_iter_2d_C",
            "number": 0,
            "param_names": [],
            "params": [],
            "processes": 2,
            "repeat": 0,
            "sample_time": 0.1,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds",
            "version": "d65c58298e884c062baa6dd8e43e5ad3a9e1549d734b653b45bc0de93bf5bf4b",
            "warmup_time": -1
        },
        "bench_iterating.MonoArrayIterators.time_nditer_iter_2d_C_small_inner_dim": {
            "code": "class MonoArrayIterators:\n    def time_nditer_iter_2d_C_small_inner_dim(self):\n        nditer1(arr2c2)\n\ndef setup():\n    from numba import jit\n\n\n    @jit(nopython=True)\n    def array_iter_1d(arr):\n        total = zero\n        for val in arr:\n            total += val\n        return total\n\n    @jit(nopython=True)\n    def flat_iter(arr):\n        total = zero\n        for val in arr.flat:\n            total += val\n        return total\n\n    @jit(nopython=True)\n    def flat_index(arr):\n        total = zero\n        flat = arr.flat\n        for i in range(arr.size):\n            total += flat[i]\n        return total\n\n    @jit(nopython=True)\n    def ndindex(arr):\n        total = zero\n        for ind in np.ndindex(arr.shape):\n            total += arr[ind]\n        return total\n\n    @jit(nopython=True)\n    def range1d(arr):\n        total = zero\n        n, = arr.shape\n        for i in range(n):\n            total += arr[i]\n        return total\n\n    @jit(nopython=True)\n    def range2d(arr):\n        total = zero\n        m, n = arr.shape\n        for i in range(m):\n            for j in range(n):\n                total += arr[i, j]\n        return total\n\n    @jit(nopython=True)\n    def nditer1(a):\n        total = zero\n        for u in np.nditer(a):\n            total += u.item()\n        return total\n\n    @jit(nopython=True)\n    def nditer2(a, b):\n        total = zero\n        for u, v in np.nditer((a, b)):\n            total += u.item() * v.item()\n        return total\n\n    @jit(nopython=True)\n    def nditer3(a, b, out):\n        total = zero\n        for u, v, res in np.nditer((a, b, out)):\n            res.itemset(u.item() * v.item())\n        return total\n\n    @jit(nopython=True)\n    def zip_iter(a, b):\n        total = zero\n        for u, v in zip(a, b):\n            total += u * v\n        return total\n\n    @jit(nopython=True)\n    def zip_flat(a, b):\n        total = zero\n        for u, v in zip(a.flat, b.flat):\n            total += u * v\n        return total\n\n    globals().update(locals())",
            "name": "bench_iterating.MonoArrayIterators.time_nditer_iter_2d_C_small_inner_dim",
            "number": 0,
            "param_names": [],
            "params": [],
            "processes": 2,
            "repeat": 0,
            "sample_time": 0.1,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds",
            "version": "dd15d3f06446b7d69d6837ec3c86f48997f0ff7223aea7bb7c17178dfdd4e5e9",
            "warmup_time": -1
        },
        "bench_iterating.MonoArrayIterators.time_nditer_iter_2d_fortran": {
            "code": "class MonoArrayIterators:\n    def time_nditer_iter_2d_fortran(self):\n        nditer1(arr2f)\n\ndef setup():\n    from numba import jit\n\n\n    @jit(nopython=True)\n    def array_iter_1d(arr):\n        total = zero\n        for val in arr:\n            total += val\n        return total\n\n    @jit(nopython=True)\n    def flat_iter(arr):\n        total = zero\n        for val in arr.flat:\n            total += val\n        return total\n\n    @jit(nopython=True)\n    def flat_index(arr):\n        total = zero\n        flat = arr.flat\n        for i in range(arr.size):\n            total += flat[i]\n        return total\n\n    @jit(nopython=True)\n    def ndindex(arr):\n        total = zero\n        for ind in np.ndindex(arr.shape):\n            total += arr[ind]\n        return total\n\n    @jit(nopython=True)\n    def range1d(arr):\n        total = zero\n        n, = arr.shape\n        for i in range(n):\n            total += arr[i]\n        return total\n\n    @jit(nopython=True)\n    def range2d(arr):\n        total = zero\n        m, n = arr.shape\n        for i in range(m):\n            for j in range(n):\n                total += arr[i, j]\n        return total\n\n    @jit(nopython=True)\n    def nditer1(a):\n        total = zero\n        for u in np.nditer(a):\n            total += u.item()\n        return total\n\n    @jit(nopython=True)\n    def nditer2(a, b):\n        total = zero\n        for u, v in np.nditer((a, b)):\n            total += u.item() * v.item()\n        return total\n\n    @jit(nopython=True)\n    def nditer3(a, b, out):\n        total = zero\n        for u, v, res in np.nditer((a, b, out)):\n            res.itemset(u.item() * v.item())\n        return total\n\n    @jit(nopython=True)\n    def zip_iter(a, b):\n        total = zero\n        for u, v in zip(a, b):\n            total += u * v\n        return total\n\n    @jit(nopython=True)\n    def zip_flat(a, b):\n        total = zero\n        for u, v in zip(a.flat, b.flat):\n            total += u * v\n        return total\n\n    globals().update(locals())",
            "name": "bench_iterating.MonoArrayIterators.time_nditer_iter_2d_fortran",
            "number": 0,
            "param_names": [],
            "params": [],
            "processes": 2,
            "repeat": 0,
            "sample_time": 0.1,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds",
            "version": "0c1fb4d1bf42c972132d876a3d5acdcb2494c11cb8b02db86a9011b2704ba215",
            "warmup_time": -1
        },
        "bench_iterating.MonoArrayIterators.time_nditer_iter_2d_non_contiguous": {
            "code": "class MonoArrayIterators:\n    def time_nditer_iter_2d_non_contiguous(self):\n        nditer1(arr2a)\n\ndef setup():\n    from numba import jit\n\n\n    @jit(nopython=True)\n    def array_iter_1d(arr):\n        total = zero\n        for val in arr:\n            total += val\n        return total\n\n    @jit(nopython=True)\n    def flat_iter(arr):\n        total = zero\n        for val in arr.flat:\n            total += val\n        return total\n\n    @jit(nopython=True)\n    def flat_index(arr):\n        total = zero\n        flat = arr.flat\n        for i in range(arr.size):\n            total += flat[i]\n        return total\n\n    @jit(nopython=True)\n    def ndindex(arr):\n        total = zero\n        for ind in np.ndindex(arr.shape):\n            total += arr[ind]\n        return total\n\n    @jit(nopython=True)\n    def range1d(arr):\n        total = zero\n        n, = arr.shape\n        for i in range(n):\n            total += arr[i]\n        return total\n\n    @jit(nopython=True)\n    def range2d(arr):\n        total = zero\n        m, n = arr.shape\n        for i in range(m):\n            for j in range(n):\n                total += arr[i, j]\n        return total\n\n    @jit(nopython=True)\n    def nditer1(a):\n        total = zero\n        for u in np.nditer(a):\n            total += u.item()\n        return total\n\n    @jit(nopython=True)\n    def nditer2(a, b):\n        total = zero\n        for u, v in np.nditer((a, b)):\n            total += u.item() * v.item()\n        return total\n\n    @jit(nopython=True)\n    def nditer3(a, b, out):\n        total = zero\n        for u, v, res in np.nditer((a, b, out)):\n            res.itemset(u.item() * v.item())\n        return total\n\n    @jit(nopython=True)\n    def zip_iter(a, b):\n        total = zero\n        for u, v in zip(a, b):\n            total += u * v\n        return total\n\n    @jit(nopython=True)\n    def zip_flat(a, b):\n        total = zero\n        for u, v in zip(a.flat, b.flat):\n            total += u * v\n        return total\n\n    globals().update(locals())",
            "name": "bench_iterating.MonoArrayIterators.time_nditer_iter_2d_non_contiguous",
            "number": 0,
            "param_names": [],
            "params": [],
            "processes": 2,
            "repeat": 0,
            "sample_time": 0.1,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds",
            "version": "e57997336e771943463fa9dc52ef16b2ced0f6e5f4bb0af605af451dd6c0775d",
            "warmup_time": -1
        },
        "bench_iterating.MonoArrayIterators.time_range_index_1d": {
            "code": "class MonoArrayIterators:\n    def time_range_index_1d(self):\n        range1d(arr1)\n\ndef setup():\n    from numba import jit\n\n\n    @jit(nopython=True)\n    def array_iter_1d(arr):\n        total = zero\n        for val in arr:\n            total += val\n        return total\n\n    @jit(nopython=True)\n    def flat_iter(arr):\n        total = zero\n        for val in arr.flat:\n            total += val\n        return total\n\n    @jit(nopython=True)\n    def flat_index(arr):\n        total = zero\n        flat = arr.flat\n        for i in range(arr.size):\n            total += flat[i]\n        return total\n\n    @jit(nopython=True)\n    def ndindex(arr):\n        total = zero\n        for ind in np.ndindex(arr.shape):\n            total += arr[ind]\n        return total\n\n    @jit(nopython=True)\n    def range1d(arr):\n        total = zero\n        n, = arr.shape\n        for i in range(n):\n            total += arr[i]\n        return total\n\n    @jit(nopython=True)\n    def range2d(arr):\n        total = zero\n        m, n = arr.shape\n        for i in range(m):\n            for j in range(n):\n                total += arr[i, j]\n        return total\n\n    @jit(nopython=True)\n    def nditer1(a):\n        total = zero\n        for u in np.nditer(a):\n            total += u.item()\n        return total\n\n    @jit(nopython=True)\n    def nditer2(a, b):\n        total = zero\n        for u, v in np.nditer((a, b)):\n            total += u.item() * v.item()\n        return total\n\n    @jit(nopython=True)\n    def nditer3(a, b, out):\n        total = zero\n        for u, v, res in np.nditer((a, b, out)):\n            res.itemset(u.item() * v.item())\n        return total\n\n    @jit(nopython=True)\n    def zip_iter(a, b):\n        total = zero\n        for u, v in zip(a, b):\n            total += u * v\n        return total\n\n    @jit(nopython=True)\n    def zip_flat(a, b):\n        total = zero\n        for u, v in zip(a.flat, b.flat):\n            total += u * v\n        return total\n\n    globals().update(locals())",
            "name": "bench_iterating.MonoArrayIterators.time_range_index_1d",
            "number": 0,
            "param_names": [],
            "params": [],
            "processes": 2,
            "repeat": 0,
            "sample_time": 0.1,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds",
            "version": "cc998099978a81bbc27d9a2dfc00a512f2b4de24babcdb8ea45d90ceb1a0fde9",
            "warmup_time": -1
        },
        "bench_iterating.MonoArrayIterators.time_range_index_2d": {
            "code": "class MonoArrayIterators:\n    def time_range_index_2d(self):\n        range2d(arr2c)\n\ndef setup():\n    from numba import jit\n\n\n    @jit(nopython=True)\n    def array_iter_1d(arr):\n        total = zero\n        for val in arr:\n            total += val\n        return total\n\n    @jit(nopython=True)\n    def flat_iter(arr):\n        total = zero\n        for val in arr.flat:\n            total += val\n        return total\n\n    @jit(nopython=True)\n    def flat_index(arr):\n        total = zero\n        flat = arr.flat\n        for i in range(arr.size):\n            total += flat[i]\n        return total\n\n    @jit(nopython=True)\n    def ndindex(arr):\n        total = zero\n        for ind in np.ndindex(arr.shape):\n            total += arr[ind]\n        return total\n\n    @jit(nopython=True)\n    def range1d(arr):\n        total = zero\n        n, = arr.shape\n        for i in range(n):\n            total += arr[i]\n        return total\n\n    @jit(nopython=True)\n    def range2d(arr):\n        total = zero\n        m, n = arr.shape\n        for i in range(m):\n            for j in range(n):\n                total += arr[i, j]\n        return total\n\n    @jit(nopython=True)\n    def nditer1(a):\n        total = zero\n        for u in np.nditer(a):\n            total += u.item()\n        return total\n\n    @jit(nopython=True)\n    def nditer2(a, b):\n        total = zero\n        for u, v in np.nditer((a, b)):\n            total += u.item() * v.item()\n        return total\n\n    @jit(nopython=True)\n    def nditer3(a, b, out):\n        total = zero\n        for u, v, res in np.nditer((a, b, out)):\n            res.itemset(u.item() * v.item())\n        return total\n\n    @jit(nopython=True)\n    def zip_iter(a, b):\n        total = zero\n        for u, v in zip(a, b):\n            total += u * v\n        return total\n\n    @jit(nopython=True)\n    def zip_flat(a, b):\n        total = zero\n        for u, v in zip(a.flat, b.flat):\n            total += u * v\n        return total\n\n    globals().update(locals())",
            "name": "bench_iterating.MonoArrayIterators.time_range_index_2d",
            "number": 0,
            "param_names": [],
            "params": [],
            "processes": 2,
            "repeat": 0,
            "sample_time": 0.1,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds",
            "version": "8a5c201eeec20d2e6c7b2f3ca84c04ec65cf2136684c9938e3ceadb860e4e37d",
            "warmup_time": -1
        },
        "bench_iterating.MultiArrayIterators.time_nditer_three_2d_A_A_A": {
            "code": "class MultiArrayIterators:\n    def time_nditer_three_2d_A_A_A(self):\n        nditer3(arr2a, arr2a, arr2a)\n\ndef setup():\n    from numba import jit\n\n\n    @jit(nopython=True)\n    def array_iter_1d(arr):\n        total = zero\n        for val in arr:\n            total += val\n        return total\n\n    @jit(nopython=True)\n    def flat_iter(arr):\n        total = zero\n        for val in arr.flat:\n            total += val\n        return total\n\n    @jit(nopython=True)\n    def flat_index(arr):\n        total = zero\n        flat = arr.flat\n        for i in range(arr.size):\n            total += flat[i]\n        return total\n\n    @jit(nopython=True)\n    def ndindex(arr):\n        total = zero\n        for ind in np.ndindex(arr.shape):\n            total += arr[ind]\n        return total\n\n    @jit(nopython=True)\n    def range1d(arr):\n        total = zero\n        n, = arr.shape\n        for i in range(n):\n            total += arr[i]\n        return total\n\n    @jit(nopython=True)\n    def range2d(arr):\n        total = zero\n        m, n = arr.shape\n        for i in range(m):\n            for j in range(n):\n                total += arr[i, j]\n        return total\n\n    @jit(nopython=True)\n    def nditer1(a):\n        total = zero\n        for u in np.nditer(a):\n            total += u.item()\n        return total\n\n    @jit(nopython=True)\n    def nditer2(a, b):\n        total = zero\n        for u, v in np.nditer((a, b)):\n            total += u.item() * v.item()\n        return total\n\n    @jit(nopython=True)\n    def nditer3(a, b, out):\n        total = zero\n        for u, v, res in np.nditer((a, b, out)):\n            res.itemset(u.item() * v.item())\n        return total\n\n    @jit(nopython=True)\n    def zip_iter(a, b):\n        total = zero\n        for u, v in zip(a, b):\n            total += u * v\n        return total\n\n    @jit(nopython=True)\n    def zip_flat(a, b):\n        total = zero\n        for u, v in zip(a.flat, b.flat):\n            total += u * v\n        return total\n\n    globals().update(locals())",
            "name": "bench_iterating.MultiArrayIterators.time_nditer_three_2d_A_A_A",
            "number": 0,
            "param_names": [],
            "params": [],
            "processes": 2,
            "repeat": 0,
            "sample_time": 0.1,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds",
            "version": "500acd1a2bf9004f8fdd1bbc4b1653e0d0923cdd9af6e838b6d19121e5ff036c",
            "warmup_time": -1
        },
        "bench_iterating.MultiArrayIterators.time_nditer_three_2d_C_C_C": {
            "code": "class MultiArrayIterators:\n    def time_nditer_three_2d_C_C_C(self):\n        nditer3(arr2c, arr2c, arr2c)\n\ndef setup():\n    from numba import jit\n\n\n    @jit(nopython=True)\n    def array_iter_1d(arr):\n        total = zero\n        for val in arr:\n            total += val\n        return total\n\n    @jit(nopython=True)\n    def flat_iter(arr):\n        total = zero\n        for val in arr.flat:\n            total += val\n        return total\n\n    @jit(nopython=True)\n    def flat_index(arr):\n        total = zero\n        flat = arr.flat\n        for i in range(arr.size):\n            total += flat[i]\n        return total\n\n    @jit(nopython=True)\n    def ndindex(arr):\n        total = zero\n        for ind in np.ndindex(arr.shape):\n            total += arr[ind]\n        return total\n\n    @jit(nopython=True)\n    def range1d(arr):\n        total = zero\n        n, = arr.shape\n        for i in range(n):\n            total += arr[i]\n        return total\n\n    @jit(nopython=True)\n    def range2d(arr):\n        total = zero\n        m, n = arr.shape\n        for i in range(m):\n            for j in range(n):\n                total += arr[i, j]\n        return total\n\n    @jit(nopython=True)\n    def nditer1(a):\n        total = zero\n        for u in np.nditer(a):\n            total += u.item()\n        return total\n\n    @jit(nopython=True)\n    def nditer2(a, b):\n        total = zero\n        for u, v in np.nditer((a, b)):\n            total += u.item() * v.item()\n        return total\n\n    @jit(nopython=True)\n    def nditer3(a, b, out):\n        total = zero\n        for u, v, res in np.nditer((a, b, out)):\n            res.itemset(u.item() * v.item())\n        return total\n\n    @jit(nopython=True)\n    def zip_iter(a, b):\n        total = zero\n        for u, v in zip(a, b):\n            total += u * v\n        return total\n\n    @jit(nopython=True)\n    def zip_flat(a, b):\n        total = zero\n        for u, v in zip(a.flat, b.flat):\n            total += u * v\n        return total\n\n    globals().update(locals())",
            "name": "bench_iterating.MultiArrayIterators.time_nditer_three_2d_C_C_C",
            "number": 0,
            "param_names": [],
            "params": [],
            "processes": 2,
            "repeat": 0,
            "sample_time": 0.1,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds",
            "version": "b64fb51f315fb643a50ba15dcaac8a8e56036a75d7a497f9b6bd785a60791456",
            "warmup_time": -1
        },
        "bench_iterating.MultiArrayIterators.time_nditer_three_2d_F_F_F": {
            "code": "class MultiArrayIterators:\n    def time_nditer_three_2d_F_F_F(self):\n        nditer3(arr2f, arr2f, arr2f)\n\ndef setup():\n    from numba import jit\n\n\n    @jit(nopython=True)\n    def array_iter_1d(arr):\n        total = zero\n        for val in arr:\n            total += val\n        return total\n\n    @jit(nopython=True)\n    def flat_iter(arr):\n        total = zero\n        for val in arr.flat:\n            total += val\n        return total\n\n    @jit(nopython=True)\n    def flat_index(arr):\n        total = zero\n        flat = arr.flat\n        for i in range(arr.size):\n            total += flat[i]\n        return total\n\n    @jit(nopython=True)\n    def ndindex(arr):\n        total = zero\n        for ind in np.ndindex(arr.shape):\n            total += arr[ind]\n        return total\n\n    @jit(nopython=True)\n    def range1d(arr):\n        total = zero\n        n, = arr.shape\n        for i in range(n):\n            total += arr[i]\n        return total\n\n    @jit(nopython=True)\n    def range2d(arr):\n        total = zero\n        m, n = arr.shape\n        for i in range(m):\n            for j in range(n):\n                total += arr[i, j]\n        return total\n\n    @jit(nopython=True)\n    def nditer1(a):\n        total = zero\n        for u in np.nditer(a):\n            total += u.item()\n        return total\n\n    @jit(nopython=True)\n    def nditer2(a, b):\n        total = zero\n        for u, v in np.nditer((a, b)):\n            total += u.item() * v.item()\n        return total\n\n    @jit(nopython=True)\n    def nditer3(a, b, out):\n        total = zero\n        for u, v, res in np.nditer((a, b, out)):\n            res.itemset(u.item() * v.item())\n        return total\n\n    @jit(nopython=True)\n    def zip_iter(a, b):\n        total = zero\n        for u, v in zip(a, b):\n            total += u * v\n        return total\n\n    @jit(nopython=True)\n    def zip_flat(a, b):\n        total = zero\n        for u, v in zip(a.flat, b.flat):\n            total += u * v\n        return total\n\n    globals().update(locals())",
            "name": "bench_iterating.MultiArrayIterators.time_nditer_three_2d_F_F_F",
            "number": 0,
            "param_names": [],
            "params": [],
            "processes": 2,
            "repeat": 0,
            "sample_time": 0.1,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds",
            "version": "d3f6b711e8406cc33c4c2daf83e0e05a14bfc6a26f9de88a0adc3e2800d3f4ec",
            "warmup_time": -1
        },
        "bench_iterating.MultiArrayIterators.time_nditer_two_1d": {
            "code": "class MultiArrayIterators:\n    def time_nditer_two_1d(self):\n        nditer2(arr1, arr1)\n\ndef setup():\n    from numba import jit\n\n\n    @jit(nopython=True)\n    def array_iter_1d(arr):\n        total = zero\n        for val in arr:\n            total += val\n        return total\n\n    @jit(nopython=True)\n    def flat_iter(arr):\n        total = zero\n        for val in arr.flat:\n            total += val\n        return total\n\n    @jit(nopython=True)\n    def flat_index(arr):\n        total = zero\n        flat = arr.flat\n        for i in range(arr.size):\n            total += flat[i]\n        return total\n\n    @jit(nopython=True)\n    def ndindex(arr):\n        total = zero\n        for ind in np.ndindex(arr.shape):\n            total += arr[ind]\n        return total\n\n    @jit(nopython=True)\n    def range1d(arr):\n        total = zero\n        n, = arr.shape\n        for i in range(n):\n            total += arr[i]\n        return total\n\n    @jit(nopython=True)\n    def range2d(arr):\n        total = zero\n        m, n = arr.shape\n        for i in range(m):\n            for j in range(n):\n                total += arr[i, j]\n        return total\n\n    @jit(nopython=True)\n    def nditer1(a):\n        total = zero\n        for u in np.nditer(a):\n            total += u.item()\n        return total\n\n    @jit(nopython=True)\n    def nditer2(a, b):\n        total = zero\n        for u, v in np.nditer((a, b)):\n            total += u.item() * v.item()\n        return total\n\n    @jit(nopython=True)\n    def nditer3(a, b, out):\n        total = zero\n        for u, v, res in np.nditer((a, b, out)):\n            res.itemset(u.item() * v.item())\n        return total\n\n    @jit(nopython=True)\n    def zip_iter(a, b):\n        total = zero\n        for u, v in zip(a, b):\n            total += u * v\n        return total\n\n    @jit(nopython=True)\n    def zip_flat(a, b):\n        total = zero\n        for u, v in zip(a.flat, b.flat):\n            total += u * v\n        return total\n\n    globals().update(locals())",
            "name": "bench_iterating.MultiArrayIterators.time_nditer_two_1d",
            "number": 0,
            "param_names": [],
            "params": [],
            "processes": 2,
            "repeat": 0,
            "sample_time": 0.1,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds",
            "version": "0db3b960fd73f966b3dc771c16a684e00f5d82c7bf00e25bb87d0c67bb6cdb8f",
            "warmup_time": -1
        },
        "bench_iterating.MultiArrayIterators.time_nditer_two_2d_A_A": {
            "code": "class MultiArrayIterators:\n    def time_nditer_two_2d_A_A(self):\n        nditer2(arr2a, arr2a)\n\ndef setup():\n    from numba import jit\n\n\n    @jit(nopython=True)\n    def array_iter_1d(arr):\n        total = zero\n        for val in arr:\n            total += val\n        return total\n\n    @jit(nopython=True)\n    def flat_iter(arr):\n        total = zero\n        for val in arr.flat:\n            total += val\n        return total\n\n    @jit(nopython=True)\n    def flat_index(arr):\n        total = zero\n        flat = arr.flat\n        for i in range(arr.size):\n            total += flat[i]\n        return total\n\n    @jit(nopython=True)\n    def ndindex(arr):\n        total = zero\n        for ind in np.ndindex(arr.shape):\n            total += arr[ind]\n        return total\n\n    @jit(nopython=True)\n    def range1d(arr):\n        total = zero\n        n, = arr.shape\n        for i in range(n):\n            total += arr[i]\n        return total\n\n    @jit(nopython=True)\n    def range2d(arr):\n        total = zero\n        m, n = arr.shape\n        for i in range(m):\n            for j in range(n):\n                total += arr[i, j]\n        return total\n\n    @jit(nopython=True)\n    def nditer1(a):\n        total = zero\n        for u in np.nditer(a):\n            total += u.item()\n        return total\n\n    @jit(nopython=True)\n    def nditer2(a, b):\n        total = zero\n        for u, v in np.nditer((a, b)):\n            total += u.item() * v.item()\n        return total\n\n    @jit(nopython=True)\n    def nditer3(a, b, out):\n        total = zero\n        for u, v, res in np.nditer((a, b, out)):\n            res.itemset(u.item() * v.item())\n        return total\n\n    @jit(nopython=True)\n    def zip_iter(a, b):\n        total = zero\n        for u, v in zip(a, b):\n            total += u * v\n        return total\n\n    @jit(nopython=True)\n    def zip_flat(a, b):\n        total = zero\n        for u, v in zip(a.flat, b.flat):\n            total += u * v\n        return total\n\n    globals().update(locals())",
            "name": "bench_iterating.MultiArrayIterators.time_nditer_two_2d_A_A",
            "number": 0,
            "param_names": [],
            "params": [],
            "processes": 2,
            "repeat": 0,
            "sample_time": 0.1,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds",
            "version": "8a9132f23bf7d3342050e1c0ef971f789e62fb475b8771a4b92a2aa1341f4aca",
            "warmup_time": -1
        },
        "bench_iterating.MultiArrayIterators.time_nditer_two_2d_C_A": {
            "code": "class MultiArrayIterators:\n    def time_nditer_two_2d_C_A(self):\n        nditer2(arr2c, arr2a)\n\ndef setup():\n    from numba import jit\n\n\n    @jit(nopython=True)\n    def array_iter_1d(arr):\n        total = zero\n        for val in arr:\n            total += val\n        return total\n\n    @jit(nopython=True)\n    def flat_iter(arr):\n        total = zero\n        for val in arr.flat:\n            total += val\n        return total\n\n    @jit(nopython=True)\n    def flat_index(arr):\n        total = zero\n        flat = arr.flat\n        for i in range(arr.size):\n            total += flat[i]\n        return total\n\n    @jit(nopython=True)\n    def ndindex(arr):\n        total = zero\n        for ind in np.ndindex(arr.shape):\n            total += arr[ind]\n        return total\n\n    @jit(nopython=True)\n    def range1d(arr):\n        total = zero\n        n, = arr.shape\n        for i in range(n):\n            total += arr[i]\n        return total\n\n    @jit(nopython=True)\n    def range2d(arr):\n        total = zero\n        m, n = arr.shape\n        for i in range(m):\n            for j in range(n):\n                total += arr[i, j]\n        return total\n\n    @jit(nopython=True)\n    def nditer1(a):\n        total = zero\n        for u in np.nditer(a):\n            total += u.item()\n        return total\n\n    @jit(nopython=True)\n    def nditer2(a, b):\n        total = zero\n        for u, v in np.nditer((a, b)):\n            total += u.item() * v.item()\n        return total\n\n    @jit(nopython=True)\n    def nditer3(a, b, out):\n        total = zero\n        for u, v, res in np.nditer((a, b, out)):\n            res.itemset(u.item() * v.item())\n        return total\n\n    @jit(nopython=True)\n    def zip_iter(a, b):\n        total = zero\n        for u, v in zip(a, b):\n            total += u * v\n        return total\n\n    @jit(nopython=True)\n    def zip_flat(a, b):\n        total = zero\n        for u, v in zip(a.flat, b.flat):\n            total += u * v\n        return total\n\n    globals().update(locals())",
            "name": "bench_iterating.MultiArrayIterators.time_nditer_two_2d_C_A",
            "number": 0,
            "param_names": [],
            "params": [],
            "processes": 2,
            "repeat": 0,
            "sample_time": 0.1,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds",
            "version": "96d5cd0cc60500faa10579ea02cb6fc65b877d47e6be6e2430040064081b190a",
            "warmup_time": -1
        },
        "bench_iterating.MultiArrayIterators.time_nditer_two_2d_C_A_small_inner_dim": {
            "code": "class MultiArrayIterators:\n    def time_nditer_two_2d_C_A_small_inner_dim(self):\n        nditer2(arr2c2, arr2a2)\n\ndef setup():\n    from numba import jit\n\n\n    @jit(nopython=True)\n    def array_iter_1d(arr):\n        total = zero\n        for val in arr:\n            total += val\n        return total\n\n    @jit(nopython=True)\n    def flat_iter(arr):\n        total = zero\n        for val in arr.flat:\n            total += val\n        return total\n\n    @jit(nopython=True)\n    def flat_index(arr):\n        total = zero\n        flat = arr.flat\n        for i in range(arr.size):\n            total += flat[i]\n        return total\n\n    @jit(nopython=True)\n    def ndindex(arr):\n        total = zero\n        for ind in np.ndindex(arr.shape):\n            total += arr[ind]\n        return total\n\n    @jit(nopython=True)\n    def range1d(arr):\n        total = zero\n        n, = arr.shape\n        for i in range(n):\n            total += arr[i]\n        return total\n\n    @jit(nopython=True)\n    def range2d(arr):\n        total = zero\n        m, n = arr.shape\n        for i in range(m):\n            for j in range(n):\n                total += arr[i, j]\n        return total\n\n    @jit(nopython=True)\n    def nditer1(a):\n        total = zero\n        for u in np.nditer(a):\n            total += u.item()\n        return total\n\n    @jit(nopython=True)\n    def nditer2(a, b):\n        total = zero\n        for u, v in np.nditer((a, b)):\n            total += u.item() * v.item()\n        return total\n\n    @jit(nopython=True)\n    def nditer3(a, b, out):\n        total = zero\n        for u, v, res in np.nditer((a, b, out)):\n            res.itemset(u.item() * v.item())\n        return total\n\n    @jit(nopython=True)\n    def zip_iter(a, b):\n        total = zero\n        for u, v in zip(a, b):\n            total += u * v\n        return total\n\n    @jit(nopython=True)\n    def zip_flat(a, b):\n        total = zero\n        for u, v in zip(a.flat, b.flat):\n            total += u * v\n        return total\n\n    globals().update(locals())",
            "name": "bench_iterating.MultiArrayIterators.time_nditer_two_2d_C_A_small_inner_dim",
            "number": 0,
            "param_names": [],
            "params": [],
            "processes": 2,
            "repeat": 0,
            "sample_time": 0.1,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds",
            "version": "01af8198dd1889e45c57b1b57f276240c40e737a3e8f729ff499bda7735a3772",
            "warmup_time": -1
        },
        "bench_iterating.MultiArrayIterators.time_nditer_two_2d_C_C": {
            "code": "class MultiArrayIterators:\n    def time_nditer_two_2d_C_C(self):\n        nditer2(arr2c, arr2c)\n\ndef setup():\n    from numba import jit\n\n\n    @jit(nopython=True)\n    def array_iter_1d(arr):\n        total = zero\n        for val in arr:\n            total += val\n        return total\n\n    @jit(nopython=True)\n    def flat_iter(arr):\n        total = zero\n        for val in arr.flat:\n            total += val\n        return total\n\n    @jit(nopython=True)\n    def flat_index(arr):\n        total = zero\n        flat = arr.flat\n        for i in range(arr.size):\n            total += flat[i]\n        return total\n\n    @jit(nopython=True)\n    def ndindex(arr):\n        total = zero\n        for ind in np.ndindex(arr.shape):\n            total += arr[ind]\n        return total\n\n    @jit(nopython=True)\n    def range1d(arr):\n        total = zero\n        n, = arr.shape\n        for i in range(n):\n            total += arr[i]\n        return total\n\n    @jit(nopython=True)\n    def range2d(arr):\n        total = zero\n        m, n = arr.shape\n        for i in range(m):\n            for j in range(n):\n                total += arr[i, j]\n        return total\n\n    @jit(nopython=True)\n    def nditer1(a):\n        total = zero\n        for u in np.nditer(a):\n            total += u.item()\n        return total\n\n    @jit(nopython=True)\n    def nditer2(a, b):\n        total = zero\n        for u, v in np.nditer((a, b)):\n            total += u.item() * v.item()\n        return total\n\n    @jit(nopython=True)\n    def nditer3(a, b, out):\n        total = zero\n        for u, v, res in np.nditer((a, b, out)):\n            res.itemset(u.item() * v.item())\n        return total\n\n    @jit(nopython=True)\n    def zip_iter(a, b):\n        total = zero\n        for u, v in zip(a, b):\n            total += u * v\n        return total\n\n    @jit(nopython=True)\n    def zip_flat(a, b):\n        total = zero\n        for u, v in zip(a.flat, b.flat):\n            total += u * v\n        return total\n\n    globals().update(locals())",
            "name": "bench_iterating.MultiArrayIterators.time_nditer_two_2d_C_C",
            "number": 0,
            "param_names": [],
            "params": [],
            "processes": 2,
            "repeat": 0,
            "sample_time": 0.1,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds",
            "version": "32641ad7bb229f55e4241e740d0176addf1fd1df283690649a9cd5d27965f465",
            "warmup_time": -1
        },
        "bench_iterating.MultiArrayIterators.time_nditer_two_2d_C_C_small_inner_dim": {
            "code": "class MultiArrayIterators:\n    def time_nditer_two_2d_C_C_small_inner_dim(self):\n        nditer2(arr2c2, arr2c2)\n\ndef setup():\n    from numba import jit\n\n\n    @jit(nopython=True)\n    def array_iter_1d(arr):\n        total = zero\n        for val in arr:\n            total += val\n        return total\n\n    @jit(nopython=True)\n    def flat_iter(arr):\n        total = zero\n        for val in arr.flat:\n            total += val\n        return total\n\n    @jit(nopython=True)\n    def flat_index(arr):\n        total = zero\n        flat = arr.flat\n        for i in range(arr.size):\n            total += flat[i]\n        return total\n\n    @jit(nopython=True)\n    def ndindex(arr):\n        total = zero\n        for ind in np.ndindex(arr.shape):\n            total += arr[ind]\n        return total\n\n    @jit(nopython=True)\n    def range1d(arr):\n        total = zero\n        n, = arr.shape\n        for i in range(n):\n            total += arr[i]\n        return total\n\n    @jit(nopython=True)\n    def range2d(arr):\n        total = zero\n        m, n = arr.shape\n        for i in range(m):\n            for j in range(n):\n                total += arr[i, j]\n        return total\n\n    @jit(nopython=True)\n    def nditer1(a):\n        total = zero\n        for u in np.nditer(a):\n            total += u.item()\n        return total\n\n    @jit(nopython=True)\n    def nditer2(a, b):\n        total = zero\n        for u, v in np.nditer((a, b)):\n            total += u.item() * v.item()\n        return total\n\n    @jit(nopython=True)\n    def nditer3(a, b, out):\n        total = zero\n        for u, v, res in np.nditer((a, b, out)):\n            res.itemset(u.item() * v.item())\n        return total\n\n    @jit(nopython=True)\n    def zip_iter(a, b):\n        total = zero\n        for u, v in zip(a, b):\n            total += u * v\n        return total\n\n    @jit(nopython=True)\n    def zip_flat(a, b):\n        total = zero\n        for u, v in zip(a.flat, b.flat):\n            total += u * v\n        return total\n\n    globals().update(locals())",
            "name": "bench_iterating.MultiArrayIterators.time_nditer_two_2d_C_C_small_inner_dim",
            "number": 0,
            "param_names": [],
            "params": [],
            "processes": 2,
            "repeat": 0,
            "sample_time": 0.1,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds",
            "version": "c90b2f273702b28d0312124e6a50d5e6a7f5c3c39abe3bb6caf980983f62ac97",
            "warmup_time": -1
        },
        "bench_iterating.MultiArrayIterators.time_nditer_two_2d_F_C": {
            "code": "class MultiArrayIterators:\n    def time_nditer_two_2d_F_C(self):\n        nditer2(arr2f, arr2c)\n\ndef setup():\n    from numba import jit\n\n\n    @jit(nopython=True)\n    def array_iter_1d(arr):\n        total = zero\n        for val in arr:\n            total += val\n        return total\n\n    @jit(nopython=True)\n    def flat_iter(arr):\n        total = zero\n        for val in arr.flat:\n            total += val\n        return total\n\n    @jit(nopython=True)\n    def flat_index(arr):\n        total = zero\n        flat = arr.flat\n        for i in range(arr.size):\n            total += flat[i]\n        return total\n\n    @jit(nopython=True)\n    def ndindex(arr):\n        total = zero\n        for ind in np.ndindex(arr.shape):\n            total += arr[ind]\n        return total\n\n    @jit(nopython=True)\n    def range1d(arr):\n        total = zero\n        n, = arr.shape\n        for i in range(n):\n            total += arr[i]\n        return total\n\n    @jit(nopython=True)\n    def range2d(arr):\n        total = zero\n        m, n = arr.shape\n        for i in range(m):\n            for j in range(n):\n                total += arr[i, j]\n        return total\n\n    @jit(nopython=True)\n    def nditer1(a):\n        total = zero\n        for u in np.nditer(a):\n            total += u.item()\n        return total\n\n    @jit(nopython=True)\n    def nditer2(a, b):\n        total = zero\n        for u, v in np.nditer((a, b)):\n            total += u.item() * v.item()\n        return total\n\n    @jit(nopython=True)\n    def nditer3(a, b, out):\n        total = zero\n        for u, v, res in np.nditer((a, b, out)):\n            res.itemset(u.item() * v.item())\n        return total\n\n    @jit(nopython=True)\n    def zip_iter(a, b):\n        total = zero\n        for u, v in zip(a, b):\n            total += u * v\n        return total\n\n    @jit(nopython=True)\n    def zip_flat(a, b):\n        total = zero\n        for u, v in zip(a.flat, b.flat):\n            total += u * v\n        return total\n\n    globals().update(locals())",
            "name": "bench_iterating.MultiArrayIterators.time_nditer_two_2d_F_C",
            "number": 0,
            "param_names": [],
            "params": [],
            "processes": 2,
            "repeat": 0,
            "sample_time": 0.1,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds",
            "version": "2a6cbd3a3d226079ccf5bdab974477fd4545f001290ff8d81a3d33644f77c418",
            "warmup_time": -1
        },
        "bench_iterating.MultiArrayIterators.time_nditer_two_2d_F_C_small_inner_dim": {
            "code": "class MultiArrayIterators:\n    def time_nditer_two_2d_F_C_small_inner_dim(self):\n        nditer2(arr2f2, arr2c2)\n\ndef setup():\n    from numba import jit\n\n\n    @jit(nopython=True)\n    def array_iter_1d(arr):\n        total = zero\n        for val in arr:\n            total += val\n        return total\n\n    @jit(nopython=True)\n    def flat_iter(arr):\n        total = zero\n        for val in arr.flat:\n            total += val\n        return total\n\n    @jit(nopython=True)\n    def flat_index(arr):\n        total = zero\n        flat = arr.flat\n        for i in range(arr.size):\n            total += flat[i]\n        return total\n\n    @jit(nopython=True)\n    def ndindex(arr):\n        total = zero\n        for ind in np.ndindex(arr.shape):\n            total += arr[ind]\n        return total\n\n    @jit(nopython=True)\n    def range1d(arr):\n        total = zero\n        n, = arr.shape\n        for i in range(n):\n            total += arr[i]\n        return total\n\n    @jit(nopython=True)\n    def range2d(arr):\n        total = zero\n        m, n = arr.shape\n        for i in range(m):\n            for j in range(n):\n                total += arr[i, j]\n        return total\n\n    @jit(nopython=True)\n    def nditer1(a):\n        total = zero\n        for u in np.nditer(a):\n            total += u.item()\n        return total\n\n    @jit(nopython=True)\n    def nditer2(a, b):\n        total = zero\n        for u, v in np.nditer((a, b)):\n            total += u.item() * v.item()\n        return total\n\n    @jit(nopython=True)\n    def nditer3(a, b, out):\n        total = zero\n        for u, v, res in np.nditer((a, b, out)):\n            res.itemset(u.item() * v.item())\n        return total\n\n    @jit(nopython=True)\n    def zip_iter(a, b):\n        total = zero\n        for u, v in zip(a, b):\n            total += u * v\n        return total\n\n    @jit(nopython=True)\n    def zip_flat(a, b):\n        total = zero\n        for u, v in zip(a.flat, b.flat):\n            total += u * v\n        return total\n\n    globals().update(locals())",
            "name": "bench_iterating.MultiArrayIterators.time_nditer_two_2d_F_C_small_inner_dim",
            "number": 0,
            "param_names": [],
            "params": [],
            "processes": 2,
            "repeat": 0,
            "sample_time": 0.1,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds",
            "version": "66ddef4117fa4a5d309043ff39c0305c9acbf2ffaa57549096cc0e28cd286ff3",
            "warmup_time": -1
        },
        "bench_iterating.MultiArrayIterators.time_nditer_two_2d_F_F": {
            "code": "class MultiArrayIterators:\n    def time_nditer_two_2d_F_F(self):\n        nditer2(arr2f, arr2f)\n\ndef setup():\n    from numba import jit\n\n\n    @jit(nopython=True)\n    def array_iter_1d(arr):\n        total = zero\n        for val in arr:\n            total += val\n        return total\n\n    @jit(nopython=True)\n    def flat_iter(arr):\n        total = zero\n        for val in arr.flat:\n            total += val\n        return total\n\n    @jit(nopython=True)\n    def flat_index(arr):\n        total = zero\n        flat = arr.flat\n        for i in range(arr.size):\n            total += flat[i]\n        return total\n\n    @jit(nopython=True)\n    def ndindex(arr):\n        total = zero\n        for ind in np.ndindex(arr.shape):\n            total += arr[ind]\n        return total\n\n    @jit(nopython=True)\n    def range1d(arr):\n        total = zero\n        n, = arr.shape\n        for i in range(n):\n            total += arr[i]\n        return total\n\n    @jit(nopython=True)\n    def range2d(arr):\n        total = zero\n        m, n = arr.shape\n        for i in range(m):\n            for j in range(n):\n                total += arr[i, j]\n        return total\n\n    @jit(nopython=True)\n    def nditer1(a):\n        total = zero\n        for u in np.nditer(a):\n            total += u.item()\n        return total\n\n    @jit(nopython=True)\n    def nditer2(a, b):\n        total = zero\n        for u, v in np.nditer((a, b)):\n            total += u.item() * v.item()\n        return total\n\n    @jit(nopython=True)\n    def nditer3(a, b, out):\n        total = zero\n        for u, v, res in np.nditer((a, b, out)):\n            res.itemset(u.item() * v.item())\n        return total\n\n    @jit(nopython=True)\n    def zip_iter(a, b):\n        total = zero\n        for u, v in zip(a, b):\n            total += u * v\n        return total\n\n    @jit(nopython=True)\n    def zip_flat(a, b):\n        total = zero\n        for u, v in zip(a.flat, b.flat):\n            total += u * v\n        return total\n\n    globals().update(locals())",
            "name": "bench_iterating.MultiArrayIterators.time_nditer_two_2d_F_F",
            "number": 0,
            "param_names": [],
            "params": [],
            "processes": 2,
            "repeat": 0,
            "sample_time": 0.1,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds",
            "version": "38a118ff40e72c337261400c611aaa3af7fdd15b1ed0089c2b8a3ee439e59873",
            "warmup_time": -1
        },
        "bench_iterating.MultiArrayIterators.time_nditer_two_2d_F_F_small_inner_dim": {
            "code": "class MultiArrayIterators:\n    def time_nditer_two_2d_F_F_small_inner_dim(self):\n        nditer2(arr2f2, arr2f2)\n\ndef setup():\n    from numba import jit\n\n\n    @jit(nopython=True)\n    def array_iter_1d(arr):\n        total = zero\n        for val in arr:\n            total += val\n        return total\n\n    @jit(nopython=True)\n    def flat_iter(arr):\n        total = zero\n        for val in arr.flat:\n            total += val\n        return total\n\n    @jit(nopython=True)\n    def flat_index(arr):\n        total = zero\n        flat = arr.flat\n        for i in range(arr.size):\n            total += flat[i]\n        return total\n\n    @jit(nopython=True)\n    def ndindex(arr):\n        total = zero\n        for ind in np.ndindex(arr.shape):\n            total += arr[ind]\n        return total\n\n    @jit(nopython=True)\n    def range1d(arr):\n        total = zero\n        n, = arr.shape\n        for i in range(n):\n            total += arr[i]\n        return total\n\n    @jit(nopython=True)\n    def range2d(arr):\n        total = zero\n        m, n = arr.shape\n        for i in range(m):\n            for j in range(n):\n                total += arr[i, j]\n        return total\n\n    @jit(nopython=True)\n    def nditer1(a):\n        total = zero\n        for u in np.nditer(a):\n            total += u.item()\n        return total\n\n    @jit(nopython=True)\n    def nditer2(a, b):\n        total = zero\n        for u, v in np.nditer((a, b)):\n            total += u.item() * v.item()\n        return total\n\n    @jit(nopython=True)\n    def nditer3(a, b, out):\n        total = zero\n        for u, v, res in np.nditer((a, b, out)):\n            res.itemset(u.item() * v.item())\n        return total\n\n    @jit(nopython=True)\n    def zip_iter(a, b):\n        total = zero\n        for u, v in zip(a, b):\n            total += u * v\n        return total\n\n    @jit(nopython=True)\n    def zip_flat(a, b):\n        total = zero\n        for u, v in zip(a.flat, b.flat):\n            total += u * v\n        return total\n\n    globals().update(locals())",
            "name": "bench_iterating.MultiArrayIterators.time_nditer_two_2d_F_F_small_inner_dim",
            "number": 0,
            "param_names": [],
            "params": [],
            "processes": 2,
            "repeat": 0,
            "sample_time": 0.1,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds",
            "version": "9568435aff383beae902fa954118cad34628e2606e91f7b2df6e56f66538acc6",
            "warmup_time": -1
        },
        "bench_iterating.MultiArrayIterators.time_zip_flat_two_1d": {
            "code": "class MultiArrayIterators:\n    def time_zip_flat_two_1d(self):\n        zip_flat(arr1, arr1)\n\ndef setup():\n    from numba import jit\n\n\n    @jit(nopython=True)\n    def array_iter_1d(arr):\n        total = zero\n        for val in arr:\n            total += val\n        return total\n\n    @jit(nopython=True)\n    def flat_iter(arr):\n        total = zero\n        for val in arr.flat:\n            total += val\n        return total\n\n    @jit(nopython=True)\n    def flat_index(arr):\n        total = zero\n        flat = arr.flat\n        for i in range(arr.size):\n            total += flat[i]\n        return total\n\n    @jit(nopython=True)\n    def ndindex(arr):\n        total = zero\n        for ind in np.ndindex(arr.shape):\n            total += arr[ind]\n        return total\n\n    @jit(nopython=True)\n    def range1d(arr):\n        total = zero\n        n, = arr.shape\n        for i in range(n):\n            total += arr[i]\n        return total\n\n    @jit(nopython=True)\n    def range2d(arr):\n        total = zero\n        m, n = arr.shape\n        for i in range(m):\n            for j in range(n):\n                total += arr[i, j]\n        return total\n\n    @jit(nopython=True)\n    def nditer1(a):\n        total = zero\n        for u in np.nditer(a):\n            total += u.item()\n        return total\n\n    @jit(nopython=True)\n    def nditer2(a, b):\n        total = zero\n        for u, v in np.nditer((a, b)):\n            total += u.item() * v.item()\n        return total\n\n    @jit(nopython=True)\n    def nditer3(a, b, out):\n        total = zero\n        for u, v, res in np.nditer((a, b, out)):\n            res.itemset(u.item() * v.item())\n        return total\n\n    @jit(nopython=True)\n    def zip_iter(a, b):\n        total = zero\n        for u, v in zip(a, b):\n            total += u * v\n        return total\n\n    @jit(nopython=True)\n    def zip_flat(a, b):\n        total = zero\n        for u, v in zip(a.flat, b.flat):\n            total += u * v\n        return total\n\n    globals().update(locals())",
            "name": "bench_iterating.MultiArrayIterators.time_zip_flat_two_1d",
            "number": 0,
            "param_names": [],
            "params": [],
            "processes": 2,
            "repeat": 0,
            "sample_time": 0.1,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds",
            "version": "5ad5436ab7daa9365d272659a23a717617f544890049cf97cf78804086ccd56c",
            "warmup_time": -1
        },
        "bench_iterating.MultiArrayIterators.time_zip_flat_two_2d_A_A": {
            "code": "class MultiArrayIterators:\n    def time_zip_flat_two_2d_A_A(self):\n        zip_flat(arr2a, arr2a)\n\ndef setup():\n    from numba import jit\n\n\n    @jit(nopython=True)\n    def array_iter_1d(arr):\n        total = zero\n        for val in arr:\n            total += val\n        return total\n\n    @jit(nopython=True)\n    def flat_iter(arr):\n        total = zero\n        for val in arr.flat:\n            total += val\n        return total\n\n    @jit(nopython=True)\n    def flat_index(arr):\n        total = zero\n        flat = arr.flat\n        for i in range(arr.size):\n            total += flat[i]\n        return total\n\n    @jit(nopython=True)\n    def ndindex(arr):\n        total = zero\n        for ind in np.ndindex(arr.shape):\n            total += arr[ind]\n        return total\n\n    @jit(nopython=True)\n    def range1d(arr):\n        total = zero\n        n, = arr.shape\n        for i in range(n):\n            total += arr[i]\n        return total\n\n    @jit(nopython=True)\n    def range2d(arr):\n        total = zero\n        m, n = arr.shape\n        for i in range(m):\n            for j in range(n):\n                total += arr[i, j]\n        return total\n\n    @jit(nopython=True)\n    def nditer1(a):\n        total = zero\n        for u in np.nditer(a):\n            total += u.item()\n        return total\n\n    @jit(nopython=True)\n    def nditer2(a, b):\n        total = zero\n        for u, v in np.nditer((a, b)):\n            total += u.item() * v.item()\n        return total\n\n    @jit(nopython=True)\n    def nditer3(a, b, out):\n        total = zero\n        for u, v, res in np.nditer((a, b, out)):\n            res.itemset(u.item() * v.item())\n        return total\n\n    @jit(nopython=True)\n    def zip_iter(a, b):\n        total = zero\n        for u, v in zip(a, b):\n            total += u * v\n        return total\n\n    @jit(nopython=True)\n    def zip_flat(a, b):\n        total = zero\n        for u, v in zip(a.flat, b.flat):\n            total += u * v\n        return total\n\n    globals().update(locals())",
            "name": "bench_iterating.MultiArrayIterators.time_zip_flat_two_2d_A_A",
            "number": 0,
            "param_names": [],
            "params": [],
            "processes": 2,
            "repeat": 0,
            "sample_time": 0.1,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds",
            "version": "3073d1a41dbb236c2b40b58d5438b0c0b98dd5325627dcea3f14f078ed14d630",
            "warmup_time": -1
        },
        "bench_iterating.MultiArrayIterators.time_zip_flat_two_2d_C_C": {
            "code": "class MultiArrayIterators:\n    def time_zip_flat_two_2d_C_C(self):\n        zip_flat(arr2c, arr2c)\n\ndef setup():\n    from numba import jit\n\n\n    @jit(nopython=True)\n    def array_iter_1d(arr):\n        total = zero\n        for val in arr:\n            total += val\n        return total\n\n    @jit(nopython=True)\n    def flat_iter(arr):\n        total = zero\n        for val in arr.flat:\n            total += val\n        return total\n\n    @jit(nopython=True)\n    def flat_index(arr):\n        total = zero\n        flat = arr.flat\n        for i in range(arr.size):\n            total += flat[i]\n        return total\n\n    @jit(nopython=True)\n    def ndindex(arr):\n        total = zero\n        for ind in np.ndindex(arr.shape):\n            total += arr[ind]\n        return total\n\n    @jit(nopython=True)\n    def range1d(arr):\n        total = zero\n        n, = arr.shape\n        for i in range(n):\n            total += arr[i]\n        return total\n\n    @jit(nopython=True)\n    def range2d(arr):\n        total = zero\n        m, n = arr.shape\n        for i in range(m):\n            for j in range(n):\n                total += arr[i, j]\n        return total\n\n    @jit(nopython=True)\n    def nditer1(a):\n        total = zero\n        for u in np.nditer(a):\n            total += u.item()\n        return total\n\n    @jit(nopython=True)\n    def nditer2(a, b):\n        total = zero\n        for u, v in np.nditer((a, b)):\n            total += u.item() * v.item()\n        return total\n\n    @jit(nopython=True)\n    def nditer3(a, b, out):\n        total = zero\n        for u, v, res in np.nditer((a, b, out)):\n            res.itemset(u.item() * v.item())\n        return total\n\n    @jit(nopython=True)\n    def zip_iter(a, b):\n        total = zero\n        for u, v in zip(a, b):\n            total += u * v\n        return total\n\n    @jit(nopython=True)\n    def zip_flat(a, b):\n        total = zero\n        for u, v in zip(a.flat, b.flat):\n            total += u * v\n        return total\n\n    globals().update(locals())",
            "name": "bench_iterating.MultiArrayIterators.time_zip_flat_two_2d_C_C",
            "number": 0,
            "param_names": [],
            "params": [],
            "processes": 2,
            "repeat": 0,
            "sample_time": 0.1,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds",
            "version": "7a868ddea995431da1f84d5686b1871019ba27bde1091b16b78b42cb820ed852",
            "warmup_time": -1
        },
        "bench_iterating.MultiArrayIterators.time_zip_flat_two_2d_C_C_small_inner_dim": {
            "code": "class MultiArrayIterators:\n    def time_zip_flat_two_2d_C_C_small_inner_dim(self):\n        zip_flat(arr2c2, arr2c2)\n\ndef setup():\n    from numba import jit\n\n\n    @jit(nopython=True)\n    def array_iter_1d(arr):\n        total = zero\n        for val in arr:\n            total += val\n        return total\n\n    @jit(nopython=True)\n    def flat_iter(arr):\n        total = zero\n        for val in arr.flat:\n            total += val\n        return total\n\n    @jit(nopython=True)\n    def flat_index(arr):\n        total = zero\n        flat = arr.flat\n        for i in range(arr.size):\n            total += flat[i]\n        return total\n\n    @jit(nopython=True)\n    def ndindex(arr):\n        total = zero\n        for ind in np.ndindex(arr.shape):\n            total += arr[ind]\n        return total\n\n    @jit(nopython=True)\n    def range1d(arr):\n        total = zero\n        n, = arr.shape\n        for i in range(n):\n            total += arr[i]\n        return total\n\n    @jit(nopython=True)\n    def range2d(arr):\n        total = zero\n        m, n = arr.shape\n        for i in range(m):\n            for j in range(n):\n                total += arr[i, j]\n        return total\n\n    @jit(nopython=True)\n    def nditer1(a):\n        total = zero\n        for u in np.nditer(a):\n            total += u.item()\n        return total\n\n    @jit(nopython=True)\n    def nditer2(a, b):\n        total = zero\n        for u, v in np.nditer((a, b)):\n            total += u.item() * v.item()\n        return total\n\n    @jit(nopython=True)\n    def nditer3(a, b, out):\n        total = zero\n        for u, v, res in np.nditer((a, b, out)):\n            res.itemset(u.item() * v.item())\n        return total\n\n    @jit(nopython=True)\n    def zip_iter(a, b):\n        total = zero\n        for u, v in zip(a, b):\n            total += u * v\n        return total\n\n    @jit(nopython=True)\n    def zip_flat(a, b):\n        total = zero\n        for u, v in zip(a.flat, b.flat):\n            total += u * v\n        return total\n\n    globals().update(locals())",
            "name": "bench_iterating.MultiArrayIterators.time_zip_flat_two_2d_C_C_small_inner_dim",
            "number": 0,
            "param_names": [],
            "params": [],
            "processes": 2,
            "repeat": 0,
            "sample_time": 0.1,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds",
            "version": "9e071fa202331aee5a78b25f55f2522a1976f22c552fb0eb3d61ab153c5ea7c2",
            "warmup_time": -1
        },
        "bench_iterating.MultiArrayIterators.time_zip_flat_two_2d_F_F": {
            "code": "class MultiArrayIterators:\n    def time_zip_flat_two_2d_F_F(self):\n        zip_flat(arr2f, arr2f)\n\ndef setup():\n    from numba import jit\n\n\n    @jit(nopython=True)\n    def array_iter_1d(arr):\n        total = zero\n        for val in arr:\n            total += val\n        return total\n\n    @jit(nopython=True)\n    def flat_iter(arr):\n        total = zero\n        for val in arr.flat:\n            total += val\n        return total\n\n    @jit(nopython=True)\n    def flat_index(arr):\n        total = zero\n        flat = arr.flat\n        for i in range(arr.size):\n            total += flat[i]\n        return total\n\n    @jit(nopython=True)\n    def ndindex(arr):\n        total = zero\n        for ind in np.ndindex(arr.shape):\n            total += arr[ind]\n        return total\n\n    @jit(nopython=True)\n    def range1d(arr):\n        total = zero\n        n, = arr.shape\n        for i in range(n):\n            total += arr[i]\n        return total\n\n    @jit(nopython=True)\n    def range2d(arr):\n        total = zero\n        m, n = arr.shape\n        for i in range(m):\n            for j in range(n):\n                total += arr[i, j]\n        return total\n\n    @jit(nopython=True)\n    def nditer1(a):\n        total = zero\n        for u in np.nditer(a):\n            total += u.item()\n        return total\n\n    @jit(nopython=True)\n    def nditer2(a, b):\n        total = zero\n        for u, v in np.nditer((a, b)):\n            total += u.item() * v.item()\n        return total\n\n    @jit(nopython=True)\n    def nditer3(a, b, out):\n        total = zero\n        for u, v, res in np.nditer((a, b, out)):\n            res.itemset(u.item() * v.item())\n        return total\n\n    @jit(nopython=True)\n    def zip_iter(a, b):\n        total = zero\n        for u, v in zip(a, b):\n            total += u * v\n        return total\n\n    @jit(nopython=True)\n    def zip_flat(a, b):\n        total = zero\n        for u, v in zip(a.flat, b.flat):\n            total += u * v\n        return total\n\n    globals().update(locals())",
            "name": "bench_iterating.MultiArrayIterators.time_zip_flat_two_2d_F_F",
            "number": 0,
            "param_names": [],
            "params": [],
            "processes": 2,
            "repeat": 0,
            "sample_time": 0.1,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds",
            "version": "f4b6a2bcd6789acd6256e9e999566be64e5b4ecc960b658626a1732cb7a76d3e",
            "warmup_time": -1
        },
        "bench_iterating.MultiArrayIterators.time_zip_iter_two_1d": {
            "code": "class MultiArrayIterators:\n    def time_zip_iter_two_1d(self):\n        zip_iter(arr1, arr1)\n\ndef setup():\n    from numba import jit\n\n\n    @jit(nopython=True)\n    def array_iter_1d(arr):\n        total = zero\n        for val in arr:\n            total += val\n        return total\n\n    @jit(nopython=True)\n    def flat_iter(arr):\n        total = zero\n        for val in arr.flat:\n            total += val\n        return total\n\n    @jit(nopython=True)\n    def flat_index(arr):\n        total = zero\n        flat = arr.flat\n        for i in range(arr.size):\n            total += flat[i]\n        return total\n\n    @jit(nopython=True)\n    def ndindex(arr):\n        total = zero\n        for ind in np.ndindex(arr.shape):\n            total += arr[ind]\n        return total\n\n    @jit(nopython=True)\n    def range1d(arr):\n        total = zero\n        n, = arr.shape\n        for i in range(n):\n            total += arr[i]\n        return total\n\n    @jit(nopython=True)\n    def range2d(arr):\n        total = zero\n        m, n = arr.shape\n        for i in range(m):\n            for j in range(n):\n                total += arr[i, j]\n        return total\n\n    @jit(nopython=True)\n    def nditer1(a):\n        total = zero\n        for u in np.nditer(a):\n            total += u.item()\n        return total\n\n    @jit(nopython=True)\n    def nditer2(a, b):\n        total = zero\n        for u, v in np.nditer((a, b)):\n            total += u.item() * v.item()\n        return total\n\n    @jit(nopython=True)\n    def nditer3(a, b, out):\n        total = zero\n        for u, v, res in np.nditer((a, b, out)):\n            res.itemset(u.item() * v.item())\n        return total\n\n    @jit(nopython=True)\n    def zip_iter(a, b):\n        total = zero\n        for u, v in zip(a, b):\n            total += u * v\n        return total\n\n    @jit(nopython=True)\n    def zip_flat(a, b):\n        total = zero\n        for u, v in zip(a.flat, b.flat):\n            total += u * v\n        return total\n\n    globals().update(locals())",
            "name": "bench_iterating.MultiArrayIterators.time_zip_iter_two_1d",
            "number": 0,
            "param_names": [],
            "params": [],
            "processes": 2,
            "repeat": 0,
            "sample_time": 0.1,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds",
            "version": "93bb77ccc5fe86a4494de9bc6852bdeaafb572d9beb4868b016bcdd04e7107da",
            "warmup_time": -1
        },
        "bench_laplace.Laplace.time_laplace": {
            "code": "class Laplace:\n    def time_laplace(self):\n        self.run_laplace(self.N, self.Niter)\n\ndef setup():\n    from numba import jit\n\n    global laplace\n\n    @jit(nopython=True)\n    def laplace(N, Niter):\n        u = np.zeros((N, N))\n        u[0] = 1\n        for i in range(Niter):\n            u[1:(-1), 1:(-1)] = ((((u[2:, 1:(-1)] + u[:(-2), 1:(-1)]) * dy2) +\n                                ((u[1:(-1), 2:] + u[1:(-1), :(-2)]) * dx2))\n                                / (2 * (dx2 + dy2)))\n        return u\n\nclass Laplace:\n    def setup(self):\n        # Warm up\n        self.run_laplace(10, 10)",
            "name": "bench_laplace.Laplace.time_laplace",
            "number": 0,
            "param_names": [],
            "params": [],
            "processes": 2,
            "repeat": 0,
            "sample_time": 0.1,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds",
            "version": "1c3e45673c275288aa44b7f493d4e5a82cc91cc7ac51da06b3c2cb49bd972c06",
            "warmup_time": -1
        },
        "bench_lists.ListConstruction.time_list_append": {
            "code": "class ListConstruction:\n    def time_list_append(self):\n        list_append(self.n, 0)\n\ndef setup():\n    from numba import jit\n\n    @jit(nopython=True)\n    def list_append(n, i):\n        l = []\n        for v in range(n):\n            l.append(v)\n        return l[i]\n\n    @jit(nopython=True)\n    def list_extend(n, i):\n        l = []\n        l.extend(range(n // 2))\n        l.extend(range(n // 2))\n        return l[i]\n\n    @jit(nopython=True)\n    def list_call(n, i):\n        l = list(range(n))\n        return l[i]\n\n\n    @jit(nopython=True)\n    def list_return(n):\n        return [0] * n\n\n    @jit(nopython=True)\n    def list_pop(n):\n        l = list(range(n))\n        v = 0\n        while len(l) > 0:\n            v = v ^ l.pop()\n        return v\n\n    @jit(nopython=True)\n    def list_insert(n, i):\n        l = [0]\n        for v in range(n):\n            l.insert(0, v)\n        return l[i]\n\n    globals().update(locals())\n\nclass ListConstruction:\n    def setup(self):\n        # Warm up\n        list_append(1, 0)\n        list_extend(1, 0)\n        list_call(1, 0)",
            "name": "bench_lists.ListConstruction.time_list_append",
            "number": 0,
            "param_names": [],
            "params": [],
            "processes": 2,
            "repeat": 0,
            "sample_time": 0.1,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds",
            "version": "81d1e85460ae03989565b3a1efdeefa7d1e2a722e896c0b2769a51fa4bf40c0c",
            "warmup_time": -1
        },
        "bench_lists.ListConstruction.time_list_call": {
            "code": "class ListConstruction:\n    def time_list_call(self):\n        list_call(self.n, 0)\n\ndef setup():\n    from numba import jit\n\n    @jit(nopython=True)\n    def list_append(n, i):\n        l = []\n        for v in range(n):\n            l.append(v)\n        return l[i]\n\n    @jit(nopython=True)\n    def list_extend(n, i):\n        l = []\n        l.extend(range(n // 2))\n        l.extend(range(n // 2))\n        return l[i]\n\n    @jit(nopython=True)\n    def list_call(n, i):\n        l = list(range(n))\n        return l[i]\n\n\n    @jit(nopython=True)\n    def list_return(n):\n        return [0] * n\n\n    @jit(nopython=True)\n    def list_pop(n):\n        l = list(range(n))\n        v = 0\n        while len(l) > 0:\n            v = v ^ l.pop()\n        return v\n\n    @jit(nopython=True)\n    def list_insert(n, i):\n        l = [0]\n        for v in range(n):\n            l.insert(0, v)\n        return l[i]\n\n    globals().update(locals())\n\nclass ListConstruction:\n    def setup(self):\n        # Warm up\n        list_append(1, 0)\n        list_extend(1, 0)\n        list_call(1, 0)",
            "name": "bench_lists.ListConstruction.time_list_call",
            "number": 0,
            "param_names": [],
            "params": [],
            "processes": 2,
            "repeat": 0,
            "sample_time": 0.1,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds",
            "version": "41b04d1cb2f5f74679d1dec5b320f33ebce22e06b9969b2d36f8ed6fc89bcd25",
            "warmup_time": -1
        },
        "bench_lists.ListConstruction.time_list_extend": {
            "code": "class ListConstruction:\n    def time_list_extend(self):\n        list_extend(self.n, 0)\n\ndef setup():\n    from numba import jit\n\n    @jit(nopython=True)\n    def list_append(n, i):\n        l = []\n        for v in range(n):\n            l.append(v)\n        return l[i]\n\n    @jit(nopython=True)\n    def list_extend(n, i):\n        l = []\n        l.extend(range(n // 2))\n        l.extend(range(n // 2))\n        return l[i]\n\n    @jit(nopython=True)\n    def list_call(n, i):\n        l = list(range(n))\n        return l[i]\n\n\n    @jit(nopython=True)\n    def list_return(n):\n        return [0] * n\n\n    @jit(nopython=True)\n    def list_pop(n):\n        l = list(range(n))\n        v = 0\n        while len(l) > 0:\n            v = v ^ l.pop()\n        return v\n\n    @jit(nopython=True)\n    def list_insert(n, i):\n        l = [0]\n        for v in range(n):\n            l.insert(0, v)\n        return l[i]\n\n    globals().update(locals())\n\nclass ListConstruction:\n    def setup(self):\n        # Warm up\n        list_append(1, 0)\n        list_extend(1, 0)\n        list_call(1, 0)",
            "name": "bench_lists.ListConstruction.time_list_extend",
            "number": 0,
            "param_names": [],
            "params": [],
            "processes": 2,
            "repeat": 0,
            "sample_time": 0.1,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds",
            "version": "0cc0f1deb7209a8752f2f939afdd2542486552bddb23b7b3407e7f7c23ea6128",
            "warmup_time": -1
        },
        "bench_lists.ListMutation.time_list_insert": {
            "code": "class ListMutation:\n    def time_list_insert(self):\n        # list.insert() is quadratic, so reduce the effort\n        list_insert(self.n // 10, 0)\n\ndef setup():\n    from numba import jit\n\n    @jit(nopython=True)\n    def list_append(n, i):\n        l = []\n        for v in range(n):\n            l.append(v)\n        return l[i]\n\n    @jit(nopython=True)\n    def list_extend(n, i):\n        l = []\n        l.extend(range(n // 2))\n        l.extend(range(n // 2))\n        return l[i]\n\n    @jit(nopython=True)\n    def list_call(n, i):\n        l = list(range(n))\n        return l[i]\n\n\n    @jit(nopython=True)\n    def list_return(n):\n        return [0] * n\n\n    @jit(nopython=True)\n    def list_pop(n):\n        l = list(range(n))\n        v = 0\n        while len(l) > 0:\n            v = v ^ l.pop()\n        return v\n\n    @jit(nopython=True)\n    def list_insert(n, i):\n        l = [0]\n        for v in range(n):\n            l.insert(0, v)\n        return l[i]\n\n    globals().update(locals())\n\nclass ListMutation:\n    def setup(self):\n        # Warm up\n        list_pop(1)\n        list_insert(1, 0)",
            "name": "bench_lists.ListMutation.time_list_insert",
            "number": 0,
            "param_names": [],
            "params": [],
            "processes": 2,
            "repeat": 0,
            "sample_time": 0.1,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds",
            "version": "63ce87c4b4a71a10593c6bc5b3ef7b531fc14d57313c35c8634feecb795826d9",
            "warmup_time": -1
        },
        "bench_lists.ListMutation.time_list_pop": {
            "code": "class ListMutation:\n    def time_list_pop(self):\n        list_pop(self.n)\n\ndef setup():\n    from numba import jit\n\n    @jit(nopython=True)\n    def list_append(n, i):\n        l = []\n        for v in range(n):\n            l.append(v)\n        return l[i]\n\n    @jit(nopython=True)\n    def list_extend(n, i):\n        l = []\n        l.extend(range(n // 2))\n        l.extend(range(n // 2))\n        return l[i]\n\n    @jit(nopython=True)\n    def list_call(n, i):\n        l = list(range(n))\n        return l[i]\n\n\n    @jit(nopython=True)\n    def list_return(n):\n        return [0] * n\n\n    @jit(nopython=True)\n    def list_pop(n):\n        l = list(range(n))\n        v = 0\n        while len(l) > 0:\n            v = v ^ l.pop()\n        return v\n\n    @jit(nopython=True)\n    def list_insert(n, i):\n        l = [0]\n        for v in range(n):\n            l.insert(0, v)\n        return l[i]\n\n    globals().update(locals())\n\nclass ListMutation:\n    def setup(self):\n        # Warm up\n        list_pop(1)\n        list_insert(1, 0)",
            "name": "bench_lists.ListMutation.time_list_pop",
            "number": 0,
            "param_names": [],
            "params": [],
            "processes": 2,
            "repeat": 0,
            "sample_time": 0.1,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds",
            "version": "9c7c06605e394adeda4f053accb71ec123fb5ac0f5abfa3d991094203f7f4ff4",
            "warmup_time": -1
        },
        "bench_lists.ListReturn.time_list_return": {
            "code": "class ListReturn:\n    def time_list_return(self):\n        list_return(self.n)\n\ndef setup():\n    from numba import jit\n\n    @jit(nopython=True)\n    def list_append(n, i):\n        l = []\n        for v in range(n):\n            l.append(v)\n        return l[i]\n\n    @jit(nopython=True)\n    def list_extend(n, i):\n        l = []\n        l.extend(range(n // 2))\n        l.extend(range(n // 2))\n        return l[i]\n\n    @jit(nopython=True)\n    def list_call(n, i):\n        l = list(range(n))\n        return l[i]\n\n\n    @jit(nopython=True)\n    def list_return(n):\n        return [0] * n\n\n    @jit(nopython=True)\n    def list_pop(n):\n        l = list(range(n))\n        v = 0\n        while len(l) > 0:\n            v = v ^ l.pop()\n        return v\n\n    @jit(nopython=True)\n    def list_insert(n, i):\n        l = [0]\n        for v in range(n):\n            l.insert(0, v)\n        return l[i]\n\n    globals().update(locals())\n\nclass ListReturn:\n    def setup(self):\n        # Warm up\n        list_return(1)",
            "name": "bench_lists.ListReturn.time_list_return",
            "number": 0,
            "param_names": [],
            "params": [],
            "processes": 2,
            "repeat": 0,
            "sample_time": 0.1,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds",
            "version": "8f0521aa8ff4ee06f39b72cea9dc63bd6d51ad2ad0aa8a67e738f8a16b427069",
            "warmup_time": -1
        },
        "bench_misc.IndirectIndexing.time_signed_indirect_indexing": {
            "code": "class IndirectIndexing:\n    def time_signed_indirect_indexing(self):\n        self.targets[:] = 0\n        grouped_sum(self.values, self.labels, self.targets)\n\ndef setup():\n    global grouped_sum\n    from numba import jit\n\n\n    @jit(nopython=True)\n    def grouped_sum(values, labels, target):\n        for i in range(len(values)):\n            idx = labels[i]\n            target[idx] += values[i]\n\nclass IndirectIndexing:\n    def setup(self):\n        n_in = 200000\n        n_out = 20\n        self.values = np.random.RandomState(0).randn(n_in)\n        self.labels = np.random.RandomState(0).randint(n_out, size=n_in).astype('intp')\n        self.unsigned_labels = self.labels.astype('uintp')\n        self.targets = np.zeros(n_out)\n        # Warm up JIT\n        grouped_sum(self.values, self.labels, self.targets)\n        grouped_sum(self.values, self.unsigned_labels, self.targets)",
            "name": "bench_misc.IndirectIndexing.time_signed_indirect_indexing",
            "number": 0,
            "param_names": [],
            "params": [],
            "processes": 2,
            "repeat": 0,
            "sample_time": 0.1,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds",
            "version": "c848c77d33aab0b9b9bb79e1844666967f106f8943626b9e847f24f3839fcce2",
            "warmup_time": -1
        },
        "bench_misc.IndirectIndexing.time_unsigned_indirect_indexing": {
            "code": "class IndirectIndexing:\n    def time_unsigned_indirect_indexing(self):\n        self.targets[:] = 0\n        grouped_sum(self.values, self.unsigned_labels, self.targets)\n\ndef setup():\n    global grouped_sum\n    from numba import jit\n\n\n    @jit(nopython=True)\n    def grouped_sum(values, labels, target):\n        for i in range(len(values)):\n            idx = labels[i]\n            target[idx] += values[i]\n\nclass IndirectIndexing:\n    def setup(self):\n        n_in = 200000\n        n_out = 20\n        self.values = np.random.RandomState(0).randn(n_in)\n        self.labels = np.random.RandomState(0).randint(n_out, size=n_in).astype('intp')\n        self.unsigned_labels = self.labels.astype('uintp')\n        self.targets = np.zeros(n_out)\n        # Warm up JIT\n        grouped_sum(self.values, self.labels, self.targets)\n        grouped_sum(self.values, self.unsigned_labels, self.targets)",
            "name": "bench_misc.IndirectIndexing.time_unsigned_indirect_indexing",
            "number": 0,
            "param_names": [],
            "params": [],
            "processes": 2,
            "repeat": 0,
            "sample_time": 0.1,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds",
            "version": "5a5fd45d00e6fd6e84f37c783f31fa82354a40613500cafea33317e71eb8ed8c",
            "warmup_time": -1
        },
        "bench_misc.InitializationTime.time_new_process_import_numba": {
            "code": "class InitializationTime:\n    def time_new_process_import_numba(self):\n        subprocess.check_call([sys.executable, \"-c\", \"from numba import jit\"])\n\ndef setup():\n    global grouped_sum\n    from numba import jit\n\n\n    @jit(nopython=True)\n    def grouped_sum(values, labels, target):\n        for i in range(len(values)):\n            idx = labels[i]\n            target[idx] += values[i]",
            "name": "bench_misc.InitializationTime.time_new_process_import_numba",
            "number": 1,
            "param_names": [],
            "params": [],
            "processes": 2,
            "repeat": 10,
            "sample_time": 0.1,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds",
            "version": "bce9fa53e164c1ce7493b320e141d2f1e9ee6b7785f68cad3656962726992b4e",
            "warmup_time": -1
        },
        "bench_nbody.NBody.time_numba_nbody": {
            "code": "class NBody:\n    def time_numba_nbody(self):\n        run_numba_nbody(self.positions, self.weights)\n\ndef setup():\n    global run_numba_nbody\n    from numba import jit, float32, float64\n\n    @jit\n    def run_numba_nbody(positions, weights):\n        accelerations = np.zeros_like(positions)\n        n = weights.shape[0]\n        for i in range(n):\n            ax = zero\n            ay = zero\n            for j in range(n):\n                rx = positions[j,0] - positions[i,0]\n                ry = positions[j,1] - positions[i,1]\n                sqr_dist = rx * rx + ry * ry + eps_2\n                sixth_dist = sqr_dist * sqr_dist * sqr_dist\n                inv_dist_cube = one / math.sqrt(sixth_dist)\n                s = weights[j] * inv_dist_cube\n                ax += s * rx\n                ay += s * ry\n            accelerations[i,0] = ax\n            accelerations[i,1] = ay\n        return accelerations\n\nclass NBody:\n    def setup(self):\n        # Sanity check our implementation\n        p, w = make_nbody_samples(10)\n        numba_res = run_numba_nbody(p, w)\n        numpy_res = run_numpy_nbody(p, w)\n        assert np.allclose(numba_res, numpy_res, 1e-4), (numba_res, numpy_res)\n        # Actual benchmark samples\n        self.positions, self.weights = make_nbody_samples(self.n_bodies)",
            "name": "bench_nbody.NBody.time_numba_nbody",
            "number": 0,
            "param_names": [],
            "params": [],
            "processes": 2,
            "repeat": 0,
            "sample_time": 0.1,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds",
            "version": "e43286be859ba1f38e7569048bc725b5eb72156a4ea458361d8b27f24b1f6d68",
            "warmup_time": -1
        },
        "bench_numbagg.Numbagg.time_move_nanmean": {
            "code": "class Numbagg:\n    def time_move_nanmean(self):\n        arr = some_nans\n        res = move_nanmean(arr, np.asarray(10))\n        assert res.shape == arr.shape\n\ndef setup():\n    \"\"\"\n    Precompile jitted functions.\n    \"\"\"\n    jit_setup()\n    nanmean(some_nans)",
            "name": "bench_numbagg.Numbagg.time_move_nanmean",
            "number": 0,
            "param_names": [],
            "params": [],
            "processes": 2,
            "repeat": 0,
            "sample_time": 0.1,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds",
            "version": "7c3ce09b1d7140d12d3b89e7c9b4ae0f62405ba1b8d40e936914f53502878bb5",
            "warmup_time": -1
        },
        "bench_numbagg.Numbagg.time_move_nanmean_2d": {
            "code": "class Numbagg:\n    def time_move_nanmean_2d(self):\n        arr = some_nans_2d\n        res = move_nanmean(arr, np.asarray(10))\n        assert res.shape == arr.shape\n\ndef setup():\n    \"\"\"\n    Precompile jitted functions.\n    \"\"\"\n    jit_setup()\n    nanmean(some_nans)",
            "name": "bench_numbagg.Numbagg.time_move_nanmean_2d",
            "number": 0,
            "param_names": [],
            "params": [],
            "processes": 2,
            "repeat": 0,
            "sample_time": 0.1,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds",
            "version": "9127f5a63a112bd27ed69d021e9875e9dfde44475e963ed382178fd36fa134a5",
            "warmup_time": -1
        },
        "bench_numbagg.Numbagg.time_nanmean_gufunc": {
            "code": "class Numbagg:\n    def time_nanmean_gufunc(self):\n        gu_nanmean(some_nans_2d)\n\ndef setup():\n    \"\"\"\n    Precompile jitted functions.\n    \"\"\"\n    jit_setup()\n    nanmean(some_nans)",
            "name": "bench_numbagg.Numbagg.time_nanmean_gufunc",
            "number": 0,
            "param_names": [],
            "params": [],
            "processes": 2,
            "repeat": 0,
            "sample_time": 0.1,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds",
            "version": "b4b856c084a01b144074378186f27cd92845d0e7a0f36ed890bf53dfe616ba13",
            "warmup_time": -1
        },
        "bench_numbagg.Numbagg.time_nanmean_jit_1d": {
            "code": "class Numbagg:\n    def time_nanmean_jit_1d(self):\n        nanmean(some_nans)\n\ndef setup():\n    \"\"\"\n    Precompile jitted functions.\n    \"\"\"\n    jit_setup()\n    nanmean(some_nans)",
            "name": "bench_numbagg.Numbagg.time_nanmean_jit_1d",
            "number": 0,
            "param_names": [],
            "params": [],
            "processes": 2,
            "repeat": 0,
            "sample_time": 0.1,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds",
            "version": "9deb090b8969c471dcdbed8d23d1a3fe9562af667973290c88625433a45c23da",
            "warmup_time": -1
        },
        "bench_numbagg.Numbagg.time_nanmean_jit_2d": {
            "code": "class Numbagg:\n    def time_nanmean_jit_2d(self):\n        nanmean(some_nans_2d)\n\ndef setup():\n    \"\"\"\n    Precompile jitted functions.\n    \"\"\"\n    jit_setup()\n    nanmean(some_nans)",
            "name": "bench_numbagg.Numbagg.time_nanmean_jit_2d",
            "number": 0,
            "param_names": [],
            "params": [],
            "processes": 2,
            "repeat": 0,
            "sample_time": 0.1,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds",
            "version": "67abe608cfcd4166f2e1c37f0f254d34b18fd9521fbdf1d13d99d32762726efc",
            "warmup_time": -1
        },
        "bench_numbagg.Numbagg.time_nanmean_jit_2d_reversed": {
            "code": "class Numbagg:\n    def time_nanmean_jit_2d_reversed(self):\n        nanmean(some_nans_2d_reversed)\n\ndef setup():\n    \"\"\"\n    Precompile jitted functions.\n    \"\"\"\n    jit_setup()\n    nanmean(some_nans)",
            "name": "bench_numbagg.Numbagg.time_nanmean_jit_2d_reversed",
            "number": 0,
            "param_names": [],
            "params": [],
            "processes": 2,
            "repeat": 0,
            "sample_time": 0.1,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds",
            "version": "485ad96473144c1690a1975b21c7b159b1a96080adc9b9b15b86100e9ee70b70",
            "warmup_time": -1
        },
        "bench_random.RandomIntegers.time_py_getrandbits": {
            "code": "class RandomIntegers:\n    def time_py_getrandbits(self):\n        py_getrandbits(42, 100000)\n\ndef setup():\n    global py_getrandbits\n    from numba import jit\n\n    @jit(nopython=True)\n    def py_getrandbits(seed, n):\n        random.seed(seed)\n        s = 0\n        for i in range(n):\n            s += random.getrandbits(32)\n        return s\n\nclass RandomIntegers:\n    def setup(self):\n        # Warm up\n        py_getrandbits(42, 1)",
            "name": "bench_random.RandomIntegers.time_py_getrandbits",
            "number": 0,
            "param_names": [],
            "params": [],
            "processes": 2,
            "repeat": 0,
            "sample_time": 0.1,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds",
            "version": "ca0d32ce1f58b2169f647c1f3360c34b836dd8e09a124aab8eb9e4ad0ef7fa56",
            "warmup_time": -1
        },
        "bench_sets.IntegerSets.time_setops": {
            "code": "class IntegerSets:\n    def time_setops(self):\n        self.run_setops(self.N)\n\ndef setup():\n    global unique, setops\n    from numba import jit\n\n    # Set benchmarks\n    # Notes:\n    # - unless we want to benchmark marshalling a set or list back to Python,\n    #   we return a single value to avoid conversion costs\n\n    @jit(nopython=True)\n    def unique(seq):\n        l = []\n        seen = set()\n        for v in seq:\n            if v not in seen:\n                seen.add(v)\n                l.append(v)\n        return l[-1]\n\n\n    @jit(nopython=True)\n    def setops(a, b):\n        sa = set(a)\n        sb = set(b)\n        return len(sa & sb), len(sa | sb), len(sa ^ sb), len(sa - sb), len(sb - sa)\n\nclass IntegerSets:\n    def setup(self):\n        self.rnd = np.random.RandomState(42)\n        self.seq = self.duplicates_array(self.N)\n        self.a = self.sparse_array(self.N)\n        self.b = self.sparse_array(self.N)\n        # Warm up\n        self.run_unique(5)\n        self.run_setops(5)",
            "name": "bench_sets.IntegerSets.time_setops",
            "number": 0,
            "param_names": [],
            "params": [],
            "processes": 2,
            "repeat": 0,
            "sample_time": 0.1,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds",
            "version": "810664299484441ef9d0bd4f2b51beaa27379f428d37260e7d6554809f69d369",
            "warmup_time": -1
        },
        "bench_sets.IntegerSets.time_unique": {
            "code": "class IntegerSets:\n    def time_unique(self):\n        self.run_unique(self.N)\n\ndef setup():\n    global unique, setops\n    from numba import jit\n\n    # Set benchmarks\n    # Notes:\n    # - unless we want to benchmark marshalling a set or list back to Python,\n    #   we return a single value to avoid conversion costs\n\n    @jit(nopython=True)\n    def unique(seq):\n        l = []\n        seen = set()\n        for v in seq:\n            if v not in seen:\n                seen.add(v)\n                l.append(v)\n        return l[-1]\n\n\n    @jit(nopython=True)\n    def setops(a, b):\n        sa = set(a)\n        sb = set(b)\n        return len(sa & sb), len(sa | sb), len(sa ^ sb), len(sa - sb), len(sb - sa)\n\nclass IntegerSets:\n    def setup(self):\n        self.rnd = np.random.RandomState(42)\n        self.seq = self.duplicates_array(self.N)\n        self.a = self.sparse_array(self.N)\n        self.b = self.sparse_array(self.N)\n        # Warm up\n        self.run_unique(5)\n        self.run_setops(5)",
            "name": "bench_sets.IntegerSets.time_unique",
            "number": 0,
            "param_names": [],
            "params": [],
            "processes": 2,
            "repeat": 0,
            "sample_time": 0.1,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds",
            "version": "8aa4862ecb96c398d19ff83a1f3ea8b49116bf1c349397fd6f09593680007584",
            "warmup_time": -1
        },
        "bench_sorting.ArrayMedian.time_median_duplicates_array": {
            "code": "class ArrayMedian:\n    def time_median_duplicates_array(self):\n        \"\"\"\n        Median of a random array with many duplicates.\n        \"\"\"\n        median(self.duplicates_array)\n\ndef setup():\n    from numba import jit\n\n\n    @jit(nopython=True)\n    def real_sort(x):\n        x.sort()\n\n    def sort(x):\n        # We *have* to do a copy, otherwise repeating the benchmark will\n        # produce skewed results in the later iterations, as an already-sorted\n        # array will be passed.\n        # We prefer do the copying outside of the JITted function, as we want\n        # to measure sort() performance, not the performance of Numba's copy().\n        real_sort(x.copy())\n\n    @jit(nopython=True)\n    def argsort(x):\n        return x.argsort()\n\n    @jit(nopython=True)\n    def median(x):\n        return np.median(x)\n\n    globals().update(locals())\n\nclass ArrayMedian:\n    def setup(self):\n        BaseArraySorting.setup(self)\n        # Warm up\n        dummy = np.arange(10, dtype=self.dtype)\n        median(dummy)",
            "name": "bench_sorting.ArrayMedian.time_median_duplicates_array",
            "number": 0,
            "param_names": [],
            "params": [],
            "processes": 2,
            "repeat": 0,
            "sample_time": 0.1,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds",
            "version": "7c55a6ddcbdcf4e4351d85f1021e222398898e9212806612eff8ea58d346dae7",
            "warmup_time": -1
        },
        "bench_sorting.ArrayMedian.time_median_random_array_even": {
            "code": "class ArrayMedian:\n    def time_median_random_array_even(self):\n        \"\"\"\n        Median of an even-sized random array.\n        \"\"\"\n        arr = self.random_array\n        assert arr.size & 1 == 0\n        median(arr)\n\ndef setup():\n    from numba import jit\n\n\n    @jit(nopython=True)\n    def real_sort(x):\n        x.sort()\n\n    def sort(x):\n        # We *have* to do a copy, otherwise repeating the benchmark will\n        # produce skewed results in the later iterations, as an already-sorted\n        # array will be passed.\n        # We prefer do the copying outside of the JITted function, as we want\n        # to measure sort() performance, not the performance of Numba's copy().\n        real_sort(x.copy())\n\n    @jit(nopython=True)\n    def argsort(x):\n        return x.argsort()\n\n    @jit(nopython=True)\n    def median(x):\n        return np.median(x)\n\n    globals().update(locals())\n\nclass ArrayMedian:\n    def setup(self):\n        BaseArraySorting.setup(self)\n        # Warm up\n        dummy = np.arange(10, dtype=self.dtype)\n        median(dummy)",
            "name": "bench_sorting.ArrayMedian.time_median_random_array_even",
            "number": 0,
            "param_names": [],
            "params": [],
            "processes": 2,
            "repeat": 0,
            "sample_time": 0.1,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds",
            "version": "d6aaca5f4788a019faac395aafa223252501c6870fc6a8ac2b1e23d30dfc3977",
            "warmup_time": -1
        },
        "bench_sorting.ArrayMedian.time_median_random_array_odd": {
            "code": "class ArrayMedian:\n    def time_median_random_array_odd(self):\n        \"\"\"\n        Median of an odd-sized random array.\n        \"\"\"\n        arr = self.random_array[:-1]\n        assert arr.size & 1 == 1\n        median(arr)\n\ndef setup():\n    from numba import jit\n\n\n    @jit(nopython=True)\n    def real_sort(x):\n        x.sort()\n\n    def sort(x):\n        # We *have* to do a copy, otherwise repeating the benchmark will\n        # produce skewed results in the later iterations, as an already-sorted\n        # array will be passed.\n        # We prefer do the copying outside of the JITted function, as we want\n        # to measure sort() performance, not the performance of Numba's copy().\n        real_sort(x.copy())\n\n    @jit(nopython=True)\n    def argsort(x):\n        return x.argsort()\n\n    @jit(nopython=True)\n    def median(x):\n        return np.median(x)\n\n    globals().update(locals())\n\nclass ArrayMedian:\n    def setup(self):\n        BaseArraySorting.setup(self)\n        # Warm up\n        dummy = np.arange(10, dtype=self.dtype)\n        median(dummy)",
            "name": "bench_sorting.ArrayMedian.time_median_random_array_odd",
            "number": 0,
            "param_names": [],
            "params": [],
            "processes": 2,
            "repeat": 0,
            "sample_time": 0.1,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds",
            "version": "52af579d33d02db32c27cd13bcf51e6642de38d3f6ae5f77b2afbf4caa48da66",
            "warmup_time": -1
        },
        "bench_sorting.ArrayMedian.time_median_sorted_array": {
            "code": "class ArrayMedian:\n    def time_median_sorted_array(self):\n        \"\"\"\n        Median of a sorted array.\n        \"\"\"\n        median(self.sorted_array)\n\ndef setup():\n    from numba import jit\n\n\n    @jit(nopython=True)\n    def real_sort(x):\n        x.sort()\n\n    def sort(x):\n        # We *have* to do a copy, otherwise repeating the benchmark will\n        # produce skewed results in the later iterations, as an already-sorted\n        # array will be passed.\n        # We prefer do the copying outside of the JITted function, as we want\n        # to measure sort() performance, not the performance of Numba's copy().\n        real_sort(x.copy())\n\n    @jit(nopython=True)\n    def argsort(x):\n        return x.argsort()\n\n    @jit(nopython=True)\n    def median(x):\n        return np.median(x)\n\n    globals().update(locals())\n\nclass ArrayMedian:\n    def setup(self):\n        BaseArraySorting.setup(self)\n        # Warm up\n        dummy = np.arange(10, dtype=self.dtype)\n        median(dummy)",
            "name": "bench_sorting.ArrayMedian.time_median_sorted_array",
            "number": 0,
            "param_names": [],
            "params": [],
            "processes": 2,
            "repeat": 0,
            "sample_time": 0.1,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds",
            "version": "38180194e8239497e7b3c9f0d5c0c4f5c7dfa27c3e7873d6d570cd9818fbfe03",
            "warmup_time": -1
        },
        "bench_sorting.ArrayMedian.time_median_triangle_array": {
            "code": "class ArrayMedian:\n    def time_median_triangle_array(self):\n        \"\"\"\n        Median of a \"triangular\" array: ascending then descending.\n        \"\"\"\n        median(self.triangle_array)\n\ndef setup():\n    from numba import jit\n\n\n    @jit(nopython=True)\n    def real_sort(x):\n        x.sort()\n\n    def sort(x):\n        # We *have* to do a copy, otherwise repeating the benchmark will\n        # produce skewed results in the later iterations, as an already-sorted\n        # array will be passed.\n        # We prefer do the copying outside of the JITted function, as we want\n        # to measure sort() performance, not the performance of Numba's copy().\n        real_sort(x.copy())\n\n    @jit(nopython=True)\n    def argsort(x):\n        return x.argsort()\n\n    @jit(nopython=True)\n    def median(x):\n        return np.median(x)\n\n    globals().update(locals())\n\nclass ArrayMedian:\n    def setup(self):\n        BaseArraySorting.setup(self)\n        # Warm up\n        dummy = np.arange(10, dtype=self.dtype)\n        median(dummy)",
            "name": "bench_sorting.ArrayMedian.time_median_triangle_array",
            "number": 0,
            "param_names": [],
            "params": [],
            "processes": 2,
            "repeat": 0,
            "sample_time": 0.1,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds",
            "version": "cfda6aceb4c5764c6c53e7a0a2619ec9470d9cc913ee8e0ae70143d0ca9f1d7a",
            "warmup_time": -1
        },
        "bench_sorting.ArraySorting.time_argsort_random_array": {
            "code": "class ArraySorting:\n    def time_argsort_random_array(self):\n        \"\"\"\n        Arg-sort a random array.\n        \"\"\"\n        argsort(self.random_array)\n\ndef setup():\n    from numba import jit\n\n\n    @jit(nopython=True)\n    def real_sort(x):\n        x.sort()\n\n    def sort(x):\n        # We *have* to do a copy, otherwise repeating the benchmark will\n        # produce skewed results in the later iterations, as an already-sorted\n        # array will be passed.\n        # We prefer do the copying outside of the JITted function, as we want\n        # to measure sort() performance, not the performance of Numba's copy().\n        real_sort(x.copy())\n\n    @jit(nopython=True)\n    def argsort(x):\n        return x.argsort()\n\n    @jit(nopython=True)\n    def median(x):\n        return np.median(x)\n\n    globals().update(locals())\n\nclass ArraySorting:\n    def setup(self):\n        BaseArraySorting.setup(self)\n        # Warm up\n        dummy = np.arange(10, dtype=self.dtype)\n        sort(dummy)\n        argsort(dummy)",
            "name": "bench_sorting.ArraySorting.time_argsort_random_array",
            "number": 0,
            "param_names": [],
            "params": [],
            "processes": 2,
            "repeat": 0,
            "sample_time": 0.1,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds",
            "version": "b00a8d924025676739ee661c08a5f49f91ce9d1f3b42e5ccad383247c8cd3664",
            "warmup_time": -1
        },
        "bench_sorting.ArraySorting.time_sort_duplicates_array": {
            "code": "class ArraySorting:\n    def time_sort_duplicates_array(self):\n        \"\"\"\n        Sort a random array with many duplicates.\n        \"\"\"\n        sort(self.duplicates_array)\n\ndef setup():\n    from numba import jit\n\n\n    @jit(nopython=True)\n    def real_sort(x):\n        x.sort()\n\n    def sort(x):\n        # We *have* to do a copy, otherwise repeating the benchmark will\n        # produce skewed results in the later iterations, as an already-sorted\n        # array will be passed.\n        # We prefer do the copying outside of the JITted function, as we want\n        # to measure sort() performance, not the performance of Numba's copy().\n        real_sort(x.copy())\n\n    @jit(nopython=True)\n    def argsort(x):\n        return x.argsort()\n\n    @jit(nopython=True)\n    def median(x):\n        return np.median(x)\n\n    globals().update(locals())\n\nclass ArraySorting:\n    def setup(self):\n        BaseArraySorting.setup(self)\n        # Warm up\n        dummy = np.arange(10, dtype=self.dtype)\n        sort(dummy)\n        argsort(dummy)",
            "name": "bench_sorting.ArraySorting.time_sort_duplicates_array",
            "number": 0,
            "param_names": [],
            "params": [],
            "processes": 2,
            "repeat": 0,
            "sample_time": 0.1,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds",
            "version": "6219a390b08997066efe5e3d40607bc50ef45b877d526d1f793a7eea4d72ac4a",
            "warmup_time": -1
        },
        "bench_sorting.ArraySorting.time_sort_random_array": {
            "code": "class ArraySorting:\n    def time_sort_random_array(self):\n        \"\"\"\n        Sort a random array.\n        \"\"\"\n        sort(self.random_array)\n\ndef setup():\n    from numba import jit\n\n\n    @jit(nopython=True)\n    def real_sort(x):\n        x.sort()\n\n    def sort(x):\n        # We *have* to do a copy, otherwise repeating the benchmark will\n        # produce skewed results in the later iterations, as an already-sorted\n        # array will be passed.\n        # We prefer do the copying outside of the JITted function, as we want\n        # to measure sort() performance, not the performance of Numba's copy().\n        real_sort(x.copy())\n\n    @jit(nopython=True)\n    def argsort(x):\n        return x.argsort()\n\n    @jit(nopython=True)\n    def median(x):\n        return np.median(x)\n\n    globals().update(locals())\n\nclass ArraySorting:\n    def setup(self):\n        BaseArraySorting.setup(self)\n        # Warm up\n        dummy = np.arange(10, dtype=self.dtype)\n        sort(dummy)\n        argsort(dummy)",
            "name": "bench_sorting.ArraySorting.time_sort_random_array",
            "number": 0,
            "param_names": [],
            "params": [],
            "processes": 2,
            "repeat": 0,
            "sample_time": 0.1,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds",
            "version": "b9b7668f705e26583a4fcfaabca4d0dd1f5dadb69001699777113d5f4d311731",
            "warmup_time": -1
        },
        "bench_sorting.ArraySorting.time_sort_sorted_array": {
            "code": "class ArraySorting:\n    def time_sort_sorted_array(self):\n        \"\"\"\n        Sort an already sorted array.\n        \"\"\"\n        sort(self.sorted_array)\n\ndef setup():\n    from numba import jit\n\n\n    @jit(nopython=True)\n    def real_sort(x):\n        x.sort()\n\n    def sort(x):\n        # We *have* to do a copy, otherwise repeating the benchmark will\n        # produce skewed results in the later iterations, as an already-sorted\n        # array will be passed.\n        # We prefer do the copying outside of the JITted function, as we want\n        # to measure sort() performance, not the performance of Numba's copy().\n        real_sort(x.copy())\n\n    @jit(nopython=True)\n    def argsort(x):\n        return x.argsort()\n\n    @jit(nopython=True)\n    def median(x):\n        return np.median(x)\n\n    globals().update(locals())\n\nclass ArraySorting:\n    def setup(self):\n        BaseArraySorting.setup(self)\n        # Warm up\n        dummy = np.arange(10, dtype=self.dtype)\n        sort(dummy)\n        argsort(dummy)",
            "name": "bench_sorting.ArraySorting.time_sort_sorted_array",
            "number": 0,
            "param_names": [],
            "params": [],
            "processes": 2,
            "repeat": 0,
            "sample_time": 0.1,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds",
            "version": "1d688918ae012b6ef28b45ba2d08c6a1a23102d1df5c7e443b423b63ca09db35",
            "warmup_time": -1
        },
        "bench_sorting.ArraySorting.time_sort_triangle_array": {
            "code": "class ArraySorting:\n    def time_sort_triangle_array(self):\n        \"\"\"\n        Sort a \"triangular\" array: ascending then descending.\n        \"\"\"\n        sort(self.triangle_array)\n\ndef setup():\n    from numba import jit\n\n\n    @jit(nopython=True)\n    def real_sort(x):\n        x.sort()\n\n    def sort(x):\n        # We *have* to do a copy, otherwise repeating the benchmark will\n        # produce skewed results in the later iterations, as an already-sorted\n        # array will be passed.\n        # We prefer do the copying outside of the JITted function, as we want\n        # to measure sort() performance, not the performance of Numba's copy().\n        real_sort(x.copy())\n\n    @jit(nopython=True)\n    def argsort(x):\n        return x.argsort()\n\n    @jit(nopython=True)\n    def median(x):\n        return np.median(x)\n\n    globals().update(locals())\n\nclass ArraySorting:\n    def setup(self):\n        BaseArraySorting.setup(self)\n        # Warm up\n        dummy = np.arange(10, dtype=self.dtype)\n        sort(dummy)\n        argsort(dummy)",
            "name": "bench_sorting.ArraySorting.time_sort_triangle_array",
            "number": 0,
            "param_names": [],
            "params": [],
            "processes": 2,
            "repeat": 0,
            "sample_time": 0.1,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds",
            "version": "51453ec5e519d7276da22b4e98d6b5bc1ce8f16c1fc99769713d008ea570ea34",
            "warmup_time": -1
        },
        "bench_vectorize.Vectorize.time_mul_complex128": {
            "code": "class <locals>:\n    def f(self):\n        func = globals()[fname]\n        func(self.samples[dtype], self.samples[dtype], self.out[dtype])\n\ndef setup():\n    global mul, rel_diff\n\n    from numba import vectorize\n\n    @vectorize([\"float32(float32, float32)\",\n                \"float64(float64, float64)\",\n                \"complex64(complex64, complex64)\",\n                \"complex128(complex128, complex128)\"])\n    def mul(x, y):\n        return x * y\n\n    @vectorize([\"float32(float32, float32)\",\n                \"float64(float64, float64)\"])\n    def rel_diff(x, y):\n        # XXX for float32 performance, we should write `np.float32(2)`, but\n        # that's not the natural way to write this code...\n        return 2 * (x - y) / (x + y)\n\nclass Vectorize:\n    def setup(self):\n        setup()\n        self.samples = {}\n        self.out = {}\n        for dtype in self.dtypes:\n            self.samples[dtype] = np.linspace(0.1, 1, self.n, dtype=dtype)\n            self.out[dtype] = np.zeros(self.n, dtype=dtype)",
            "name": "bench_vectorize.Vectorize.time_mul_complex128",
            "number": 0,
            "param_names": [],
            "params": [],
            "processes": 2,
            "repeat": 0,
            "sample_time": 0.1,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds",
            "version": "5fa667beeb57515700d2b77e2ce9f6439ff228b071091fa11ea71b68ada86079",
            "warmup_time": -1
        },
        "bench_vectorize.Vectorize.time_mul_complex64": {
            "code": "class <locals>:\n    def f(self):\n        func = globals()[fname]\n        func(self.samples[dtype], self.samples[dtype], self.out[dtype])\n\ndef setup():\n    global mul, rel_diff\n\n    from numba import vectorize\n\n    @vectorize([\"float32(float32, float32)\",\n                \"float64(float64, float64)\",\n                \"complex64(complex64, complex64)\",\n                \"complex128(complex128, complex128)\"])\n    def mul(x, y):\n        return x * y\n\n    @vectorize([\"float32(float32, float32)\",\n                \"float64(float64, float64)\"])\n    def rel_diff(x, y):\n        # XXX for float32 performance, we should write `np.float32(2)`, but\n        # that's not the natural way to write this code...\n        return 2 * (x - y) / (x + y)\n\nclass Vectorize:\n    def setup(self):\n        setup()\n        self.samples = {}\n        self.out = {}\n        for dtype in self.dtypes:\n            self.samples[dtype] = np.linspace(0.1, 1, self.n, dtype=dtype)\n            self.out[dtype] = np.zeros(self.n, dtype=dtype)",
            "name": "bench_vectorize.Vectorize.time_mul_complex64",
            "number": 0,
            "param_names": [],
            "params": [],
            "processes": 2,
            "repeat": 0,
            "sample_time": 0.1,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds",
            "version": "5fa667beeb57515700d2b77e2ce9f6439ff228b071091fa11ea71b68ada86079",
            "warmup_time": -1
        },
        "bench_vectorize.Vectorize.time_mul_float32": {
            "code": "class <locals>:\n    def f(self):\n        func = globals()[fname]\n        func(self.samples[dtype], self.samples[dtype], self.out[dtype])\n\ndef setup():\n    global mul, rel_diff\n\n    from numba import vectorize\n\n    @vectorize([\"float32(float32, float32)\",\n                \"float64(float64, float64)\",\n                \"complex64(complex64, complex64)\",\n                \"complex128(complex128, complex128)\"])\n    def mul(x, y):\n        return x * y\n\n    @vectorize([\"float32(float32, float32)\",\n                \"float64(float64, float64)\"])\n    def rel_diff(x, y):\n        # XXX for float32 performance, we should write `np.float32(2)`, but\n        # that's not the natural way to write this code...\n        return 2 * (x - y) / (x + y)\n\nclass Vectorize:\n    def setup(self):\n        setup()\n        self.samples = {}\n        self.out = {}\n        for dtype in self.dtypes:\n            self.samples[dtype] = np.linspace(0.1, 1, self.n, dtype=dtype)\n            self.out[dtype] = np.zeros(self.n, dtype=dtype)",
            "name": "bench_vectorize.Vectorize.time_mul_float32",
            "number": 0,
            "param_names": [],
            "params": [],
            "processes": 2,
            "repeat": 0,
            "sample_time": 0.1,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds",
            "version": "5fa667beeb57515700d2b77e2ce9f6439ff228b071091fa11ea71b68ada86079",
            "warmup_time": -1
        },
        "bench_vectorize.Vectorize.time_mul_float64": {
            "code": "class <locals>:\n    def f(self):\n        func = globals()[fname]\n        func(self.samples[dtype], self.samples[dtype], self.out[dtype])\n\ndef setup():\n    global mul, rel_diff\n\n    from numba import vectorize\n\n    @vectorize([\"float32(float32, float32)\",\n                \"float64(float64, float64)\",\n                \"complex64(complex64, complex64)\",\n                \"complex128(complex128, complex128)\"])\n    def mul(x, y):\n        return x * y\n\n    @vectorize([\"float32(float32, float32)\",\n                \"float64(float64, float64)\"])\n    def rel_diff(x, y):\n        # XXX for float32 performance, we should write `np.float32(2)`, but\n        # that's not the natural way to write this code...\n        return 2 * (x - y) / (x + y)\n\nclass Vectorize:\n    def setup(self):\n        setup()\n        self.samples = {}\n        self.out = {}\n        for dtype in self.dtypes:\n            self.samples[dtype] = np.linspace(0.1, 1, self.n, dtype=dtype)\n            self.out[dtype] = np.zeros(self.n, dtype=dtype)",
            "name": "bench_vectorize.Vectorize.time_mul_float64",
            "number": 0,
            "param_names": [],
            "params": [],
            "processes": 2,
            "repeat": 0,
            "sample_time": 0.1,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds",
            "version": "5fa667beeb57515700d2b77e2ce9f6439ff228b071091fa11ea71b68ada86079",
            "warmup_time": -1
        },
        "bench_vectorize.Vectorize.time_rel_diff_float32": {
            "code": "class <locals>:\n    def f(self):\n        func = globals()[fname]\n        func(self.samples[dtype], self.samples[dtype], self.out[dtype])\n\ndef setup():\n    global mul, rel_diff\n\n    from numba import vectorize\n\n    @vectorize([\"float32(float32, float32)\",\n                \"float64(float64, float64)\",\n                \"complex64(complex64, complex64)\",\n                \"complex128(complex128, complex128)\"])\n    def mul(x, y):\n        return x * y\n\n    @vectorize([\"float32(float32, float32)\",\n                \"float64(float64, float64)\"])\n    def rel_diff(x, y):\n        # XXX for float32 performance, we should write `np.float32(2)`, but\n        # that's not the natural way to write this code...\n        return 2 * (x - y) / (x + y)\n\nclass Vectorize:\n    def setup(self):\n        setup()\n        self.samples = {}\n        self.out = {}\n        for dtype in self.dtypes:\n            self.samples[dtype] = np.linspace(0.1, 1, self.n, dtype=dtype)\n            self.out[dtype] = np.zeros(self.n, dtype=dtype)",
            "name": "bench_vectorize.Vectorize.time_rel_diff_float32",
            "number": 0,
            "param_names": [],
            "params": [],
            "processes": 2,
            "repeat": 0,
            "sample_time": 0.1,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds",
            "version": "5fa667beeb57515700d2b77e2ce9f6439ff228b071091fa11ea71b68ada86079",
            "warmup_time": -1
        },
        "bench_vectorize.Vectorize.time_rel_diff_float64": {
            "code": "class <locals>:\n    def f(self):\n        func = globals()[fname]\n        func(self.samples[dtype], self.samples[dtype], self.out[dtype])\n\ndef setup():\n    global mul, rel_diff\n\n    from numba import vectorize\n\n    @vectorize([\"float32(float32, float32)\",\n                \"float64(float64, float64)\",\n                \"complex64(complex64, complex64)\",\n                \"complex128(complex128, complex128)\"])\n    def mul(x, y):\n        return x * y\n\n    @vectorize([\"float32(float32, float32)\",\n                \"float64(float64, float64)\"])\n    def rel_diff(x, y):\n        # XXX for float32 performance, we should write `np.float32(2)`, but\n        # that's not the natural way to write this code...\n        return 2 * (x - y) / (x + y)\n\nclass Vectorize:\n    def setup(self):\n        setup()\n        self.samples = {}\n        self.out = {}\n        for dtype in self.dtypes:\n            self.samples[dtype] = np.linspace(0.1, 1, self.n, dtype=dtype)\n            self.out[dtype] = np.zeros(self.n, dtype=dtype)",
            "name": "bench_vectorize.Vectorize.time_rel_diff_float64",
            "number": 0,
            "param_names": [],
            "params": [],
            "processes": 2,
            "repeat": 0,
            "sample_time": 0.1,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds",
            "version": "5fa667beeb57515700d2b77e2ce9f6439ff228b071091fa11ea71b68ada86079",
            "warmup_time": -1
        }
    },
    "graph_param_list": [
        {
            "arch": "x86_64",
            "branch": "master",
            "cpu": "Intel(R) Core(TM) i7-4820K CPU @ 3.70GHz",
            "cudatoolkit": "",
            "llvmlite": "",
            "llvmpy": null,
            "machine": "nvidia1",
            "numpy": "",
            "os": "Linux 3.13.0-54-generic",
            "python": "3.6",
            "ram": "32886064"
        },
        {
            "arch": "x86_64",
            "branch": "master",
            "cpu": "Intel(R) Core(TM) i7-4820K CPU @ 3.70GHz",
            "cudatoolkit": "",
            "llvmlite": "",
            "llvmpy": "",
            "machine": "nvidia1",
            "numpy": "",
            "os": "Linux 3.11.0-15-generic",
            "python": "3.4",
            "ram": "32885840"
        },
        {
            "arch": "x86_64",
            "branch": "master",
            "cpu": "Intel(R) Core(TM) i7-4820K CPU @ 3.70GHz",
            "cudatoolkit": "",
            "llvmlite": "",
            "llvmpy": null,
            "machine": "nvidia1",
            "numpy": "",
            "os": "Linux 3.13.0-54-generic",
            "python": "3.5",
            "ram": "32886064"
        }
    ],
    "hash_length": 8,
    "machines": {
        "nvidia1": {
            "arch": "x86_64",
            "cpu": "Intel(R) Core(TM) i7-4820K CPU @ 3.70GHz",
            "machine": "nvidia1",
            "os": "Linux 3.13.0-54-generic",
            "ram": "32886064",
            "version": 1
        }
    },
    "pages": [
        [
            "",
            "Grid view",
            "Display as a agrid"
        ],
        [
            "summarylist",
            "List view",
            "Display as a list"
        ],
        [
            "regressions",
            "Show regressions",
            "Display information about recent regressions"
        ]
    ],
    "params": {
        "arch": [
            "x86_64"
        ],
        "branch": [
            "master"
        ],
        "cpu": [
            "Intel(R) Core(TM) i7-4820K CPU @ 3.70GHz"
        ],
        "cudatoolkit": [
            ""
        ],
        "llvmlite": [
            ""
        ],
        "llvmpy": [
            "",
            null
        ],
        "machine": [
            "nvidia1"
        ],
        "numpy": [
            ""
        ],
        "os": [
            "Linux 3.11.0-15-generic",
            "Linux 3.13.0-54-generic"
        ],
        "python": [
            "3.4",
            "3.5",
            "3.6"
        ],
        "ram": [
            "32885840",
            "32886064"
        ]
    },
    "project": "numba",
    "project_url": "http://numba.pydata.org/",
    "revision_to_date": {
        "0": 1331205308000,
        "1": 1331207581000,
        "2": 1331207599000,
        "3": 1331212840000,
        "4": 1331219463000,
        "5": 1331226500000,
        "6": 1331244002000,
        "7": 1331367706000,
        "8": 1331368056000,
        "9": 1331369493000,
        "10": 1331369531000,
        "11": 1331377124000,
        "12": 1331541862000,
        "13": 1331619918000,
        "14": 1331661480000,
        "16": 1332363801000,
        "17": 1332363827000,
        "18": 1336521051000,
        "19": 1337280682000,
        "20": 1337290503000,
        "21": 1337383051000,
        "27": 1338419511000,
        "28": 1338505806000,
        "29": 1338590396000,
        "32": 1338861705000,
        "38": 1338929591000,
        "39": 1338930398000,
        "40": 1338930926000,
        "42": 1338931523000,
        "43": 1339206726000,
        "44": 1339455611000,
        "45": 1339547778000,
        "46": 1339624921000,
        "47": 1339708907000,
        "49": 1339799439000,
        "50": 1340046295000,
        "51": 1340062521000,
        "52": 1340063245000,
        "53": 1340146425000,
        "54": 1340234938000,
        "55": 1340320012000,
        "56": 1340412985000,
        "89": 1341915239000,
        "90": 1341917043000,
        "91": 1341917431000,
        "92": 1341922439000,
        "103": 1341989035000,
        "105": 1341989237000,
        "132": 1342422829000,
        "133": 1342425442000,
        "134": 1342500499000,
        "135": 1342500603000,
        "136": 1342501026000,
        "141": 1342556958000,
        "144": 1342586122000,
        "145": 1342586154000,
        "146": 1342586336000,
        "147": 1342640738000,
        "151": 1342822621000,
        "160": 1343311254000,
        "168": 1343710500000,
        "180": 1343886243000,
        "181": 1343893932000,
        "210": 1344543443000,
        "211": 1344644431000,
        "212": 1344644467000,
        "213": 1344644622000,
        "214": 1344644645000,
        "215": 1344645151000,
        "216": 1344645453000,
        "219": 1344700763000,
        "228": 1344888463000,
        "229": 1344888476000,
        "238": 1344977079000,
        "239": 1344977571000,
        "241": 1345047824000,
        "242": 1345050036000,
        "243": 1345050987000,
        "244": 1345051492000,
        "245": 1345052004000,
        "247": 1345067106000,
        "252": 1345240176000,
        "271": 1345582026000,
        "284": 1345747250000,
        "285": 1345753396000,
        "286": 1345847995000,
        "287": 1345914822000,
        "300": 1346175229000,
        "301": 1346184109000,
        "303": 1346186483000,
        "315": 1346279088000,
        "316": 1346279157000,
        "326": 1346345105000,
        "327": 1346345153000,
        "332": 1346355125000,
        "333": 1346357157000,
        "335": 1346366942000,
        "351": 1346430316000,
        "358": 1346450423000,
        "363": 1346767427000,
        "376": 1346878943000,
        "378": 1346890887000,
        "380": 1346931067000,
        "381": 1346931997000,
        "382": 1346935472000,
        "383": 1346936731000,
        "384": 1346941498000,
        "389": 1346966164000,
        "390": 1347014576000,
        "397": 1347056797000,
        "399": 1347056919000,
        "400": 1347061145000,
        "407": 1347065621000,
        "409": 1347273531000,
        "413": 1347305666000,
        "414": 1347319420000,
        "430": 1347669244000,
        "432": 1347353325000,
        "433": 1347706522000,
        "434": 1347884305000,
        "439": 1347915467000,
        "441": 1348018293000,
        "443": 1348063751000,
        "444": 1348063855000,
        "445": 1348077400000,
        "450": 1348159541000,
        "451": 1348159757000,
        "455": 1348241956000,
        "483": 1348485695000,
        "485": 1348501132000,
        "486": 1348510810000,
        "488": 1348512817000,
        "489": 1347356150000,
        "490": 1348515350000,
        "491": 1348519592000,
        "492": 1348579388000,
        "493": 1348580867000,
        "494": 1348584321000,
        "495": 1348585645000,
        "496": 1348591105000,
        "497": 1348600684000,
        "502": 1348662914000,
        "508": 1348718997000,
        "509": 1348719150000,
        "510": 1348723382000,
        "511": 1348724305000,
        "512": 1348724603000,
        "514": 1348725570000,
        "517": 1348730739000,
        "518": 1348730800000,
        "519": 1348734048000,
        "520": 1348734761000,
        "523": 1348762324000,
        "532": 1348824770000,
        "533": 1348826923000,
        "536": 1348832464000,
        "537": 1348832646000,
        "538": 1348832924000,
        "539": 1348834367000,
        "540": 1348836283000,
        "541": 1348837894000,
        "542": 1348840581000,
        "543": 1348840983000,
        "550": 1348852601000,
        "555": 1348867613000,
        "556": 1348867775000,
        "560": 1348884088000,
        "574": 1349095116000,
        "576": 1349095522000,
        "577": 1349097745000,
        "582": 1349101360000,
        "583": 1349102279000,
        "586": 1349105980000,
        "594": 1349116223000,
        "598": 1349125040000,
        "599": 1349125061000,
        "600": 1349158847000,
        "601": 1349185955000,
        "602": 1349186150000,
        "603": 1349192018000,
        "604": 1349193192000,
        "605": 1349200883000,
        "606": 1349208117000,
        "607": 1349211181000,
        "608": 1349212469000,
        "609": 1349214913000,
        "610": 1349215350000,
        "616": 1349261037000,
        "617": 1349263709000,
        "618": 1349265702000,
        "619": 1349268346000,
        "620": 1349291495000,
        "621": 1349300302000,
        "622": 1349301370000,
        "623": 1349319088000,
        "624": 1349370506000,
        "625": 1349390195000,
        "626": 1349391686000,
        "636": 1349430804000,
        "644": 1349789176000,
        "645": 1349789553000,
        "646": 1349792774000,
        "647": 1349794140000,
        "648": 1349794160000,
        "649": 1349798997000,
        "650": 1349803844000,
        "651": 1349814997000,
        "652": 1349816067000,
        "653": 1349822394000,
        "655": 1349823992000,
        "656": 1349869741000,
        "657": 1349889927000,
        "662": 1349905108000,
        "663": 1349907397000,
        "664": 1349909392000,
        "665": 1349960700000,
        "666": 1349960767000,
        "667": 1349961212000,
        "668": 1349974860000,
        "669": 1349975992000,
        "670": 1349976034000,
        "671": 1349982406000,
        "672": 1349983340000,
        "673": 1349983976000,
        "674": 1349984366000,
        "675": 1349985126000,
        "676": 1349986244000,
        "677": 1349988349000,
        "679": 1349988672000,
        "680": 1349991685000,
        "681": 1350041227000,
        "682": 1350042549000,
        "683": 1350043110000,
        "684": 1350044932000,
        "685": 1350046817000,
        "686": 1350053028000,
        "687": 1350054393000,
        "688": 1350056089000,
        "689": 1350075526000,
        "692": 1350142613000,
        "693": 1350142699000,
        "695": 1350155861000,
        "696": 1350156548000,
        "701": 1350292684000,
        "702": 1350305902000,
        "703": 1350305935000,
        "704": 1350305962000,
        "705": 1350306640000,
        "706": 1350311126000,
        "707": 1350314540000,
        "708": 1350315254000,
        "709": 1350317798000,
        "710": 1350319900000,
        "711": 1350320352000,
        "712": 1350321098000,
        "713": 1348206019000,
        "714": 1348293908000,
        "715": 1348206019000,
        "716": 1349988416000,
        "717": 1350140361000,
        "718": 1350331636000,
        "719": 1350332344000,
        "720": 1350332513000,
        "721": 1350335469000,
        "722": 1350336885000,
        "723": 1350336957000,
        "724": 1350390336000,
        "725": 1350391666000,
        "726": 1350397236000,
        "728": 1350402081000,
        "729": 1350402477000,
        "730": 1350402900000,
        "733": 1350414711000,
        "734": 1350450319000,
        "735": 1350456459000,
        "736": 1350472605000,
        "737": 1350472622000,
        "738": 1350475969000,
        "739": 1350476429000,
        "740": 1350476884000,
        "741": 1350477492000,
        "742": 1350478165000,
        "743": 1350478833000,
        "744": 1350480059000,
        "745": 1350480789000,
        "777": 1350496930000,
        "778": 1350498479000,
        "784": 1350527990000,
        "785": 1350540759000,
        "786": 1350559160000,
        "787": 1350559798000,
        "788": 1350514409000,
        "789": 1350559469000,
        "790": 1350400693000,
        "791": 1350409007000,
        "792": 1350411751000,
        "793": 1350578018000,
        "794": 1350585119000,
        "795": 1350585587000,
        "796": 1350587416000,
        "797": 1350592883000,
        "798": 1350593035000,
        "800": 1350597821000,
        "803": 1350600346000,
        "804": 1350601810000,
        "805": 1350646089000,
        "806": 1350649453000,
        "807": 1350651073000,
        "808": 1350651105000,
        "809": 1350658494000,
        "810": 1350631225000,
        "811": 1350658582000,
        "812": 1350660425000,
        "813": 1350660584000,
        "816": 1350666358000,
        "817": 1350669971000,
        "819": 1350679526000,
        "820": 1350682008000,
        "824": 1350594092000,
        "825": 1350684639000,
        "826": 1350684733000,
        "827": 1350684846000,
        "828": 1350685099000,
        "830": 1350745395000,
        "831": 1350745865000,
        "835": 1350895736000,
        "839": 1350936274000,
        "840": 1350936623000,
        "841": 1350948793000,
        "842": 1350959491000,
        "843": 1350970907000,
        "844": 1350975448000,
        "858": 1351020907000,
        "859": 1351021196000,
        "860": 1351021825000,
        "861": 1351021904000,
        "867": 1351035661000,
        "881": 1351101733000,
        "882": 1351101983000,
        "883": 1351102207000,
        "887": 1351105345000,
        "889": 1351108669000,
        "890": 1351108674000,
        "899": 1351116872000,
        "900": 1351116900000,
        "903": 1351164958000,
        "904": 1351165808000,
        "905": 1351166298000,
        "906": 1351168566000,
        "907": 1351168590000,
        "908": 1351172036000,
        "909": 1351176663000,
        "910": 1351177928000,
        "911": 1351182977000,
        "912": 1351194907000,
        "913": 1351194908000,
        "915": 1351196459000,
        "921": 1351269416000,
        "922": 1351269435000,
        "923": 1351269456000,
        "924": 1351269489000,
        "925": 1351271060000,
        "926": 1351273893000,
        "927": 1351274463000,
        "928": 1351275139000,
        "932": 1351272418000,
        "933": 1351278091000,
        "934": 1351285784000,
        "948": 1351515750000,
        "951": 1351525164000,
        "952": 1351525478000,
        "954": 1351544617000,
        "957": 1351549211000,
        "959": 1351551766000,
        "963": 1351606998000,
        "965": 1351614232000,
        "966": 1351614265000,
        "967": 1351614284000,
        "969": 1351621550000,
        "970": 1351613074000,
        "972": 1351626920000,
        "979": 1351636464000,
        "982": 1351637093000,
        "983": 1351637138000,
        "984": 1351637597000,
        "985": 1351638994000,
        "986": 1351690021000,
        "988": 1351697862000,
        "989": 1351715746000,
        "990": 1351717722000,
        "991": 1351717768000,
        "992": 1351718636000,
        "993": 1351719355000,
        "994": 1351720287000,
        "996": 1351722199000,
        "997": 1351731700000,
        "999": 1351244179000,
        "1000": 1351786910000,
        "1001": 1351787047000,
        "1003": 1351789546000,
        "1005": 1351795825000,
        "1007": 1351799095000,
        "1008": 1351797692000,
        "1009": 1351800987000,
        "1013": 1351804636000,
        "1015": 1351810963000,
        "1018": 1351877475000,
        "1035": 1352156563000,
        "1040": 1352173230000,
        "1046": 1352152305000,
        "1047": 1352152327000,
        "1048": 1352223352000,
        "1049": 1352299976000,
        "1050": 1352300098000,
        "1051": 1352300171000,
        "1052": 1352300194000,
        "1053": 1352301926000,
        "1054": 1352303809000,
        "1058": 1352312122000,
        "1059": 1352319235000,
        "1060": 1352319149000,
        "1061": 1352319157000,
        "1062": 1352319557000,
        "1063": 1352315453000,
        "1064": 1352321412000,
        "1065": 1352321793000,
        "1066": 1352321911000,
        "1067": 1352328179000,
        "1068": 1352329377000,
        "1071": 1352330527000,
        "1073": 1352332963000,
        "1077": 1352376442000,
        "1084": 1352388988000,
        "1085": 1352389141000,
        "1086": 1352399827000,
        "1087": 1352402433000,
        "1088": 1352406419000,
        "1089": 1352409060000,
        "1090": 1352412254000,
        "1092": 1352414589000,
        "1094": 1352418008000,
        "1095": 1352418831000,
        "1096": 1352419930000,
        "1097": 1352420977000,
        "1098": 1352421332000,
        "1099": 1352424098000,
        "1104": 1352469183000,
        "1105": 1352469210000,
        "1106": 1352469229000,
        "1107": 1352469252000,
        "1108": 1352471115000,
        "1111": 1352471727000,
        "1112": 1352472113000,
        "1115": 1352474371000,
        "1117": 1352482919000,
        "1121": 1352489265000,
        "1124": 1352501734000,
        "1125": 1352502430000,
        "1126": 1352502452000,
        "1128": 1352505300000,
        "1129": 1352505589000,
        "1130": 1352505823000,
        "1131": 1352574927000,
        "1132": 1352591078000,
        "1133": 1352596067000,
        "1134": 1352597719000,
        "1136": 1352601529000,
        "1137": 1352621853000,
        "1138": 1352621942000,
        "1139": 1352646431000,
        "1140": 1352646825000,
        "1141": 1352646963000,
        "1142": 1352647206000,
        "1146": 1352744207000,
        "1147": 1352744227000,
        "1148": 1352745170000,
        "1149": 1352745269000,
        "1150": 1352745722000,
        "1152": 1352749202000,
        "1153": 1352749234000,
        "1156": 1352756221000,
        "1159": 1352758351000,
        "1161": 1352764522000,
        "1163": 1352764898000,
        "1171": 1352935932000,
        "1174": 1353016367000,
        "1190": 1353088411000,
        "1192": 1353095186000,
        "1194": 1353102667000,
        "1195": 1353102707000,
        "1199": 1353347048000,
        "1208": 1353358440000,
        "1232": 1354205751000,
        "1234": 1354299967000,
        "1235": 1354300773000,
        "1236": 1354300909000,
        "1237": 1354542455000,
        "1238": 1354545835000,
        "1240": 1354565803000,
        "1241": 1354570621000,
        "1248": 1354658869000,
        "1251": 1354664245000,
        "1252": 1354713445000,
        "1253": 1354724420000,
        "1261": 1354724961000,
        "1262": 1354729381000,
        "1263": 1354733523000,
        "1264": 1354756225000,
        "1266": 1354830218000,
        "1273": 1354908829000,
        "1276": 1354914793000,
        "1277": 1354916647000,
        "1278": 1354918120000,
        "1280": 1354921294000,
        "1281": 1354926177000,
        "1312": 1355262639000,
        "1314": 1355265928000,
        "1317": 1355272037000,
        "1320": 1355342002000,
        "1322": 1355344441000,
        "1325": 1355346465000,
        "1326": 1355348518000,
        "1327": 1355349413000,
        "1328": 1355353943000,
        "1329": 1355356055000,
        "1330": 1355436032000,
        "1331": 1355358430000,
        "1332": 1355425381000,
        "1333": 1355427987000,
        "1334": 1355428593000,
        "1335": 1355430069000,
        "1336": 1355433485000,
        "1337": 1355435702000,
        "1338": 1355439933000,
        "1339": 1355443006000,
        "1340": 1355508052000,
        "1341": 1355513712000,
        "1342": 1355520555000,
        "1343": 1355521408000,
        "1344": 1355521619000,
        "1345": 1355523233000,
        "1346": 1355529377000,
        "1347": 1355529451000,
        "1348": 1355529493000,
        "1354": 1355522774000,
        "1355": 1355762262000,
        "1356": 1355780553000,
        "1357": 1355780976000,
        "1358": 1355781338000,
        "1359": 1355781950000,
        "1360": 1355782354000,
        "1361": 1355782607000,
        "1362": 1355788736000,
        "1363": 1355788760000,
        "1364": 1355789892000,
        "1370": 1355844286000,
        "1372": 1355845597000,
        "1373": 1355846220000,
        "1388": 1356030446000,
        "1389": 1356029437000,
        "1390": 1356035524000,
        "1391": 1356040852000,
        "1392": 1356096929000,
        "1393": 1356097160000,
        "1395": 1356116425000,
        "1397": 1356350361000,
        "1399": 1356351410000,
        "1403": 1356303817000,
        "1404": 1356357503000,
        "1405": 1356357676000,
        "1406": 1356358118000,
        "1407": 1356358258000,
        "1408": 1356362717000,
        "1409": 1356527417000,
        "1410": 1356528324000,
        "1415": 1356555405000,
        "1420": 1356613521000,
        "1421": 1356616761000,
        "1422": 1356618269000,
        "1423": 1356619784000,
        "1424": 1356622412000,
        "1425": 1356554571000,
        "1426": 1356632892000,
        "1428": 1356638847000,
        "1429": 1356652591000,
        "1430": 1356652798000,
        "1432": 1356705578000,
        "1433": 1356706353000,
        "1434": 1356711500000,
        "1435": 1356711542000,
        "1437": 1356720603000,
        "1438": 1356720642000,
        "1439": 1356720655000,
        "1440": 1356720721000,
        "1441": 1356720760000,
        "1444": 1356738128000,
        "1445": 1356738199000,
        "1446": 1356738218000,
        "1447": 1356738253000,
        "1449": 1356967160000,
        "1450": 1356967177000,
        "1451": 1356967226000,
        "1452": 1356967247000,
        "1453": 1356970838000,
        "1454": 1356970878000,
        "1455": 1356970908000,
        "1456": 1356972449000,
        "1457": 1356972501000,
        "1458": 1356974044000,
        "1461": 1357048637000,
        "1462": 1357049556000,
        "1463": 1357132638000,
        "1464": 1357135324000,
        "1465": 1357135357000,
        "1466": 1357137560000,
        "1467": 1357141602000,
        "1468": 1357148833000,
        "1469": 1357142664000,
        "1470": 1357153171000,
        "1471": 1357153207000,
        "1472": 1357153248000,
        "1473": 1357160794000,
        "1474": 1357160953000,
        "1475": 1357229877000,
        "1477": 1357246172000,
        "1478": 1357246202000,
        "1479": 1357249122000,
        "1480": 1357249159000,
        "1481": 1357321619000,
        "1482": 1357322598000,
        "1483": 1357344361000,
        "1484": 1357396981000,
        "1485": 1357405860000,
        "1486": 1357412168000,
        "1487": 1357412736000,
        "1488": 1357432611000,
        "1489": 1357433265000,
        "1490": 1357434680000,
        "1491": 1357499000000,
        "1492": 1357500954000,
        "1493": 1357524836000,
        "1494": 1357526714000,
        "1495": 1357528785000,
        "1496": 1357530423000,
        "1497": 1357536413000,
        "1498": 1357581457000,
        "1499": 1357587737000,
        "1500": 1357599366000,
        "1501": 1357599770000,
        "1502": 1357600218000,
        "1503": 1357600251000,
        "1504": 1357600488000,
        "1505": 1357622174000,
        "1506": 1357662847000,
        "1507": 1357589564000,
        "1508": 1357589669000,
        "1509": 1357680046000,
        "1510": 1357680249000,
        "1511": 1357680284000,
        "1512": 1357680288000,
        "1517": 1357693740000,
        "1519": 1357768003000,
        "1558": 1357919918000,
        "1574": 1357681289000,
        "1575": 1357684423000,
        "1576": 1357688613000,
        "1577": 1357688885000,
        "1578": 1357696518000,
        "1579": 1357772997000,
        "1580": 1357840139000,
        "1581": 1357853003000,
        "1582": 1357771815000,
        "1583": 1357775190000,
        "1584": 1357849854000,
        "1585": 1357851141000,
        "1586": 1357851286000,
        "1587": 1357854217000,
        "1588": 1357855894000,
        "1589": 1357856840000,
        "1590": 1357840978000,
        "1591": 1357878446000,
        "1592": 1357878476000,
        "1593": 1357878494000,
        "1594": 1357923609000,
        "1595": 1357932059000,
        "1596": 1357932098000,
        "1597": 1357940250000,
        "1598": 1357940290000,
        "1599": 1357946565000,
        "1600": 1357946648000,
        "1601": 1357948978000,
        "1671": 1358360905000,
        "1673": 1358365039000,
        "1677": 1358370542000,
        "1678": 1358374797000,
        "1679": 1358375633000,
        "1680": 1358379038000,
        "1681": 1358379598000,
        "1682": 1358381011000,
        "1683": 1358439743000,
        "1684": 1358458375000,
        "1685": 1358459013000,
        "1686": 1358463254000,
        "1687": 1358464539000,
        "1688": 1358464686000,
        "1689": 1358466427000,
        "1690": 1358467587000,
        "1691": 1358467277000,
        "1692": 1358473258000,
        "1693": 1358474342000,
        "1694": 1358474404000,
        "1695": 1358475744000,
        "1696": 1358476315000,
        "1698": 1358539502000,
        "1699": 1358539900000,
        "1700": 1358541707000,
        "1701": 1358542136000,
        "1702": 1358542281000,
        "1703": 1358542348000,
        "1704": 1358542840000,
        "1705": 1358542852000,
        "1706": 1358542940000,
        "1707": 1358542470000,
        "1708": 1358544347000,
        "1709": 1358543253000,
        "1710": 1358543706000,
        "1711": 1358544604000,
        "1712": 1358544699000,
        "1713": 1358545148000,
        "1714": 1358545500000,
        "1716": 1358547582000,
        "1717": 1358551939000,
        "1718": 1358553082000,
        "1719": 1358553894000,
        "1720": 1358555055000,
        "1722": 1358555359000,
        "1723": 1358555707000,
        "1724": 1358566459000,
        "1745": 1358978378000,
        "1746": 1353440028000,
        "1747": 1353969751000,
        "1748": 1356245571000,
        "1749": 1359062554000,
        "1750": 1359062646000,
        "1758": 1359145692000,
        "1871": 1359671182000,
        "1872": 1359671473000,
        "1874": 1359673644000,
        "1875": 1359673818000,
        "1877": 1359739556000,
        "1878": 1359739592000,
        "1879": 1359740805000,
        "1880": 1359742716000,
        "1881": 1359743938000,
        "1882": 1359750660000,
        "1883": 1359750960000,
        "1884": 1359753285000,
        "1885": 1359753444000,
        "1887": 1359759397000,
        "1888": 1359759795000,
        "1890": 1359765600000,
        "1900": 1360000742000,
        "1902": 1360002657000,
        "1903": 1360002677000,
        "1904": 1360002690000,
        "1905": 1360002719000,
        "1906": 1360008998000,
        "1907": 1360009008000,
        "1908": 1360009029000,
        "1909": 1360009049000,
        "1910": 1360009081000,
        "1911": 1360009107000,
        "1912": 1360011840000,
        "1913": 1360011974000,
        "1914": 1360012448000,
        "1934": 1360087393000,
        "1935": 1360087630000,
        "1936": 1360087838000,
        "1937": 1360093131000,
        "1938": 1360094606000,
        "1939": 1360094624000,
        "1940": 1360095261000,
        "1941": 1360097824000,
        "1942": 1360098021000,
        "1943": 1360099151000,
        "1944": 1360099222000,
        "1945": 1360100449000,
        "1952": 1360102913000,
        "1953": 1360103176000,
        "1954": 1360101596000,
        "1956": 1360019689000,
        "1957": 1360025973000,
        "1958": 1360027776000,
        "1959": 1360027805000,
        "1960": 1360038419000,
        "1961": 1360038449000,
        "1962": 1360038493000,
        "1963": 1360038509000,
        "1964": 1360038976000,
        "1965": 1360038984000,
        "1966": 1360039681000,
        "1967": 1360040161000,
        "1968": 1360042405000,
        "1969": 1360042415000,
        "1970": 1360042436000,
        "1971": 1360042473000,
        "1972": 1360170416000,
        "1973": 1360170442000,
        "1974": 1360171464000,
        "1975": 1360171703000,
        "1977": 1360184330000,
        "1978": 1360185240000,
        "1979": 1360188509000,
        "1980": 1360188532000,
        "1981": 1360188755000,
        "1982": 1360189487000,
        "1983": 1360191404000,
        "1985": 1360268757000,
        "1986": 1360269988000,
        "1987": 1360191654000,
        "1988": 1360192252000,
        "1989": 1360250095000,
        "1990": 1360250493000,
        "1991": 1360250589000,
        "1992": 1360250980000,
        "1993": 1360251159000,
        "1994": 1360251457000,
        "1995": 1360251657000,
        "1996": 1360251825000,
        "1997": 1360251952000,
        "1998": 1360261026000,
        "1999": 1360261053000,
        "2000": 1360261063000,
        "2001": 1360270685000,
        "2002": 1360270828000,
        "2025": 1360627912000,
        "2039": 1360271902000,
        "2040": 1360272092000,
        "2041": 1360272617000,
        "2042": 1360279404000,
        "2043": 1360279681000,
        "2044": 1360296141000,
        "2045": 1360296163000,
        "2046": 1360297841000,
        "2047": 1360344626000,
        "2048": 1360344651000,
        "2049": 1360617119000,
        "2050": 1360617153000,
        "2051": 1360617889000,
        "2052": 1360617907000,
        "2053": 1360617944000,
        "2054": 1360618399000,
        "2055": 1360620277000,
        "2056": 1360620297000,
        "2057": 1360624700000,
        "2058": 1360625135000,
        "2059": 1360642101000,
        "2060": 1360642615000,
        "2061": 1360642657000,
        "2062": 1360643331000,
        "2063": 1360645835000,
        "2064": 1360646596000,
        "2065": 1360646894000,
        "2066": 1360698141000,
        "2067": 1360699202000,
        "2076": 1360797550000,
        "2077": 1360800854000,
        "2085": 1360958313000,
        "2086": 1360967679000,
        "2088": 1360703139000,
        "2089": 1360706720000,
        "2090": 1360706791000,
        "2091": 1360710211000,
        "2092": 1360771112000,
        "2093": 1360772022000,
        "2094": 1360772203000,
        "2095": 1360789933000,
        "2096": 1360792635000,
        "2097": 1360795385000,
        "2098": 1360795987000,
        "2099": 1360796641000,
        "2100": 1360797795000,
        "2101": 1360797805000,
        "2102": 1360797832000,
        "2103": 1361195155000,
        "2113": 1361204986000,
        "2134": 1361305775000,
        "2137": 1361308162000,
        "2142": 1361313596000,
        "2158": 1361393138000,
        "2159": 1361394248000,
        "2160": 1361395554000,
        "2161": 1361400132000,
        "2166": 1361406167000,
        "2168": 1361384451000,
        "2169": 1361397227000,
        "2170": 1361451598000,
        "2171": 1361454849000,
        "2172": 1361457902000,
        "2173": 1361457948000,
        "2174": 1361462471000,
        "2175": 1361463877000,
        "2176": 1361464061000,
        "2177": 1361464306000,
        "2178": 1361466411000,
        "2179": 1361467347000,
        "2180": 1361469309000,
        "2181": 1361469365000,
        "2182": 1361469381000,
        "2183": 1361469581000,
        "2184": 1361469865000,
        "2185": 1361470247000,
        "2186": 1361471857000,
        "2187": 1361484966000,
        "2188": 1361493649000,
        "2189": 1361535685000,
        "2348": 1362032156000,
        "2378": 1362151659000,
        "2379": 1362151698000,
        "2383": 1362154632000,
        "2384": 1362156700000,
        "2385": 1362156730000,
        "2388": 1362157142000,
        "2392": 1362163382000,
        "2393": 1362164773000,
        "2394": 1362164940000,
        "2395": 1362165227000,
        "2396": 1362172457000,
        "2397": 1362172614000,
        "2401": 1362174508000,
        "2402": 1362175080000,
        "2403": 1362175112000,
        "2404": 1362181452000,
        "2408": 1362184448000,
        "2409": 1362187423000,
        "2417": 1362394044000,
        "2418": 1362394895000,
        "2419": 1362396474000,
        "2420": 1362415285000,
        "2421": 1362417494000,
        "2423": 1362424973000,
        "2424": 1362425229000,
        "2425": 1362425336000,
        "2429": 1362426673000,
        "2430": 1362430925000,
        "2431": 1362431131000,
        "2432": 1362432684000,
        "2433": 1362435960000,
        "2438": 1362485418000,
        "2439": 1362485686000,
        "2440": 1362486842000,
        "2441": 1362488024000,
        "2442": 1362488041000,
        "2443": 1362488911000,
        "2444": 1362491073000,
        "2445": 1362491986000,
        "2448": 1362503349000,
        "2449": 1362502734000,
        "2464": 1362522810000,
        "2469": 1362562926000,
        "2470": 1362565384000,
        "2485": 1362606879000,
        "2487": 1362607481000,
        "2490": 1362608445000,
        "2491": 1362610219000,
        "2496": 1362614724000,
        "2505": 1362685293000,
        "2506": 1362685793000,
        "2507": 1362686669000,
        "2511": 1362698179000,
        "2514": 1362743082000,
        "2515": 1362743249000,
        "2516": 1362746451000,
        "2517": 1362747690000,
        "2518": 1362747872000,
        "2519": 1362748001000,
        "2520": 1362753611000,
        "2521": 1362771664000,
        "2522": 1362767513000,
        "2523": 1362774668000,
        "2525": 1362778848000,
        "2529": 1362781584000,
        "2530": 1362782878000,
        "2606": 1363031465000,
        "2624": 1363086847000,
        "2642": 1363106953000,
        "2643": 1363108891000,
        "2811": 1363803646000,
        "2881": 1364329762000,
        "2885": 1364332836000,
        "2886": 1364332872000,
        "2887": 1364336819000,
        "2888": 1364338277000,
        "2889": 1364339622000,
        "2890": 1364340584000,
        "2891": 1364341616000,
        "2931": 1364498321000,
        "2932": 1364498533000,
        "2958": 1364813127000,
        "2959": 1364818236000,
        "2961": 1364823510000,
        "2962": 1364824365000,
        "2963": 1364824695000,
        "2964": 1364826811000,
        "2965": 1364827315000,
        "2966": 1364827338000,
        "2967": 1364830056000,
        "2968": 1364830084000,
        "2969": 1364830138000,
        "2970": 1364831903000,
        "2971": 1364831929000,
        "2972": 1364835082000,
        "2974": 1364835481000,
        "2977": 1364842480000,
        "2978": 1364843466000,
        "2980": 1364899814000,
        "2981": 1364903927000,
        "2982": 1364904175000,
        "2983": 1364905304000,
        "2984": 1364905333000,
        "2985": 1364905379000,
        "2986": 1364905945000,
        "2987": 1364914521000,
        "2988": 1364914763000,
        "2989": 1364940644000,
        "2990": 1364944492000,
        "2992": 1364985666000,
        "2993": 1364987006000,
        "2994": 1364990863000,
        "2995": 1364990890000,
        "2996": 1364990913000,
        "2997": 1364992499000,
        "2998": 1364992528000,
        "2999": 1364992786000,
        "3000": 1364999627000,
        "3001": 1365000016000,
        "3005": 1365006207000,
        "3006": 1365006236000,
        "3007": 1365006324000,
        "3008": 1365006339000,
        "3009": 1365009368000,
        "3010": 1365010378000,
        "3011": 1365010735000,
        "3012": 1365010948000,
        "3013": 1365011273000,
        "3015": 1365016685000,
        "3018": 1365022388000,
        "3019": 1365022917000,
        "3021": 1365070145000,
        "3022": 1365071785000,
        "3024": 1365075447000,
        "3025": 1365077556000,
        "3026": 1365080299000,
        "3027": 1365092839000,
        "3028": 1365094158000,
        "3031": 1365104708000,
        "3032": 1365167100000,
        "3033": 1365167236000,
        "3034": 1365172017000,
        "3035": 1365172038000,
        "3036": 1365172135000,
        "3039": 1365424034000,
        "3040": 1365430503000,
        "3041": 1365434304000,
        "3042": 1365434421000,
        "3043": 1365435830000,
        "3044": 1365438482000,
        "3046": 1365442362000,
        "3048": 1365498910000,
        "3049": 1365499756000,
        "3050": 1365501520000,
        "3051": 1365501711000,
        "3052": 1365503565000,
        "3053": 1365506272000,
        "3054": 1365516822000,
        "3055": 1365526738000,
        "3062": 1365602101000,
        "3063": 1365604946000,
        "3064": 1365605511000,
        "3065": 1365605564000,
        "3066": 1365625458000,
        "3067": 1365625475000,
        "3069": 1365673863000,
        "3070": 1365675262000,
        "3071": 1365681376000,
        "3076": 1365698065000,
        "3086": 1365756946000,
        "3095": 1365791669000,
        "3100": 1365801803000,
        "3101": 1365801827000,
        "3102": 1365977083000,
        "3103": 1366026722000,
        "3104": 1366031438000,
        "3105": 1366031454000,
        "3106": 1366032811000,
        "3107": 1366033235000,
        "3108": 1366033997000,
        "3109": 1366034136000,
        "3110": 1366035009000,
        "3111": 1366041984000,
        "3113": 1366044971000,
        "3114": 1366046020000,
        "3115": 1366048822000,
        "3117": 1366053968000,
        "3126": 1366122977000,
        "3135": 1366140641000,
        "3136": 1366141220000,
        "3137": 1366144252000,
        "3152": 1366231533000,
        "3153": 1366231650000,
        "3156": 1366282336000,
        "3173": 1366623157000,
        "3176": 1366629720000,
        "3192": 1366793639000,
        "3193": 1366793681000,
        "3194": 1366794004000,
        "3198": 1366805526000,
        "3199": 1366805645000,
        "3205": 1366827299000,
        "3206": 1366154916000,
        "3207": 1366416866000,
        "3208": 1366754291000,
        "3209": 1366824689000,
        "3210": 1366829285000,
        "3217": 1366842702000,
        "3218": 1366843208000,
        "3229": 1366912078000,
        "3230": 1366918690000,
        "3232": 1366918850000,
        "3234": 1366924280000,
        "3236": 1366972360000,
        "3237": 1366972878000,
        "3238": 1366973413000,
        "3239": 1366973438000,
        "3240": 1366973737000,
        "3241": 1366974085000,
        "3244": 1367007254000,
        "3245": 1367007397000,
        "3246": 1367008187000,
        "3247": 1367008339000,
        "3248": 1367009063000,
        "3249": 1367009555000,
        "3250": 1367015729000,
        "3251": 1367015833000,
        "3252": 1367015940000,
        "3268": 1367365540000,
        "3272": 1367420067000,
        "3273": 1367420082000,
        "3287": 1367600881000,
        "3288": 1367615617000,
        "3289": 1367615693000,
        "3294": 1367616641000,
        "3306": 1367969192000,
        "3307": 1367969264000,
        "3308": 1367969316000,
        "3309": 1368011429000,
        "3310": 1368012158000,
        "3311": 1368016254000,
        "3346": 1368529970000,
        "3347": 1368531548000,
        "3348": 1368531821000,
        "3401": 1369834729000,
        "3402": 1369836058000,
        "3403": 1369838335000,
        "3404": 1369838349000,
        "3405": 1369838562000,
        "3406": 1369839843000,
        "3407": 1369841815000,
        "3420": 1369910649000,
        "3422": 1369921313000,
        "3423": 1369921756000,
        "3424": 1369926424000,
        "3425": 1369949777000,
        "3438": 1370205272000,
        "3469": 1371023868000,
        "3473": 1371150124000,
        "3491": 1371374890000,
        "3642": 1372260490000,
        "3644": 1372261497000,
        "3655": 1372332373000,
        "3752": 1374074937000,
        "3800": 1374528082000,
        "3802": 1374528138000,
        "3804": 1374528240000,
        "3831": 1374855539000,
        "3834": 1374863829000,
        "3838": 1375187404000,
        "3852": 1375276941000,
        "3853": 1375286280000,
        "3856": 1375305135000,
        "3900": 1375947093000,
        "3901": 1375948559000,
        "3913": 1376600711000,
        "3927": 1376911973000,
        "3928": 1376912082000,
        "3930": 1376912255000,
        "3932": 1376912342000,
        "3937": 1377028353000,
        "3942": 1377104513000,
        "3958": 1377702448000,
        "3963": 1377793439000,
        "3975": 1378207112000,
        "3976": 1378389692000,
        "3977": 1378391060000,
        "3978": 1378395004000,
        "3980": 1378405667000,
        "3981": 1378406548000,
        "3982": 1378407372000,
        "4053": 1379419713000,
        "4054": 1379421184000,
        "4063": 1379697377000,
        "4064": 1379709881000,
        "4065": 1379711341000,
        "4079": 1379970026000,
        "4080": 1379970473000,
        "4091": 1380129904000,
        "4093": 1380139454000,
        "4095": 1380164192000,
        "4101": 1380298799000,
        "4108": 1380552801000,
        "4143": 1383676930000,
        "4147": 1383940250000,
        "4150": 1384199446000,
        "4151": 1384203536000,
        "4153": 1384627098000,
        "4158": 1384994918000,
        "4168": 1385747139000,
        "4169": 1385987233000,
        "4170": 1385996884000,
        "4180": 1386613378000,
        "4181": 1386613415000,
        "4182": 1386613460000,
        "4184": 1386769686000,
        "4195": 1387404848000,
        "4200": 1387808841000,
        "4280": 1389686458000,
        "4281": 1389711479000,
        "4444": 1391461676000,
        "4445": 1391462977000,
        "4446": 1391465222000,
        "4447": 1391466254000,
        "4448": 1391529683000,
        "4449": 1391528862000,
        "4450": 1391530447000,
        "4451": 1391530506000,
        "4452": 1391532233000,
        "4453": 1391538273000,
        "4465": 1391712081000,
        "4467": 1391712436000,
        "4474": 1391632460000,
        "4475": 1391804554000,
        "4476": 1391805529000,
        "4480": 1392052927000,
        "4489": 1392220428000,
        "4492": 1392223365000,
        "4494": 1392225486000,
        "4495": 1391809558000,
        "4496": 1392225471000,
        "4501": 1392236919000,
        "4553": 1392750524000,
        "4554": 1392751693000,
        "4555": 1392752193000,
        "4558": 1392754353000,
        "4570": 1392925988000,
        "4571": 1392926272000,
        "4573": 1392927639000,
        "4574": 1392928104000,
        "4582": 1392675891000,
        "4583": 1392941637000,
        "4587": 1393177513000,
        "4595": 1393452140000,
        "4599": 1393467227000,
        "4603": 1393534398000,
        "4604": 1393535039000,
        "4605": 1393551422000,
        "4606": 1393548746000,
        "4607": 1393567723000,
        "4608": 1393567882000,
        "4609": 1393568699000,
        "4610": 1393628184000,
        "4612": 1381929689000,
        "4613": 1393847229000,
        "4614": 1393848149000,
        "4615": 1393848797000,
        "4616": 1393856064000,
        "4617": 1393858398000,
        "4618": 1393867923000,
        "4619": 1393871993000,
        "4620": 1393872252000,
        "4623": 1393876875000,
        "4624": 1393877103000,
        "4625": 1393880386000,
        "4626": 1393892122000,
        "4629": 1393951802000,
        "4630": 1393953671000,
        "4631": 1393951066000,
        "4632": 1393953370000,
        "4633": 1393954571000,
        "4634": 1393954766000,
        "4642": 1394219069000,
        "4648": 1394142986000,
        "4649": 1394489909000,
        "4652": 1394566577000,
        "4653": 1394643873000,
        "4655": 1394670142000,
        "4656": 1394670152000,
        "4657": 1394724349000,
        "4658": 1394729562000,
        "4659": 1394733542000,
        "4662": 1394575242000,
        "4663": 1394753035000,
        "4664": 1394756351000,
        "4665": 1394804608000,
        "4666": 1394817650000,
        "4667": 1394819428000,
        "4668": 1394832643000,
        "4669": 1394832753000,
        "4670": 1394839415000,
        "4671": 1394840473000,
        "4672": 1395058393000,
        "4673": 1395065859000,
        "4674": 1395072835000,
        "4678": 1395090335000,
        "4679": 1395090972000,
        "4680": 1395092711000,
        "4690": 1395261333000,
        "4691": 1395260750000,
        "4692": 1395263696000,
        "4693": 1395264295000,
        "4694": 1395268302000,
        "4695": 1395268667000,
        "4696": 1395316476000,
        "4697": 1395322108000,
        "4698": 1395326399000,
        "4699": 1395332882000,
        "4705": 1395357827000,
        "4707": 1395361004000,
        "4709": 1395387160000,
        "4710": 1395392658000,
        "4711": 1395396943000,
        "4713": 1395416480000,
        "4725": 1395778218000,
        "4726": 1395826137000,
        "4736": 1395778373000,
        "4737": 1396028900000,
        "4738": 1396028423000,
        "4746": 1396303203000,
        "4748": 1396368874000,
        "4758": 1396560070000,
        "4759": 1396563400000,
        "4766": 1396644975000,
        "4780": 1397000894000,
        "4781": 1397070147000,
        "4783": 1397081108000,
        "4785": 1397086084000,
        "4786": 1397086538000,
        "4795": 1397161690000,
        "4796": 1397162882000,
        "4802": 1397249599000,
        "4803": 1397250403000,
        "4804": 1397251074000,
        "4807": 1397253528000,
        "4809": 1397506741000,
        "4810": 1397506821000,
        "4814": 1397598977000,
        "4816": 1397601816000,
        "4817": 1397601988000,
        "4818": 1397602339000,
        "4819": 1397602403000,
        "4820": 1397664339000,
        "4941": 1400596729000,
        "4962": 1400708018000,
        "4972": 1400895445000,
        "5080": 1401994051000,
        "5087": 1402061218000,
        "5088": 1402062237000,
        "5104": 1402333488000,
        "5108": 1402345162000,
        "5113": 1402516636000,
        "5115": 1402523591000,
        "5116": 1402524590000,
        "5117": 1402581205000,
        "5118": 1402581253000,
        "5131": 1402924488000,
        "5132": 1402924533000,
        "5133": 1402926397000,
        "5134": 1402936128000,
        "5135": 1402939843000,
        "5136": 1402941248000,
        "5137": 1402942318000,
        "5139": 1403008337000,
        "5143": 1403025040000,
        "5144": 1403031862000,
        "5149": 1403109622000,
        "5152": 1403111624000,
        "5167": 1403193073000,
        "5170": 1403201352000,
        "5176": 1403205277000,
        "5179": 1403212118000,
        "5182": 1403230397000,
        "5184": 1403530303000,
        "5190": 1403556651000,
        "5194": 1403620230000,
        "5195": 1403620417000,
        "5196": 1403620924000,
        "5197": 1403621462000,
        "5200": 1403622534000,
        "5209": 1403626571000,
        "5214": 1403633500000,
        "5217": 1403634413000,
        "5222": 1403643205000,
        "5223": 1403643411000,
        "5232": 1403709668000,
        "5233": 1403710642000,
        "5247": 1403796346000,
        "5249": 1403796427000,
        "5251": 1403805178000,
        "5267": 1404151771000,
        "5268": 1404151982000,
        "5285": 1404227013000,
        "5286": 1404228318000,
        "5291": 1404234724000,
        "5306": 1404248574000,
        "5315": 1404314226000,
        "5339": 1404425463000,
        "5356": 1404747240000,
        "5359": 1404748330000,
        "5360": 1404748488000,
        "5362": 1404749658000,
        "5364": 1404751731000,
        "5365": 1404751771000,
        "5366": 1404751841000,
        "5367": 1404247217000,
        "5368": 1404752530000,
        "5375": 1404766900000,
        "5376": 1404767683000,
        "5392": 1404833309000,
        "5399": 1404839860000,
        "5401": 1404841796000,
        "5403": 1404842650000,
        "5404": 1404842837000,
        "5406": 1404843459000,
        "5408": 1404845709000,
        "5425": 1404930039000,
        "5429": 1404937413000,
        "5430": 1404937587000,
        "5431": 1404937689000,
        "5448": 1405011471000,
        "5449": 1405011895000,
        "5461": 1405096421000,
        "5479": 1405344272000,
        "5500": 1405443958000,
        "5502": 1405445674000,
        "5521": 1405542670000,
        "5522": 1405543349000,
        "5531": 1405596252000,
        "5562": 1405783137000,
        "5563": 1405783279000,
        "5571": 1405952917000,
        "5572": 1405954108000,
        "5575": 1405954580000,
        "5578": 1405956323000,
        "5580": 1405957339000,
        "5591": 1405968358000,
        "5603": 1405974101000,
        "5604": 1405978891000,
        "5610": 1406038130000,
        "5611": 1406039837000,
        "5615": 1406042199000,
        "5616": 1406044543000,
        "5617": 1406044714000,
        "5621": 1406053954000,
        "5628": 1406065487000,
        "5635": 1406152957000,
        "5668": 1406314627000,
        "5669": 1406323664000,
        "5670": 1406325153000,
        "5677": 1406575489000,
        "5681": 1406581612000,
        "5682": 1406581618000,
        "5695": 1406651589000,
        "5707": 1406662927000,
        "5722": 1406672370000,
        "5740": 1406747346000,
        "5741": 1406747371000,
        "5742": 1406747399000,
        "5746": 1406750893000,
        "5747": 1406752249000,
        "5749": 1406755512000,
        "5759": 1406817324000,
        "5760": 1406817413000,
        "5786": 1406912363000,
        "5787": 1406912518000,
        "5800": 1406931858000,
        "5806": 1407168380000,
        "5818": 1407177320000,
        "5821": 1407178940000,
        "5832": 1407263557000,
        "5848": 1407359611000,
        "5849": 1407366392000,
        "5853": 1407419800000,
        "5854": 1407420140000,
        "5858": 1407422286000,
        "5867": 1407450921000,
        "5876": 1407535443000,
        "5899": 1407807794000,
        "5908": 1407863996000,
        "5909": 1407868453000,
        "5930": 1407941634000,
        "5933": 1407942835000,
        "5963": 1408027408000,
        "5967": 1408032243000,
        "5968": 1408034154000,
        "5974": 1408052796000,
        "5979": 1408130824000,
        "5985": 1408370864000,
        "5986": 1408370938000,
        "5987": 1408371004000,
        "5993": 1408374028000,
        "5995": 1408374531000,
        "5997": 1408376136000,
        "5998": 1408377175000,
        "6014": 1408460063000,
        "6019": 1408482912000,
        "6024": 1408544002000,
        "6031": 1408554167000,
        "6036": 1408560684000,
        "6049": 1408642750000,
        "6055": 1408644505000,
        "6060": 1408723288000,
        "6062": 1408742591000,
        "6077": 1408996818000,
        "6080": 1409000452000,
        "6081": 1409004286000,
        "6094": 1409086688000,
        "6095": 1409090424000,
        "6103": 1409151684000,
        "6105": 1409153981000,
        "6106": 1409153987000,
        "6133": 1409339259000,
        "6134": 1409349462000,
        "6135": 1409353305000,
        "6139": 1409593833000,
        "6140": 1409594344000,
        "6147": 1409678550000,
        "6153": 1409684610000,
        "6159": 1409760548000,
        "6173": 1409865543000,
        "6188": 1409954769000,
        "6192": 1410023296000,
        "6193": 1410023855000,
        "6205": 1410360515000,
        "6206": 1410361138000,
        "6207": 1410362086000,
        "6211": 1410364905000,
        "6212": 1410365602000,
        "6213": 1410366782000,
        "6216": 1410373187000,
        "6219": 1410375786000,
        "6220": 1410377927000,
        "6227": 1410382979000,
        "6228": 1410384200000,
        "6229": 1410386268000,
        "6231": 1410389233000,
        "6232": 1410389675000,
        "6233": 1410392069000,
        "6243": 1410534497000,
        "6248": 1410551528000,
        "6251": 1410811625000,
        "6255": 1410820698000,
        "6258": 1410875982000,
        "6274": 1411411801000,
        "6293": 1411504833000,
        "6294": 1411587910000,
        "6295": 1411594972000,
        "6298": 1411660758000,
        "6300": 1411665822000,
        "6336": 1412269932000,
        "6347": 1412330635000,
        "6349": 1412348207000,
        "6356": 1412368912000,
        "6371": 1412635054000,
        "6372": 1412635207000,
        "6376": 1412695682000,
        "6387": 1412781014000,
        "6388": 1412781357000,
        "6397": 1412806419000,
        "6399": 1412871101000,
        "6402": 1412878406000,
        "6404": 1412881567000,
        "6406": 1412888353000,
        "6410": 1412890054000,
        "6415": 1412956006000,
        "6417": 1412957897000,
        "6425": 1412973695000,
        "6427": 1412975622000,
        "6431": 1412990828000,
        "6440": 1413223400000,
        "6444": 1413227066000,
        "6448": 1413253414000,
        "6452": 1413299909000,
        "6454": 1413304894000,
        "6455": 1413305849000,
        "6459": 1413310231000,
        "6479": 1413386761000,
        "6480": 1413388134000,
        "6481": 1413392642000,
        "6483": 1413401119000,
        "6485": 1413402353000,
        "6492": 1413570733000,
        "6493": 1413570755000,
        "6494": 1413571450000,
        "6498": 1413815260000,
        "6517": 1414015347000,
        "6526": 1414099780000,
        "6527": 1414099916000,
        "6554": 1415152790000,
        "6560": 1415313021000,
        "6561": 1415313168000,
        "6607": 1416505307000,
        "6613": 1416586357000,
        "6614": 1416602799000,
        "6616": 1416842083000,
        "6629": 1416853854000,
        "6630": 1416860264000,
        "6631": 1416864361000,
        "6643": 1416913552000,
        "6655": 1416949476000,
        "6675": 1417023398000,
        "6689": 1417095475000,
        "6692": 1417101807000,
        "6741": 1417699712000,
        "6746": 1417739460000,
        "6752": 1417730630000,
        "6769": 1418039206000,
        "6808": 1418069780000,
        "6930": 1418748862000,
        "6931": 1418752295000,
        "6932": 1418758936000,
        "6933": 1418760961000,
        "6948": 1418853257000,
        "6949": 1418853586000,
        "6950": 1418854295000,
        "6957": 1418915718000,
        "6958": 1418915893000,
        "6967": 1418927751000,
        "6980": 1419874793000,
        "6986": 1419888452000,
        "6995": 1419951798000,
        "6997": 1419955484000,
        "7050": 1420624322000,
        "7059": 1420641754000,
        "7064": 1420727800000,
        "7076": 1420745668000,
        "7077": 1420745888000,
        "7080": 1420852014000,
        "7084": 1421062368000,
        "7090": 1421075982000,
        "7091": 1421076022000,
        "7095": 1421082922000,
        "7114": 1421170699000,
        "7115": 1421170755000,
        "7118": 1421172795000,
        "7123": 1421242593000,
        "7137": 1421360664000,
        "7139": 1421365657000,
        "7140": 1421412177000,
        "7141": 1421438304000,
        "7142": 1421438326000,
        "7160": 1421696898000,
        "7162": 1421697246000,
        "7163": 1421698038000,
        "7164": 1421698934000,
        "7165": 1421700143000,
        "7172": 1421771248000,
        "7185": 1421838856000,
        "7186": 1421847889000,
        "7195": 1421922286000,
        "7203": 1421939721000,
        "7204": 1421939780000,
        "7208": 1421943616000,
        "7215": 1422022139000,
        "7222": 1422298456000,
        "7238": 1422375568000,
        "7245": 1422376031000,
        "7248": 1422377295000,
        "7249": 1422377760000,
        "7250": 1422378444000,
        "7253": 1422380007000,
        "7254": 1422381441000,
        "7256": 1422386509000,
        "7258": 1422454838000,
        "7259": 1422454914000,
        "7263": 1422455069000,
        "7265": 1422458186000,
        "7268": 1422473051000,
        "7270": 1422485220000,
        "7276": 1422550790000,
        "7283": 1422889793000,
        "7295": 1422984944000,
        "7340": 1423133135000,
        "7351": 1423301968000,
        "7357": 1423484173000,
        "7364": 1423492296000,
        "7371": 1423578130000,
        "7378": 1423595633000,
        "7397": 1424100526000,
        "7398": 1424100741000,
        "7405": 1424103137000,
        "7409": 1424111802000,
        "7414": 1424116806000,
        "7422": 1424181839000,
        "7437": 1424281472000,
        "7442": 1424285757000,
        "7444": 1424294070000,
        "7463": 1424788508000,
        "7464": 1424811632000,
        "7494": 1425048347000,
        "7498": 1425294936000,
        "7499": 1425295146000,
        "7502": 1425304886000,
        "7503": 1425304914000,
        "7504": 1425305304000,
        "7511": 1425317603000,
        "7528": 1425375957000,
        "7536": 1425385685000,
        "7553": 1425497363000,
        "7559": 1425500420000,
        "7569": 1425569755000,
        "7573": 1425575956000,
        "7580": 1425652847000,
        "7591": 1425908548000,
        "7620": 1426090312000,
        "7623": 1426093903000,
        "7625": 1426094311000,
        "7631": 1426129257000,
        "7643": 1426504717000,
        "7645": 1426513203000,
        "7673": 1426774938000,
        "7683": 1426784562000,
        "7684": 1426787409000,
        "7689": 1427120140000,
        "7692": 1427121604000,
        "7694": 1427124608000,
        "7715": 1427202522000,
        "7716": 1427207954000,
        "7734": 1427375856000,
        "7736": 1427381514000,
        "7742": 1427402914000,
        "7746": 1427485031000,
        "7747": 1427488451000,
        "7748": 1427488805000,
        "7749": 1427489098000,
        "7751": 1427727355000,
        "7760": 1427799801000,
        "7762": 1427816745000,
        "7764": 1427824598000,
        "7768": 1427833202000,
        "7771": 1427836519000,
        "7777": 1427911994000,
        "7778": 1427912244000,
        "7780": 1427919923000,
        "7790": 1428332697000,
        "7793": 1428341457000,
        "7795": 1428342543000,
        "7796": 1428355495000,
        "7804": 1428437389000,
        "7833": 1428953040000,
        "7838": 1429028262000,
        "7844": 1429193419000,
        "7845": 1429193463000,
        "7847": 1429203909000,
        "7939": 1429301760000,
        "7948": 1429563967000,
        "7949": 1429564038000,
        "7950": 1429564226000,
        "7983": 1429621635000,
        "7988": 1429634677000,
        "7990": 1429637613000,
        "8006": 1429648942000,
        "8010": 1429706706000,
        "8013": 1429713990000,
        "8014": 1429714256000,
        "8031": 1429809131000,
        "8068": 1429999892000,
        "8070": 1430144892000,
        "8074": 1430162784000,
        "8077": 1430233261000,
        "8081": 1430409352000,
        "8092": 1430500979000,
        "8095": 1430589746000,
        "8115": 1430831534000,
        "8123": 1430848423000,
        "8131": 1430921691000,
        "8132": 1430925191000,
        "8138": 1430944050000,
        "8162": 1431010520000,
        "8164": 1431014105000,
        "8173": 1431049910000,
        "8174": 1431051166000,
        "8180": 1431125166000,
        "8181": 1431337198000,
        "8182": 1431346182000,
        "8185": 1431357680000,
        "8206": 1431449637000,
        "8208": 1431455845000,
        "8209": 1431456602000,
        "8215": 1431523542000,
        "8231": 1431538077000,
        "8243": 1431553534000,
        "8244": 1431558847000,
        "8246": 1431594047000,
        "8251": 1431611452000,
        "8254": 1431620924000,
        "8255": 1431621668000,
        "8260": 1431627433000,
        "8290": 1431631570000,
        "8291": 1431632129000,
        "8298": 1431636387000,
        "8308": 1431942385000,
        "8309": 1431960766000,
        "8310": 1431960894000,
        "8312": 1431971998000,
        "8313": 1431972012000,
        "8328": 1432158952000,
        "8329": 1432159586000,
        "8330": 1432159771000,
        "8331": 1432159814000,
        "8337": 1432226471000,
        "8340": 1432230694000,
        "8347": 1432570490000,
        "8349": 1432655059000,
        "8351": 1432663228000,
        "8352": 1432667795000,
        "8354": 1432691248000,
        "8360": 1432817015000,
        "8367": 1432843491000,
        "8368": 1432919986000,
        "8379": 1433188473000,
        "8385": 1433257755000,
        "8389": 1433263956000,
        "8395": 1433540599000,
        "8396": 1433540673000,
        "8397": 1433542574000,
        "8401": 1433780474000,
        "8404": 1433789270000,
        "8408": 1433794171000,
        "8412": 1433853641000,
        "8413": 1433853665000,
        "8421": 1433848148000,
        "8427": 1433875098000,
        "8429": 1433881530000,
        "8433": 1433951435000,
        "8434": 1433951504000,
        "8442": 1433967723000,
        "8443": 1433967751000,
        "8446": 1434025907000,
        "8453": 1434145217000,
        "8458": 1434378608000,
        "8459": 1434382615000,
        "8468": 1434465386000,
        "8476": 1434476953000,
        "8477": 1434478844000,
        "8479": 1434482694000,
        "8483": 1434491241000,
        "8507": 1434663265000,
        "8508": 1434663514000,
        "8512": 1434741390000,
        "8515": 1434766626000,
        "8521": 1434986519000,
        "8527": 1435073263000,
        "8530": 1435092912000,
        "8545": 1435185781000,
        "8554": 1435251794000,
        "8561": 1435257543000,
        "8577": 1435335088000,
        "8578": 1435343863000,
        "8581": 1435357581000,
        "8610": 1435649418000,
        "8625": 1435685057000,
        "8628": 1435686914000,
        "8629": 1435686927000,
        "8630": 1435686951000,
        "8637": 1435693888000,
        "8646": 1435718142000,
        "8664": 1435873868000,
        "8674": 1436208506000,
        "8675": 1436208572000,
        "8676": 1436208691000,
        "8677": 1436208773000,
        "8678": 1436208885000,
        "8679": 1436208957000,
        "8683": 1436212190000,
        "8690": 1436218713000,
        "8692": 1436230958000,
        "8707": 1436291484000,
        "8709": 1436299184000,
        "8710": 1436299219000,
        "8713": 1436367017000,
        "8716": 1436376084000,
        "8725": 1436465884000,
        "8726": 1436466089000,
        "8739": 1436497882000,
        "8748": 1436641152000,
        "8782": 1437058662000,
        "8783": 1437066039000,
        "8800": 1438105735000,
        "8802": 1438111416000,
        "8803": 1438111907000,
        "8821": 1438610440000,
        "8823": 1438613865000,
        "8835": 1438637190000,
        "8849": 1438724909000,
        "8872": 1438810563000,
        "8873": 1438810659000,
        "8874": 1438810824000,
        "8883": 1438882011000,
        "8892": 1438972971000,
        "8902": 1439221514000,
        "8913": 1439243556000,
        "8923": 1439324973000,
        "8933": 1439491736000,
        "8940": 1439495963000,
        "8947": 1439826970000,
        "8948": 1439826981000,
        "8960": 1439906173000,
        "8969": 1439915759000,
        "8974": 1439918061000,
        "9010": 1440018953000,
        "9013": 1440022177000,
        "9029": 1440086017000,
        "9034": 1440088037000,
        "9035": 1440088100000,
        "9036": 1440088144000,
        "9038": 1440088346000,
        "9045": 1440096100000,
        "9049": 1440100202000,
        "9050": 1440100269000,
        "9059": 1440435978000,
        "9075": 1440684588000,
        "9082": 1440693874000,
        "9086": 1440795401000,
        "9095": 1441033001000,
        "9113": 1441048080000,
        "9115": 1441055724000,
        "9128": 1441207835000,
        "9129": 1441212910000,
        "9133": 1441729430000,
        "9134": 1441730227000,
        "9142": 1441795122000,
        "9145": 1441795948000,
        "9154": 1441893484000,
        "9157": 1441919683000,
        "9159": 1441921706000,
        "9160": 1441921824000,
        "9161": 1441988544000,
        "9166": 1442242403000,
        "9175": 1442261691000,
        "9176": 1442265291000,
        "9186": 1442337135000,
        "9187": 1442337355000,
        "9190": 1442346168000,
        "9195": 1442356551000,
        "9203": 1442406816000,
        "9206": 1442415335000,
        "9210": 1442417887000,
        "9211": 1442417980000,
        "9212": 1442422734000,
        "9213": 1442437660000,
        "9216": 1442520688000,
        "9239": 1442938711000,
        "9241": 1442950978000,
        "9265": 1443524441000,
        "9280": 1443722776000,
        "9282": 1443789996000,
        "9288": 1444054021000,
        "9289": 1444054647000,
        "9290": 1444054769000,
        "9291": 1444054813000,
        "9304": 1444079889000,
        "9305": 1444080186000,
        "9316": 1444134946000,
        "9327": 1444146616000,
        "9332": 1444153365000,
        "9337": 1444249304000,
        "9348": 1444413996000,
        "9357": 1444667321000,
        "9358": 1444674624000,
        "9361": 1444678480000,
        "9363": 1444686275000,
        "9375": 1444748770000,
        "9376": 1444749326000,
        "9377": 1444751727000,
        "9382": 1444756900000,
        "9395": 1444837972000,
        "9408": 1444853603000,
        "9414": 1444910010000,
        "9419": 1444916839000,
        "9429": 1444960122000,
        "9432": 1445018873000,
        "9433": 1445031097000,
        "9434": 1445035584000,
        "9437": 1445270543000,
        "9438": 1445271836000,
        "9442": 1445355463000,
        "9443": 1445356220000,
        "9451": 1445617605000,
        "9453": 1445624489000,
        "9458": 1445949209000,
        "9460": 1445964117000,
        "9463": 1445966204000,
        "9467": 1445973790000,
        "9474": 1446057805000,
        "9475": 1446061022000,
        "9490": 1446155961000,
        "9496": 1446483143000,
        "9506": 1446567151000,
        "9508": 1446573273000,
        "9510": 1446578416000,
        "9513": 1446581008000,
        "9514": 1446603049000,
        "9515": 1446605744000,
        "9520": 1446733116000,
        "9521": 1446733152000,
        "9522": 1446733162000,
        "9523": 1446733315000,
        "9528": 1447958686000,
        "9534": 1448040439000,
        "9535": 1448046444000,
        "9569": 1448555244000,
        "9583": 1448894048000,
        "9584": 1448894227000,
        "9585": 1448894296000,
        "9588": 1448899829000,
        "9589": 1448900639000,
        "9592": 1448905851000,
        "9593": 1448906762000,
        "9601": 1448918914000,
        "9612": 1449000547000,
        "9634": 1449078852000,
        "9636": 1449079893000,
        "9646": 1449150364000,
        "9647": 1449151289000,
        "9653": 1449157600000,
        "9658": 1449163203000,
        "9660": 1449170929000,
        "9661": 1449170968000,
        "9684": 1449523984000,
        "9689": 1449582347000,
        "9695": 1449601169000,
        "9696": 1449604888000,
        "9697": 1449605191000,
        "9698": 1449605346000,
        "9700": 1449610662000,
        "9706": 1449613303000,
        "9713": 1449688770000,
        "9714": 1449689957000,
        "9720": 1449806188000,
        "9723": 1450106092000,
        "9748": 1450374446000,
        "9750": 1450379158000,
        "9764": 1451507723000,
        "9766": 1451523250000,
        "9769": 1451573710000,
        "9771": 1451580193000,
        "9780": 1452011794000,
        "9781": 1452011934000,
        "9793": 1452106064000,
        "9794": 1452121467000,
        "9800": 1452186707000,
        "9802": 1452294147000,
        "9807": 1452543993000,
        "9817": 1452612405000,
        "9820": 1452617224000,
        "9832": 1452706490000,
        "9835": 1452711020000,
        "9849": 1452877155000,
        "9850": 1452877522000,
        "9851": 1452877582000,
        "9852": 1452888153000,
        "9860": 1453127983000,
        "9861": 1453128244000,
        "9864": 1453135711000,
        "9865": 1453138365000,
        "9867": 1453141737000,
        "9871": 1453225394000,
        "9881": 1453308369000,
        "9885": 1453311390000,
        "9893": 1453412207000,
        "9894": 1453412800000,
        "9895": 1453414253000,
        "9896": 1453414319000,
        "9898": 1453722811000,
        "9905": 1453735240000,
        "9907": 1453739257000,
        "9911": 1453821428000,
        "9915": 1453834670000,
        "9916": 1453837664000,
        "9917": 1453837823000,
        "9920": 1453846572000,
        "9922": 1453903554000,
        "9924": 1453916073000,
        "9926": 1453938800000,
        "9932": 1453992440000,
        "9933": 1453992509000,
        "9934": 1453992553000,
        "9935": 1453992628000,
        "9939": 1454001839000,
        "9942": 1454003901000,
        "9943": 1454013129000,
        "9944": 1454013165000,
        "9946": 1454091656000,
        "9948": 1454343787000,
        "9952": 1454349902000,
        "9954": 1454428284000,
        "9962": 1454595261000,
        "9964": 1454621431000,
        "9967": 1454623905000,
        "9975": 1455018277000,
        "9984": 1455042774000,
        "9985": 1455048340000,
        "9986": 1455048418000,
        "9987": 1455048524000,
        "9988": 1455048756000,
        "9991": 1455114831000,
        "9999": 1455139601000,
        "10001": 1455193520000,
        "10012": 1455210161000,
        "10024": 1455566353000,
        "10025": 1455570086000,
        "10026": 1455570095000,
        "10028": 1455631564000,
        "10033": 1455645454000,
        "10042": 1455716682000,
        "10046": 1455721080000,
        "10054": 1455730773000,
        "10055": 1455730812000,
        "10062": 1455737152000,
        "10063": 1455737222000,
        "10064": 1455746626000,
        "10079": 1455815147000,
        "10080": 1455815167000,
        "10084": 1455824034000,
        "10089": 1455837657000,
        "10093": 1456153259000,
        "10102": 1456216136000,
        "10119": 1456301253000,
        "10137": 1456419830000,
        "10141": 1456765036000,
        "10147": 1456843540000,
        "10148": 1456843585000,
        "10154": 1456851655000,
        "10157": 1456860388000,
        "10158": 1456860395000,
        "10183": 1457379669000,
        "10189": 1457383166000,
        "10192": 1457385651000,
        "10194": 1457386454000,
        "10195": 1457391097000,
        "10198": 1457446274000,
        "10204": 1457452403000,
        "10206": 1457452679000,
        "10210": 1457464106000,
        "10215": 1457539069000,
        "10216": 1457539237000,
        "10217": 1457541376000,
        "10234": 1457631755000,
        "10235": 1457631786000,
        "10236": 1457631840000,
        "10238": 1457977881000,
        "10239": 1457978012000,
        "10240": 1457978079000,
        "10244": 1457987339000,
        "10245": 1457988565000,
        "10246": 1457991016000,
        "10251": 1458051727000,
        "10254": 1458067943000,
        "10255": 1458068118000,
        "10256": 1458070175000,
        "10261": 1458218811000,
        "10264": 1458230281000,
        "10265": 1458230336000,
        "10269": 1458588866000,
        "10282": 1458770453000,
        "10293": 1458836883000,
        "10294": 1458836937000,
        "10299": 1458844779000,
        "10317": 1459351351000,
        "10318": 1459351845000,
        "10321": 1459357245000,
        "10322": 1459363338000,
        "10325": 1459370039000,
        "10326": 1459372394000,
        "10327": 1459372501000,
        "10334": 1459438334000,
        "10335": 1459438978000,
        "10336": 1459439000000,
        "10340": 1459520006000,
        "10342": 1459523709000,
        "10344": 1459557627000,
        "10345": 1459771368000,
        "10357": 1460037324000,
        "10366": 1460490551000,
        "10368": 1460553739000,
        "10369": 1460553764000,
        "10370": 1460553877000,
        "10371": 1460555308000,
        "10374": 1460565493000,
        "10399": 1461176827000,
        "10421": 1461271053000,
        "10424": 1461273670000,
        "10426": 1461292291000,
        "10427": 1461598783000,
        "10444": 1461639071000,
        "10453": 1461695593000,
        "10460": 1461702439000,
        "10476": 1461791975000,
        "10493": 1461860280000,
        "10494": 1461867721000,
        "10496": 1461871473000,
        "10503": 1461961170000,
        "10515": 1462209915000,
        "10517": 1462214662000,
        "10520": 1462224017000,
        "10542": 1462369122000,
        "10544": 1462382953000,
        "10548": 1462384974000,
        "10549": 1462385149000,
        "10551": 1462388271000,
        "10552": 1462389041000,
        "10559": 1462455613000,
        "10569": 1462547515000,
        "10597": 1462813317000,
        "10598": 1462818520000,
        "10601": 1462830732000,
        "10606": 1462884917000,
        "10611": 1462895362000,
        "10615": 1462902712000,
        "10616": 1462903393000,
        "10620": 1462980129000,
        "10622": 1462982735000,
        "10627": 1462989837000,
        "10633": 1463079475000,
        "10636": 1463149330000,
        "10641": 1463513821000,
        "10646": 1463516089000,
        "10655": 1463681123000,
        "10656": 1463758602000,
        "10665": 1464806511000,
        "10667": 1464874767000,
        "10671": 1464883151000,
        "10672": 1464883260000,
        "10675": 1464898318000,
        "10676": 1464898385000,
        "10681": 1465218757000,
        "10683": 1465228223000,
        "10685": 1465232216000,
        "10686": 1465232296000,
        "10689": 1465393360000,
        "10699": 1465479432000,
        "10703": 1465578446000,
        "10705": 1465821194000,
        "10710": 1465835223000,
        "10718": 1465907636000,
        "10719": 1465907732000,
        "10723": 1465912895000,
        "10729": 1465997386000,
        "10730": 1465998866000,
        "10733": 1466001770000,
        "10735": 1466009911000,
        "10738": 1466187019000,
        "10741": 1466444314000,
        "10752": 1466522765000,
        "10767": 1466614167000,
        "10769": 1466623931000,
        "10781": 1466683481000,
        "10782": 1466683556000,
        "10785": 1466687995000,
        "10786": 1466702908000,
        "10788": 1466705692000,
        "10789": 1466707613000,
        "10796": 1467033587000,
        "10807": 1467216653000,
        "10819": 1467231071000,
        "10823": 1467295324000,
        "10837": 1467735217000,
        "10840": 1467811531000,
        "10841": 1467811588000,
        "10848": 1467823014000,
        "10852": 1467826938000,
        "10856": 1467831668000,
        "10860": 1467836774000,
        "10862": 1467837289000,
        "10871": 1467904196000,
        "10874": 1467906312000,
        "10875": 1467906817000,
        "10877": 1467929070000,
        "10880": 1468232444000,
        "10885": 1468424490000,
        "10887": 1468432251000,
        "10893": 1468588498000,
        "10894": 1468588569000,
        "10895": 1468590466000,
        "10899": 1468870659000,
        "10909": 1469016197000,
        "10912": 1469025516000,
        "10927": 1469465449000,
        "10930": 1469550937000,
        "10936": 1469617828000,
        "10937": 1469618518000,
        "10942": 1469634143000,
        "10943": 1469634156000,
        "10971": 1470139721000,
        "10973": 1470156410000,
        "10974": 1470161610000,
        "10977": 1470244498000,
        "10997": 1470758490000,
        "11009": 1470840654000,
        "11017": 1470943444000,
        "11018": 1470943473000,
        "11019": 1470944361000,
        "11022": 1470946190000,
        "11030": 1471254984000,
        "11031": 1471255015000,
        "11040": 1471368073000,
        "11044": 1471379471000,
        "11045": 1471380167000,
        "11046": 1471380544000,
        "11048": 1471383509000,
        "11052": 1471447118000,
        "11055": 1471450679000,
        "11063": 1471464344000,
        "11073": 1471543213000,
        "11105": 1471622516000,
        "11106": 1471622876000,
        "11107": 1471623756000,
        "11108": 1471623783000,
        "11113": 1471873214000,
        "11120": 1471892963000,
        "11123": 1471899213000,
        "11125": 1471902135000,
        "11137": 1471976488000,
        "11139": 1471981233000,
        "11141": 1472046890000,
        "11145": 1472065281000,
        "11146": 1472067277000,
        "11147": 1472070017000,
        "11148": 1472070021000,
        "11149": 1472071690000,
        "11159": 1472148791000,
        "11160": 1472148807000,
        "11162": 1472474737000,
        "11165": 1472490080000,
        "11168": 1472576596000,
        "11170": 1472577081000,
        "11197": 1472747342000,
        "11198": 1472750728000,
        "11199": 1472759764000,
        "11206": 1473169815000,
        "11210": 1473255421000,
        "11232": 1473450751000,
        "11233": 1473690656000,
        "11241": 1473794128000,
        "11245": 1473853989000,
        "11248": 1473868218000,
        "11249": 1473869998000,
        "11257": 1473888417000,
        "11266": 1473950117000,
        "11271": 1473963975000,
        "11276": 1474478196000,
        "11298": 1474894382000,
        "11311": 1475170164000,
        "11312": 1475251131000,
        "11320": 1475761054000,
        "11330": 1476197589000,
        "11331": 1476206591000,
        "11337": 1476366136000,
        "11340": 1476367221000,
        "11341": 1476367282000,
        "11343": 1476370978000,
        "11344": 1476374675000,
        "11347": 1476453839000,
        "11354": 1476456861000,
        "11356": 1476712442000,
        "11360": 1476799825000,
        "11361": 1476905358000,
        "11364": 1476970699000,
        "11367": 1476988980000,
        "11403": 1478613573000,
        "11404": 1478614287000,
        "11414": 1479138065000,
        "11415": 1479138440000,
        "11417": 1479200403000,
        "11424": 1479286150000,
        "11447": 1479791708000,
        "11450": 1479806544000,
        "11458": 1480373833000,
        "11459": 1480374157000,
        "11462": 1480429848000,
        "11463": 1480436300000,
        "11470": 1480588162000,
        "11471": 1480611982000,
        "11486": 1482330342000,
        "11487": 1482345297000,
        "11488": 1482349915000,
        "11489": 1482440324000,
        "11499": 1483037226000,
        "11501": 1483133859000,
        "11505": 1483624694000,
        "11515": 1484324992000,
        "11517": 1484327263000,
        "11518": 1484595121000,
        "11529": 1485188127000,
        "11530": 1485189638000,
        "11531": 1485189709000,
        "11532": 1485189818000,
        "11534": 1485197134000,
        "11547": 1485291801000,
        "11557": 1485463122000,
        "11570": 1486131913000,
        "11577": 1486422260000,
        "11578": 1486422341000,
        "11580": 1486486011000,
        "11590": 1486499764000,
        "11593": 1487013010000,
        "11595": 1487015171000,
        "11600": 1487187967000,
        "11603": 1487190127000,
        "11609": 1487267099000,
        "11613": 1487280909000,
        "11615": 1487371092000,
        "11621": 1487874544000,
        "11635": 1488303529000,
        "11636": 1488303583000,
        "11639": 1488834297000,
        "11642": 1488896437000,
        "11643": 1488896494000,
        "11652": 1489435976000,
        "11656": 1489707068000,
        "11659": 1490190824000,
        "11678": 1490630804000,
        "11680": 1490646569000,
        "11682": 1490730107000,
        "11684": 1490819570000,
        "11686": 1490893017000,
        "11687": 1490893039000,
        "11693": 1491417776000,
        "11695": 1491591830000,
        "11697": 1492005892000,
        "11698": 1492005906000,
        "11700": 1492201131000,
        "11704": 1492448207000,
        "11713": 1492795961000,
        "11714": 1492796204000,
        "11716": 1492797865000,
        "11723": 1492812321000,
        "11729": 1493067231000,
        "12009": 1493241599000,
        "12013": 1493299358000,
        "12015": 1493315534000,
        "12019": 1493393565000,
        "12020": 1493393724000,
        "12021": 1493404785000,
        "12022": 1493404940000,
        "12024": 1493412965000,
        "12027": 1493656536000,
        "12029": 1493672507000,
        "12030": 1493673838000,
        "12037": 1493684090000,
        "12051": 1494020140000,
        "12053": 1494342509000,
        "12054": 1494342624000,
        "12075": 1494882716000,
        "12082": 1494962851000,
        "12091": 1495139400000,
        "12093": 1495142547000,
        "12094": 1495212190000,
        "12108": 1495651472000,
        "12110": 1495735735000,
        "12117": 1495830621000,
        "12123": 1496337427000,
        "12126": 1496342216000,
        "12128": 1496348026000,
        "12129": 1496348043000,
        "12158": 1496425402000,
        "12160": 1496439112000,
        "12163": 1496767022000,
        "12167": 1496932906000,
        "12175": 1497301782000,
        "12176": 1497367826000,
        "12178": 1497604402000,
        "12180": 1497611225000,
        "12187": 1498054769000,
        "12189": 1498058999000,
        "12193": 1498151005000,
        "12198": 1498484388000,
        "12199": 1498484527000,
        "12200": 1498484572000,
        "12201": 1498485308000,
        "12275": 1498570502000,
        "12276": 1498571878000,
        "12281": 1498588294000,
        "12287": 1498664215000,
        "12295": 1499272109000,
        "12298": 1499276183000,
        "12299": 1499277344000,
        "12300": 1499294110000,
        "12303": 1499346255000,
        "12305": 1499357986000,
        "12308": 1499361993000,
        "12328": 1500045342000,
        "12330": 1500311286000,
        "12332": 1500321035000,
        "12378": 1500478022000,
        "12384": 1500994209000,
        "12385": 1500994341000,
        "12390": 1501169427000,
        "12397": 1501595156000,
        "12398": 1501600228000,
        "12412": 1501683179000,
        "12423": 1502141487000,
        "12443": 1502381768000,
        "12449": 1502399418000,
        "12454": 1502726592000,
        "12456": 1502726891000,
        "12458": 1502734912000,
        "12460": 1502804033000,
        "12462": 1502817600000,
        "12464": 1502904515000,
        "12466": 1502979986000,
        "12505": 1503338401000,
        "12507": 1503344321000,
        "12515": 1503431306000,
        "12524": 1503506287000,
        "12525": 1503512465000,
        "12526": 1503481816000,
        "12537": 1503948343000,
        "12539": 1504018336000,
        "12540": 1504022579000,
        "12544": 1504126043000,
        "12549": 1505153045000,
        "12550": 1505153410000,
        "12553": 1505381025000,
        "12632": 1505495436000,
        "12637": 1506099526000,
        "12640": 1506344834000,
        "12644": 1508527339000,
        "12648": 1508957310000,
        "12816": 1509038424000,
        "12847": 1509721600000,
        "12848": 1509721688000,
        "12850": 1509724648000,
        "12876": 1510163255000,
        "12877": 1510177963000,
        "12915": 1510249590000,
        "12919": 1510329630000,
        "12933": 1510601377000,
        "12947": 1510673247000,
        "12949": 1510680065000,
        "12959": 1510765662000,
        "12962": 1510779262000,
        "12981": 1511793941000,
        "12984": 1511802473000,
        "12985": 1511804119000,
        "12988": 1511891546000,
        "12990": 1512396214000,
        "12992": 1512665221000,
        "12994": 1512666726000,
        "12996": 1512669978000,
        "12999": 1512673749000,
        "13001": 1513116722000,
        "13510": 1513635016000,
        "13512": 1513638300000,
        "13518": 1514987996000,
        "13571": 1515083843000,
        "13575": 1515149875000,
        "13590": 1515427887000,
        "13591": 1515439892000,
        "13594": 1515527402000,
        "13598": 1515628844000,
        "13600": 1515687791000,
        "13601": 1515688261000,
        "13602": 1515693916000,
        "13605": 1515790329000,
        "13619": 1516289172000,
        "13635": 1516399996000,
        "13638": 1516545383000,
        "13660": 1516655246000,
        "13662": 1516735233000,
        "13664": 1516735850000,
        "13673": 1516828942000,
        "13674": 1516830008000,
        "13682": 1516906382000,
        "13698": 1517253681000,
        "13705": 1517431692000,
        "13707": 1517499051000,
        "13708": 1517499110000,
        "13709": 1517521866000,
        "13713": 1517538890000,
        "13715": 1517602673000,
        "13728": 1517856058000,
        "13731": 1517928564000,
        "13732": 1517929159000,
        "13733": 1517929314000,
        "13734": 1517931768000,
        "13735": 1517932268000,
        "13739": 1517942548000,
        "13742": 1517952714000,
        "13758": 1518002751000,
        "13759": 1518003644000,
        "13761": 1518011489000,
        "13764": 1518018497000,
        "13765": 1518019648000,
        "13766": 1518022066000,
        "13768": 1518034137000,
        "13773": 1518122469000,
        "13775": 1518103121000,
        "13797": 1519075480000,
        "13798": 1519075501000,
        "13799": 1519075716000,
        "13800": 1519075738000,
        "13801": 1519075756000,
        "13802": 1519075772000,
        "13821": 1519924182000,
        "13829": 1520357767000,
        "13830": 1520360459000,
        "13831": 1520364511000,
        "13834": 1520527615000,
        "13846": 1520620461000,
        "13850": 1520805391000,
        "13851": 1520805492000,
        "13856": 1520877410000,
        "13857": 1520889701000,
        "13861": 1521034582000,
        "13866": 1521119885000,
        "13877": 1521224204000,
        "13899": 1521590234000,
        "13901": 1521629095000,
        "13902": 1521634785000,
        "13904": 1521642266000,
        "13920": 1521732472000,
        "13921": 1521732586000,
        "13923": 1521752427000,
        "13932": 1521832567000,
        "13959": 1522072667000,
        "13964": 1522103227000,
        "13965": 1522103251000,
        "13966": 1522103273000,
        "13967": 1522113823000,
        "13980": 1522428795000,
        "13982": 1522696948000,
        "14002": 1522833670000,
        "14011": 1522947326000,
        "14012": 1522947366000,
        "14013": 1522947409000,
        "14014": 1522947521000,
        "14023": 1523037660000,
        "14024": 1523037679000,
        "14025": 1523037690000,
        "14032": 1523274079000,
        "14036": 1523352708000,
        "14042": 1523438068000,
        "14044": 1523521854000,
        "14046": 1523546950000,
        "14051": 1523554134000,
        "14055": 1523565051000,
        "14056": 1523565067000,
        "14057": 1523565082000,
        "14058": 1523565321000,
        "14059": 1523565349000,
        "14064": 1523628931000,
        "14067": 1523636379000,
        "14068": 1523636783000,
        "14072": 1523644043000,
        "14073": 1523646842000,
        "14074": 1523646855000,
        "14081": 1524493444000,
        "14083": 1524506235000,
        "14085": 1524510915000,
        "14089": 1524577434000,
        "14090": 1524577454000,
        "14091": 1524577484000,
        "14093": 1524586236000,
        "14104": 1525204590000,
        "14120": 1525369413000,
        "14130": 1525443320000,
        "14148": 1525959404000,
        "14149": 1525960232000,
        "14166": 1526308854000,
        "14167": 1526308872000,
        "14178": 1526398246000,
        "14181": 1526563617000,
        "14213": 1526998284000,
        "14235": 1527248965000,
        "14236": 1527250219000,
        "14237": 1527250527000,
        "14256": 1527775578000,
        "14257": 1527775613000,
        "14261": 1527800057000,
        "14262": 1527800128000,
        "14292": 1527872941000,
        "14294": 1528108802000,
        "14305": 1528150218000,
        "14306": 1528150291000,
        "14307": 1528150428000,
        "14308": 1528151195000,
        "14310": 1528152174000,
        "14359": 1528818781000,
        "14360": 1528819614000,
        "14382": 1529330881000,
        "14385": 1529339356000,
        "14387": 1529344744000,
        "14391": 1529417310000,
        "14397": 1529496825000,
        "14398": 1529496886000,
        "14401": 1529515744000,
        "14415": 1529597702000,
        "14423": 1529684850000,
        "14426": 1529935594000,
        "14427": 1529935675000,
        "14428": 1529935759000,
        "14429": 1529936144000,
        "14432": 1529940911000,
        "14453": 1530111458000,
        "14454": 1530111585000,
        "14455": 1530111917000,
        "14468": 1530635921000,
        "14469": 1530637714000,
        "14479": 1530804270000,
        "14480": 1530804279000,
        "14494": 1530901029000,
        "14507": 1531237453000,
        "14528": 1531492643000,
        "14613": 1532449613000,
        "14679": 1533053027000,
        "14775": 1533843806000,
        "14841": 1534414985000
    },
    "revision_to_hash": {
        "0": "52370f5564fa90916ce6f38cf4e63b8fa1761643",
        "1": "6efe6a282f30266cb7cb7b6e6b69bb0051943fa2",
        "2": "a7f55a2796c7e7555e66f9a4296b04e23426d7b1",
        "3": "7d580da0c9dc58057d94b59871a7716e7567bebb",
        "4": "cee29e91456bcc64c02e5b1f77f6525970c4ad3a",
        "5": "1190a7dc8a94598ef2cbe12a13ac4d324dcc812a",
        "6": "e26a95b5f7fa63cbdffb85549f01c6fdcf5fdee4",
        "7": "fb9db5279e7fcba5fc3160078003e285cbf283af",
        "8": "9874100fd14f1bff852ebd53f0002e2c38ae670c",
        "9": "ecdb6180bf7c13e0848a81dae75d01af572b6e05",
        "10": "cc01a56fc57daeb144a441eef1df283a242732a3",
        "11": "7b5e19ea1599b89a152021a734a993431089dfa4",
        "12": "c1c609f21bed697742e34fd4aaf1ef1af02ef921",
        "13": "c1c9dc70766668692bdb33e5b5d2e548f5045daa",
        "14": "04c45b7808a782dc45cca4657129d930756eac3e",
        "16": "a89c39f7a134d8287acbb448d6b97bfd6f79d78f",
        "17": "efedae039f494f94783c8335b233dbb5ab1be25a",
        "18": "7146821eba61d958ae88820977ce32f38433a486",
        "19": "b95f4bce055d712fdc229fe2771d63b156c1d733",
        "20": "54e9a13b1094d881d601fce028ce7bbdcd6e6470",
        "21": "81367dae04eca10e2828ba1bb3cc952572aac2bf",
        "27": "2f2ce0a2be24e4bd337c41c4a204b4e2b9e5be88",
        "28": "c71fc0d478935df1db477fc730d17134f4376544",
        "29": "c00d41abe691d4e12dbe4608ada94feaec18f611",
        "32": "51352007ff858aa8bec7b63bcd73ea672e197d2b",
        "38": "e323b1b3d0c85d25d5bc3b34a696d0c542a0fd12",
        "39": "fbb60c890cd0d91c4ad031c8013c7d8cbb42db01",
        "40": "d7c2f0ad381ca4a43309f947e7c337613980f636",
        "42": "82cbf6a2f571a0b58e2f87ff2562dce450ea23e4",
        "43": "f2d91721ce9309985f0a0429a4c8b4232ab2475a",
        "44": "96f70ab8d58accbe28323e9a8fff975a48229b99",
        "45": "a08a8dcd3d2de5abd1374669a29a3d5d3d17f087",
        "46": "09b9db0f99ed6b4ebfca070549ec394cde835f97",
        "47": "9bb328ac21df717302c65005f83e0a9568516586",
        "49": "1e99240ad6934fc869739204a4545edf41a9bde2",
        "50": "03dae038a01f93ab73f335ddcc99971d48fff2d3",
        "51": "9ca30168f35fcd0d2a092064c67f368ac4db6e29",
        "52": "1553c8994e3d77ad0758477fd098d6c57863f859",
        "53": "837ecdd340c19cf9fddeb326a8030979db813dcf",
        "54": "da4337fe488b48119e8e4489c470e05f5f965e9b",
        "55": "b4e81cf21212fd6d0f166dccc38b0391c15e496a",
        "56": "8a7bc706fe6fbe10c879122978c3468f48c8fe1d",
        "89": "ecb152f5da11c61cefa848fd10ae419477190d31",
        "90": "b245f375549e5d716592367d9df6073c81242928",
        "91": "197fb0450848c6134b674c989c1fe0ae96a656d7",
        "92": "4739a5671cc96d0d81bea155619a311386c3a002",
        "103": "5e201ab3f273e45001c77198c1a23cacaf889c00",
        "105": "322c0e6e0f91361d8fdb258b919624ecf02b6a79",
        "132": "af304d48e7e01288a31776028d9b377815e9b2ba",
        "133": "7944d34c7b6597b63c0df8092bdbf1571de69fc4",
        "134": "8551d166280530d044d57daca86aed0ef0a06cdc",
        "135": "c65c557c85d9fd87d8dc3ce76af959b0ee709c68",
        "136": "ecec1fcded9c842431bc11bfeff09d13e4e8312f",
        "141": "d1ecb74416ccb66d1d0e0ccc0cb2b5f24627083a",
        "144": "f818db6858610929be8201316ec53cea53abebd2",
        "145": "123a33e9fa51c5a642f9fe562ff0c220e499b46b",
        "146": "a2a05737b306853c86c61ef6620c2cc43cb28c18",
        "147": "032f94176d6ebaea95416211d13f715f421090da",
        "151": "e6023b522990906c9405bdd33f93dd859895b2cb",
        "160": "ea23426f5ced369d9e5bcf8b8cd28a2056490777",
        "168": "63c867015fb59201a52254a0d7518352ef7209ac",
        "180": "42b2437c44d463dcdccd10b18d999a6e290fcdb9",
        "181": "b18fce9622121f800a83968967f86d31554156d4",
        "210": "9b1ef808cf6179cd8b3736d93b5041bdca25605b",
        "211": "49fba9d66d9e1e8594e293b3c972b2e94307179d",
        "212": "7e18deb93276557031545a9f4e2d02187c74f940",
        "213": "6ca4d16007c2ca0df8abc6290b585b504a29b48c",
        "214": "0ea491645b27b5bcf4467f99e93674ef0e61551b",
        "215": "f62080e63ed284b812aff4d852524cf311e8c345",
        "216": "90b798ca3cc89ee55e4ae1b9917e37fc265e9cdb",
        "219": "db3bae964b35b92d4277d6bc16a5c611b0f6ec41",
        "228": "ed55d8cae614fe79616c8c6c5074789cb81fdc19",
        "229": "1b6a088f4e5b7f1fbea48e97663179793eaf069d",
        "238": "88a0344b5f2a432d8413d9b4d6263314cf821c6b",
        "239": "982e6dad1df35b215a625715fa9bdf0f7d0cd8d6",
        "241": "2b9b896c954a93095bd6ada20554a0b9be325d7f",
        "242": "3f3dcf604d1eede47ea2035c671a0432c8b907e4",
        "243": "e4d3ba63174d19695bdad68322ab572878ea3672",
        "244": "7c8581633c55b2add022ec99bb679d741adb7115",
        "245": "dabfbaa8ef81a8dca338998160a7fa24afc65ec1",
        "247": "9ef9321335267f54effc7dd4952bf540efe9609d",
        "252": "c841141ef41475465944f057acf6e4314fc0e549",
        "271": "91cfb1a046983725f179c70e3e5631521c97d45a",
        "284": "3c8b1acdf73ca7bb838db3368ae02abb9f2b3433",
        "285": "b74a1004758ae5070578eb7cdbfd590269bf53d8",
        "286": "0bbcd979351a152022fe208fd555c842f205e076",
        "287": "02da0a33a828cc484fa1b8a4733f427e97378612",
        "300": "6b3d6d5b339f6a944ec7a655da13e5d4ec6bae8f",
        "301": "70bc8e4b69d49b539e77d88eca8be6e2c3ff151c",
        "303": "24bc406455fcb297e4f5e0252132a4e5eac5c01f",
        "315": "1573c08871f3ea1bb48dc9bf4a169de1de0d2b57",
        "316": "77b1deace4103a2cce497f3c307d632215122ab5",
        "326": "7808ed3ba86582c27f5292526f5d788c4fdaff59",
        "327": "fc2296c518cd2e10fc79df8d061ab5f7a364a108",
        "332": "b1cfa05129f6c8ca24d26980509c0446b2147387",
        "333": "5f928275885c5b50171e3f9c5dfed5e71e321aab",
        "335": "127a1461dfdc016ac21cd14fecff54224fa206f5",
        "351": "1c6e3623aafd6df70432dcc9a3339761fbbbfdf0",
        "358": "13d86ea2f3588f91dcad4705ee4ff79e69bc5a47",
        "363": "7803210c1991923b05879d8be969b93b007cd048",
        "376": "209e05b37ab91e4faa78daafe66ff5b26eae074c",
        "378": "d94d970164eaf4fb68f493ec8f888cb13631cbe3",
        "380": "1d41b71ce9b8d56ecb1d6b8c3ff7ed174fd84fca",
        "381": "301b25db56cb976b611afe74dc7cc2d044bd0ab7",
        "382": "cb0dd5213fceadc14a3b729208eacd5fd74db831",
        "383": "fd47655f51872f17d364cbab3b756bd98fdd56b9",
        "384": "50f7bba82197515bcb6ea442843fd78f22a52892",
        "389": "d60e4ec3f747194c4dcf1657d55a7269676ef6c7",
        "390": "bc71c83c931b0c23d9509158e0a06785ce658b4d",
        "397": "26c33cab9a1f3e5dfe251bd94f4ce9f7c73957dd",
        "399": "b7769f5f79a5dc3295c3f613d422ae050b9dad74",
        "400": "fd2ad1ff4a428ceb9516ae53e51a17367fc7ed4d",
        "407": "4fbbc11620fc4e29ab6b2a8c1a1c8549cd3de6b3",
        "409": "1d2adee183bf7b31e725683b1c6d7bc3b29fc27b",
        "413": "3d566beab0031632d53c9168651163d6a9f25d46",
        "414": "d062d7df699d09c6a1830ce72ad49d6cc2b9bdc0",
        "430": "9f38ad0a53fa7d46c7d747f1d0caa433066e2937",
        "432": "edb1f724b60c54550c9c0dbb562ea4c6adc69f0e",
        "433": "79b2aa57a261ac64677630a0d2dd073ca107f9b9",
        "434": "9e71bac269e89b84a403c4c2aadc8c2490f7d6f8",
        "439": "bff4b8c7e203f0e6e60a82dc5440f35c814caa6c",
        "441": "8994c72df969fe469de97f2eb05b4bb89d4375d8",
        "443": "5057007b215eb3e1b0aa3afd9b36b255d7c842e2",
        "444": "acfc441542ad1653fc489a63255c70cd1033ef11",
        "445": "3208aa6fbaa9708241146eb2fcfb16105d838c59",
        "450": "0549f453d332ca816de1d694aa07e10ea60216f1",
        "451": "295b8f9e5bef9cff8817b933b5fdc8bb63c9f191",
        "455": "c104f8117fe2e08634bd076762b3a103b0a03760",
        "483": "b78493ffb261d890075bc1025a92d06cb7ef8244",
        "485": "e1afa18439fdf11870acc939f4eb24cfb4abe08e",
        "486": "09683de06032564ec6beb7f9badc3734a6de6230",
        "488": "9caf0c38ef1f804d339b95296967ba3ba0039d0f",
        "489": "812325fd4458adeac238f0c1a8cd6770c1584f31",
        "490": "7188efc59d575517f21cf958ce1f8a54c59aa04f",
        "491": "1cf293202d285234ac30f04d94d5320af580bed0",
        "492": "860d16010d34e976772be1abc353eefeba88893a",
        "493": "8c2075ffc4780ace40acc67d1ed23d322a86a420",
        "494": "1b725da8c686cdb1f66408d3b0a443fb270d2428",
        "495": "cf35cef60b539d2f85e3c1c9322f8837f1adf7a0",
        "496": "c795f36e715f438213a459a3927a747787633e2d",
        "497": "a586bf682f6081d13aecce2fe127a335cadc3685",
        "502": "6dbcde3dcc168d4386fa2e7a5769baab813b5582",
        "508": "73c49c57ebc6f8b1c5d318a9bdfadb8f0ca86e54",
        "509": "9738b24322207849b590a55731bc5fedacb8c4b8",
        "510": "c9b7efe0db844141ef65c1ac228c124976486409",
        "511": "46c15f9107f9b9286f8245ff7d0c73e64cafd0fa",
        "512": "b5ab9125f59e729eb5196e7d098f7f57804aac90",
        "514": "6cad1afed47c46fae9df0b76e3113fafc90203ee",
        "517": "9e0fef84fc6686377328ffa0b244d408f799e06f",
        "518": "6940dc1b4ab8b6e0a70791f74cc7be24ab092834",
        "519": "d160af7ae399a2735933a22e65f11a3a8cd96053",
        "520": "459df2a6918d8176e8711e11c7566a5972736f56",
        "523": "948c5b9baad0b4234dff8f47495809438bdbcc1d",
        "532": "37a4208a9c58b4684ee6cb9bc5d1b6d05d179717",
        "533": "cd2cb4777c6a2494aa4b3ceb73c6188bee08a590",
        "536": "808a15f4bb18d346ec122bf5c4824ef5ac0b5fd2",
        "537": "cf881f35880f6d06e5929ef9733334583e694742",
        "538": "697566b5d5f7df948e3f3b57796b48f740f84dd4",
        "539": "c6e98157220150695d1cb955b2a727bf7675d8b2",
        "540": "2f7515bd043c8fab7810be136b68f44a90c1ad83",
        "541": "c8a709623810fd9f829ec484c6c3dce344e14c6f",
        "542": "b09eb7c2bae3a8816ec96cd6837437a3d01ec507",
        "543": "074ac97fc7dbe6c7f51ae1862cd9a5dde50c284d",
        "550": "867b7697460547c36b68f44734c03e102661558c",
        "555": "6a757cd142fa8bab550f9cfe72a45922004058a8",
        "556": "5c16ae0c152ec4371739573ed0a301c59a46393e",
        "560": "c3313e5553ba653255f74428ef88d24d0e47c2cb",
        "574": "b7f59fc2a60688502e2ca9d798cd3e42cc4e4136",
        "576": "adb3ebff590eb858eae9f0b506cb764441457d81",
        "577": "e1e153ed32935512b6c67a741449d26e5e7b7663",
        "582": "eedc714032829ba83651d015ed42c8ea0d6e984b",
        "583": "74f55f1c12cbd23300a75dc18adf482085623317",
        "586": "49bbb7f98f473a8e1fcdee592e0e25bac67a14ed",
        "594": "9896e7cd660a8e31ddbde5203304b2c331b65184",
        "598": "3cc7d04c1f542cd6c5af1abc2c8bf33e4dc030af",
        "599": "43d7af68be2cf907ea76f3103c49b83e17e6d954",
        "600": "8cbfb8720d5cba19e7d81ddebba91a14ffe1d7df",
        "601": "ca64891678a2ca0d7930cfcaa451e6edad21e2f5",
        "602": "37d7f3d23801bb322711445da4d2eaa8762d4f0e",
        "603": "cf08ed105b90b9520af9ac35723ec5f3937df7ca",
        "604": "40620f1f5349229ae6da65c8b89edceb32b72ab2",
        "605": "8235229dc63074644d4953b0d08fde637708504c",
        "606": "e2596552acce94d63886d527fc107d0ebe79dd48",
        "607": "da65bb207f771f44cf3b5d32c027a0927f35da70",
        "608": "45a93e7c08ca96ae927525465c89fdf48c8d5365",
        "609": "b60769a355ac751d6bc949814cf875fff88997a0",
        "610": "fe175a477942ccc4ab074dd422dcb2275c6d998f",
        "616": "f1c1ff7f40bbf99bd966b7fe9005d913cc914163",
        "617": "c4509e70b3470e9a2dd6f9424451838933bb05be",
        "618": "969a0e1b88905593d8889d3f630fdb1a48456ce2",
        "619": "a90b88c8eead3c8bf1f89a196ff0f150058c9811",
        "620": "974c3e56514fc43de569a6d392e640fd710de58f",
        "621": "e2a20738280d6aecafc086c6dd4e995df067fd0b",
        "622": "43bb36d16f12c53dbe3a20498a85bdb61db184ae",
        "623": "c6dba2bd0d9bc35800c2359d1607bfd2f77a3129",
        "624": "fbbde6d1aa72fd643799e5a42f1da239acbd43b7",
        "625": "f7b76b306aff207f04d335e61d504d08b8326a08",
        "626": "ffb28969ed5c69787c7efdaafeb2c51d5360453f",
        "636": "c8ce1d4b6b54cd387a784f5e93833177dda95703",
        "644": "252c3de5853c1524b27c0ada148f8eb7758b81ad",
        "645": "eeb0baaeb17a7b8db00ab15aa34eaad9da91e4a5",
        "646": "74695da1762dfcb3d8c8b86cc847aafd87580831",
        "647": "894c7c45811b0d3a30a57496138b95cf06090995",
        "648": "e06585e9967287af7f427e8adfa16ceddfede81f",
        "649": "5a4000661193f58a99f9425dfe6b3bc1698190a4",
        "650": "47b15ff2ce079b791fc60e73fc8f4df5ddda7c1d",
        "651": "f2aff5c6ce029b878ca62a257cc3d31aace1e025",
        "652": "3fc07b748d2b842605ece3eb6eb882a9c91ff35a",
        "653": "64b7667177dfccebddee3ac3ff8bc01835473e2f",
        "655": "891ae3ca0c5e87e8385441aa0ab7ec58bee09721",
        "656": "136a0e337189b1d4d838c36029bc20cabeb28808",
        "657": "43ba377c72d22dc4267385a8088c5e7b14d4d6f0",
        "662": "199bf9048e73c374afed761cef6f8f57f0921d74",
        "663": "ca8508d41a867876f96ee9e4266233dd8bb27376",
        "664": "8cc73ebc3b98cac0dbba48a5004c748557ff12f5",
        "665": "a77b95697940025902819a88567ffb1413d1e946",
        "666": "f7e123ab105a5a1f30e1773724023592dd8a1ca0",
        "667": "71b308f123aff1b4498fe14188380a6352d34d49",
        "668": "310f37fdb64a9e7e614e15a87d3704d72d205843",
        "669": "b1accbdd14bc20ae9c5ae6bd404d553311de3afb",
        "670": "eed5bd2a67261abb8e97eec6a35249254c41cacc",
        "671": "59e8b8b3facd68d31a7218fb2634e55b1b1c69f1",
        "672": "2d2c584ab862dda534aada1963d7edf2f3abb748",
        "673": "8370a52e0163ed7c5d35dbc5d3d4cefc130c2ea6",
        "674": "6488a821e6d77caed7e449248c4f084e3b4fb049",
        "675": "ec885223762485b5652a2cc4069508733c776288",
        "676": "298eea338c4d1fbe3acaa676a5033f1431785fce",
        "677": "d5cf5175e1ea9db9ca885d9334673f3e8f03e7dd",
        "679": "e0ef508936077d2e42a362bcf729f08c003de7a5",
        "680": "bbd49dc5e97b19cf9e15b256a3a29b0be9491428",
        "681": "3772786600dc7afadfdd494b85cad351d459af65",
        "682": "c82a5dfa4bc3dbaa2fad4ae0612c44ea6598647e",
        "683": "0dd2ab9e12f7ce5fbab95b1c1f6ac4e170c6110f",
        "684": "6c7594dff916ce19dba7cccc61ed5558248b91d3",
        "685": "ed9dba0fc17aeed9c58655ab48e87e110794f294",
        "686": "745a32c434fef39b3fafc8db095655fa3eeae598",
        "687": "529ec998ea742f7dc67de5f459f291ece1736245",
        "688": "aca8ceacb3509295cdeabf47ddeff0ed403231ed",
        "689": "951c9d0b83a6775c0e67a699ce0c37a75b5649b1",
        "692": "1b07f0bbc9cf0898320e1ec303a1906c9c91130d",
        "693": "477df4783aeaf7b7c99ad844e152c06abda30f9f",
        "695": "a48db9a94f9a955a897fe66e1144e055f180701c",
        "696": "57ed0c13b5af603036807902bdbf7c597314bdb4",
        "701": "0589ac36db2a100a9a2855e318b4269a993d8288",
        "702": "aa82ffdc8503854674058761e48c9a68ca749bc0",
        "703": "bc1e654bb9b2e8ed4c5d1376ea5a9d0df08e83f2",
        "704": "a4c955c2832e2ce683791e0c9e41e7bcf62335a9",
        "705": "d16cb53a607de87d991a87ca6e94d1d1d0d4d65f",
        "706": "5a83ff944d4cc378043d710f246626dbd2c4e3e2",
        "707": "bcf15db3e3efc65940fdff5fe1196c2a936a93a5",
        "708": "2df8031b9f461eca8b7416175055cb7ea4e5492e",
        "709": "4452225e6fc50cc29edbd841b22cfdc05fc7fc73",
        "710": "c4456116ea20b41c2bb49f00ede115fa9152cbc7",
        "711": "6f8fe358ac715002da78793a99d99d06199ec23a",
        "712": "660a865a4da1dcb1bedf2cb93482567116312514",
        "713": "fb900f4cd297b58fd9cc8243e4c2be84a00fb22e",
        "714": "7b0ef52dbbaa90320edff0d255d0285a2af8e719",
        "715": "d7596465a587204486cfb8da69f6a7c63cb439a9",
        "716": "65ccd0d556737c44a9849eeb814ef7f7762c803c",
        "717": "f982abe56c17984d52bae5e33a20545029049b17",
        "718": "5a1ed38345c4d29fbba9769c417ae3e43c622f63",
        "719": "7fa4454478afc31a488143447c207a01a1ee53f5",
        "720": "6a7ce4eb6b50f605440dcb2b5f69f0aafbc29a0f",
        "721": "962b984ccbfb29375aab806b63539e1b407d5552",
        "722": "f98907ed0cf058cfe4c45b8b125fcc2b8a05896f",
        "723": "0af614b0309ccbb72c48b5aeb539a934e624d14e",
        "724": "83acc5163cacb8ca0ac9acd90bb076234b4b1ab7",
        "725": "98c80f720dd127131c8fe38cd9d4779f14115561",
        "726": "b35d5eeb427e096642612a82f46f5c05ace9e727",
        "728": "1c01d87e592d0d3615c3ec1bcf3de774d41afdfb",
        "729": "06dd73ded47a64d058f5352924e8483575f5d1a2",
        "730": "fedc50d91ec5f2ca5e57f0720814bb47c02668a2",
        "733": "3f03b5149e8fea2125b7821230997bf9b2ac540e",
        "734": "cf0ce9bae9fcab7e14087d8b901226b7b188ea1d",
        "735": "096b83dbb0da4bdc45334fa0917ea1e610c28c7e",
        "736": "bd08b4aad9f094c5c701af7f27d11077e782d0c8",
        "737": "237989891435c8296f589b079c4394adba74bc7a",
        "738": "43147b6f387130d90e2a2ae1c601f20141c54483",
        "739": "2a242982373ad3b99f81bb01c5438d6160ed2744",
        "740": "f810b4d3e6eff6c1811b6d08f87f0eda3c269a22",
        "741": "3d158804d8641feca1ddb924861dfa6a45cf671a",
        "742": "ab459247eeeb4f9e2b7fcc9affb9c3d47c99be0c",
        "743": "276b0aad7c503cde7c3e6302d8613efd019dbb2f",
        "744": "aebaa39dfc92016132f181de2e0ad39d45458cb6",
        "745": "11f8fe481e16db46022e7ef8a70fa9cb4644507a",
        "777": "65e4cfa10fa226b3131ecd8551f091ad3f8d1466",
        "778": "9b3d4aee454818e24ac829b4b9e40bd930369363",
        "784": "2635f7f19fdf1c1f4d5f6bdbfeac264a994b7e78",
        "785": "3059d59692c105346f13748b124873bc8020995a",
        "786": "e2ec271d809dff5aff18df7ccbc19bc94dcafe0c",
        "787": "3627d920f8bbd7a4dbe422921fc54b00bf7049f5",
        "788": "8f84836e7eff4c2774c27c9ec64b7e3b40680552",
        "789": "49041d9c7bd0e632a0524fc225018e628d31c68b",
        "790": "a38fd5ec98bf7442838a0bf7b1ef505fea85289f",
        "791": "4dbe82de039cf85ab27aa665ee50742708977008",
        "792": "0bf834d30791ca04ff4a35d148bd5d62b3c10e4c",
        "793": "5a92630d3085731ce932bde958880a3691d97ff4",
        "794": "bc3fabcb827bcbfc0cc16123ca2f1835b072a604",
        "795": "20a82c36fe8090ba63de45861fa6a7a100938268",
        "796": "b9fe794004ca6a512972ffdf661843860c6c2cbb",
        "797": "17907118f6e8d454ab506012f1e0ffc5c52ca666",
        "798": "5dff4a26eba2ab2eb74693c55065ff3381f9bd66",
        "800": "8d612849f5f296e84dc76338ff7921fb1d1c4e7d",
        "803": "38be801a7d1c76c030b010531dacded48812f9d1",
        "804": "9eedf4f1fed5c529b36fa78d63a0dc22c804fc03",
        "805": "9ec295316aacfe24eb7d58e096b5a39f66918c1c",
        "806": "8e7f11730c0d157038194b910adee07e558b67b1",
        "807": "b880d0d7207ad1a16f9d87bdf35076429a356c08",
        "808": "a6af422dbd1fb0129ce2973d5a0c771e9de026be",
        "809": "05f7839abaca6c0f06d8139dc5217865332df379",
        "810": "5fe717199de76eef4202567d554791febb85a913",
        "811": "971e67fcf9adc8a4e5959fba7e120e2d13aa2444",
        "812": "eeba00ed6585ff821d8506f91e640ffa713d1e06",
        "813": "e86bb2ad8dfa52d27124312272aabf32b1ede808",
        "816": "a93d9a5903adc4c6aff74e9207b5bf80c42c0ca5",
        "817": "c572d5e344a79fc16373a254eed4d05a572d074d",
        "819": "a43bbabf9abcbdac5252c24d2d4e0e5d17ebd90b",
        "820": "c297c2e372eb1d576f4a4f230244aef0c9652bdb",
        "824": "36e90b29763d723a35db22fd4699ccb600d9cb9b",
        "825": "45e33fd9078a1867eeaa2d8a3db666a3f65a972e",
        "826": "2bf2a96fd6773a72133d0a0a4aaf5e399fd1e950",
        "827": "2f4a8d5b20fd79df4417b168dc9bf12ceaea4cbe",
        "828": "cd0783fa1f807f4ec3d0919479285f23cc9d7300",
        "830": "aa64d1d01e8b326746bd1002b7aeb9a04d31f3d9",
        "831": "2bacfe37e9fa162c71d2c761abc6df663ebd37a3",
        "835": "c8d6386f60fb884313235b1a4bb82c7c9a7c0018",
        "839": "a08dc253e96ca52411dfd4ba1c4b5e659b11fa94",
        "840": "dd18bbf8dc3371ae8cc104a1b35b34b8cd49c6b7",
        "841": "42c843ba64a928f7e491656c9cfffe39dedb0415",
        "842": "f0c2a6280474a28d87d18154c4a568a4c08f4c5d",
        "843": "e3ff6cf7e42341dec1a411db4acc3602c771eada",
        "844": "66d53acaad3555a9230ef464c080d18be301ad7b",
        "858": "3e0f5731be42d336955e16a91360e2d24b31cd7f",
        "859": "9c5ac8bad75649a2a032d583af849467febd4b6d",
        "860": "e128b6b0610706cde6b14bbb957b21cb09654397",
        "861": "28f8190631934a6ee714392bc1943da1e6c45caa",
        "867": "3e61fe6651bcf3da0c4dbba7cdc5bba2a0e829f7",
        "881": "529a5bac363e7241d04e3c0873f7460954f1a067",
        "882": "7001364ddf2a080d2ac568eb1a6b3301da4deb92",
        "883": "6c674da935eb90f418c6d16bc1625634c4b65ee5",
        "887": "ff06371004c030252bb3e9e73a65c75c15b06b62",
        "889": "2546f01761fa7df374d642879eb948f166c37db1",
        "890": "f2677e64b9ae934775e2917a6111254abd1e7b75",
        "899": "b5ea5cad9f8caa1fa0298e1120069ac736689391",
        "900": "6eee73dc3434a4427d66ca4cbcd76c0db4d6584c",
        "903": "32cacda18ea1b694428da35a6a9a3036043f109e",
        "904": "3d3a3ba6dc11bf842b4916d8381a00cde52bd9aa",
        "905": "0f5d0a9343e5726dc3d1066783a2f4dd5c511228",
        "906": "d00d85895f1b226f82a2b1b1293d35c5d4dc777e",
        "907": "d8f15fc93e60ebb56f9011a793afb0c899770046",
        "908": "52f073e94eddcda7ea270276f780b221a2a42214",
        "909": "57dd8c9309029897c7cc1b63000a11b386d11fe6",
        "910": "f3821d95852afce07da9de355247a11cb9029d3d",
        "911": "8dd2063f2f3592a710e27840c2b1091c597cf551",
        "912": "296fe77836d33522b244e60b7162d10f06a02d1e",
        "913": "90339073855083161cea86e9d4536fce05f43f64",
        "915": "49ee400e6ef66addfc987d6604f41df4845bcf79",
        "921": "66ae84359d00c82ea5f23afcbf094595c9c3e2ba",
        "922": "676ce1af6d146aef2f29a97b2f989e432b588588",
        "923": "66aeeebb3df542f6868ae68b181a280872c1eae4",
        "924": "d08bc7c1e51c2780573e0257afda83e3d9c0a295",
        "925": "76387be3b2533da8f400e2affb1544b49f82e387",
        "926": "efc23abeb93bf9e305328053d22c82f89fdf05ea",
        "927": "54c7d782798909d1f19cda9a5ef0946bb4fce850",
        "928": "7c0b3bdeb6457d8100c7d4fc2a2901ed79a0ecf9",
        "932": "5e731ec730aedebfd94a23c8c58d12639ed2d704",
        "933": "3fe23a669dc3e0212f2cafe7822e740e32859871",
        "934": "debdc76a6d23ae5064a4210d52121d2657f29899",
        "948": "83dbc41315aa7a2f2141fff24885280a6c2fc2f6",
        "951": "5058da34322d1c72e68abda38b511b1f1e7d02e9",
        "952": "49ad13d409c01c0d08447fcf41d2c881044de828",
        "954": "5102f9aea5ebb920582cdc4b42b6860bf5b166c4",
        "957": "7a742de61d77404d84bc70386bcef6ad87aa33a9",
        "959": "01d7c4c4c481e7c327fdc8521a6e8d204d96bdc1",
        "963": "995956535780826acbd11e61c5c346cdfc13ae9d",
        "965": "3d3caeef331518f3391be1aa56527e1fa3f06138",
        "966": "510fec3bacc26e7e4f34ae214b1db67456697b13",
        "967": "b99b852fdb21b0b73f3fa8605cbe90098f399327",
        "969": "7a593a83a21f6e14aaeabdcc14ee3e00159421cc",
        "970": "224acc15e70fe1599d9f980854014d5c9cb2290c",
        "972": "60717860ed57d9c5a1ef7753bafcac31c1f2150d",
        "979": "c085f9048726903d77cc46df2960d76a24aa178c",
        "982": "8a18fe1e3d61a11a37df9b6da9264bf0cc02c59f",
        "983": "bf4cea57c2f4e37006056fba26e289edee0f1dc1",
        "984": "3271c091bd72091627a611052c76be2c5f6aaf0b",
        "985": "10ee1f413406f3a93383a6f77f72a7990ead7406",
        "986": "cf9b93e359b320f6eba10f90ef4b8b0976dc2223",
        "988": "3e98738d7d38e5336999f57266de22da0f2cbd7c",
        "989": "a6537f65b7937442626c515e5ff5e68a52c92f51",
        "990": "6c3ad2bb612abe78f041834141cdbe4a5079c089",
        "991": "e29c7b70ef797f6ca08a0d1d88affb7833730c77",
        "992": "5fef43774c96999c3ce93e03141eba8cffc468da",
        "993": "5a208b4fcd6efb287510cbff94ec572715d6c79c",
        "994": "6a02c5e1844ad7d1b9ae50cd5dbae6975fb685ee",
        "996": "82aa492f43b7b7c2a9aa935d4fe101743c64e144",
        "997": "a9e581f0dda178bda11948bec620c2908f38c239",
        "999": "5de8e8c6c63f629cbf5275c6662ee73a7e677617",
        "1000": "a946c225ba7baf5711e5172966dbb2c444203d04",
        "1001": "7a4795069bee3dc9fbe20afb8f95280973eb7f5b",
        "1003": "772ff495e5f0fbfae1a740e3813609f857f5bed6",
        "1005": "676895fea4f071b53ce62506396365b117b5f747",
        "1007": "2a897399edc1554636b2f38cda96795677f942e2",
        "1008": "984fa4639d73132799589963fe33ed2f213ca9ed",
        "1009": "00148d1cfbce8c6463bd7be71f906f185fe2f5f0",
        "1013": "cc197a526360cb943d48b0740f70dd790636bce4",
        "1015": "4123f349e2e6d6dc4e381d29f913d631fb7ddfbb",
        "1018": "aa7db8474e1d8ea4ea7986217a73514ca93a3066",
        "1035": "70189727c58ec49e352e973b9bf5b14563f79e87",
        "1040": "7b0406e258b0ca4f245c8475323eca51a1fa57df",
        "1046": "e756fc7708a4253932c4fd39daafd070e08bbb71",
        "1047": "42b3783a1f480ae3dc3bd973aff657438dcbc3cd",
        "1048": "bcee4ef38a4ef25c4b73bb19c6b3b2f29fb247a1",
        "1049": "1d90e1306971f713f2b90b99051404c29a1df67e",
        "1050": "89817dbca2911a7ae688ab6ceb71f132dd1ea64f",
        "1051": "be09388657c3a157bfaf050db327b87e5487de9c",
        "1052": "19aed757b2ed93d5c1af67985f17b7816258ed45",
        "1053": "8bb3f97708fa7f69635645f50b2e19e5e4b2f9b4",
        "1054": "9101f8a4f0d8ff77d46b70fbdf05b96ad30094a1",
        "1058": "5e45268d003c6dd07b1119fd02903bbafa0d6f25",
        "1059": "e5f9c664367e7305687e516ad3ce976a0405ccb4",
        "1060": "a6609a143d3d8fa118ab60e0e85ee8bfc81994cb",
        "1061": "38dfe93be06ac97a2f9db9e22603261874ed7f4f",
        "1062": "9089a9a24d9592a1ff77f74dae44d9f9c4b8efad",
        "1063": "b130fbd750690ed707a1364ea8ea4c171cd45776",
        "1064": "40af69656b71cda7f775cface3478106f070ed35",
        "1065": "28060ee69bab744d1ca9b9f0152dafa7365b32aa",
        "1066": "36fee823325740c96704d22bc902b18d78d5a9d8",
        "1067": "01e579363b496ebf72df5b53f1b32ab61b5b78c9",
        "1068": "4d437c0607c89a69296ec89bef0a21fdb47c4648",
        "1071": "d299f48e430294cdbf8a0abc40d6e564f4898a30",
        "1073": "b6cdce862421afc21072add41ff49959df581c14",
        "1077": "20981cdb93279ec6154a6c81f4da45840ee65a97",
        "1084": "1f38bf19e13f0530c94fe263fc7376d978a0cb09",
        "1085": "ca8c32388ec83288502ee16c0f821eb1c5fa7d6d",
        "1086": "d15a4400eb1c248a3de1cdfc3ae3026677f9e260",
        "1087": "f4f2d41997dec816554f372dfcae509ecb1600ce",
        "1088": "e26a670053c3e5f0810b04a2c5fcb715910b8554",
        "1089": "5c3af6d1febab5e1b9712c62e2a9855c2c5c79a3",
        "1090": "3aeb50cfdc7b2c54fceee61632c6e2232e0a297f",
        "1092": "cc56a695e71f5d4689ef1f65c9e50349e7a6edf1",
        "1094": "55d2967f70123100ba03ed2edda1c80691ea3941",
        "1095": "19a2aef51937cf41bb42cf4b6a7ac899266edf5c",
        "1096": "0287258c7017abbbb781416258b686145bb7d785",
        "1097": "b67e8d14473c7088a8f7b336bfa0d73d724826c0",
        "1098": "5a62d62996d5992579558d26590566f61ce8d64b",
        "1099": "68ab07714b863dbf8a5edbd1da4636580b6e11e1",
        "1104": "c057fb8f7a43564805f8db164a67ec9f8ccf8a81",
        "1105": "fab357d098ed0647aae29cf2361c5d7aa9e38c8a",
        "1106": "1c57230eeae2f881e287f74a81ad6db489437d36",
        "1107": "fefe21cb17c2bea47f756e590b2edeb1e7c5e2b6",
        "1108": "c3af90f71694ccd2a3d8d9b330cc162d57781410",
        "1111": "3bf23f3df5988bcd786449776bf4055ce8177561",
        "1112": "45ff2dd13b2d37c747836c544d1120c8e6f1d48e",
        "1115": "190936d7a9bb06e3a47c37c88eadcd47289fca95",
        "1117": "5802e8ea4ca79d36201fda9c157620510043497c",
        "1121": "d3325c3c1489ad4659a138c5afd71c7fa0b18a28",
        "1124": "0a9ea1f6fd0b575f6b9d01ee0789909a20fabb4a",
        "1125": "d3f865b55962c39c1d426f5227dc17f04a6b0627",
        "1126": "d0d224db918ca203e029a3ea25081a9efe38e352",
        "1128": "669fa0bff1371cced8bfbebbdece085582d1f509",
        "1129": "5840362b68809e3085f88a2b85861736bfbb2fbd",
        "1130": "d264bf8e8edbb6b1637ad9216c75e60653a61a66",
        "1131": "94819bfe347a6067a27f5522933d1d45d6630d20",
        "1132": "098a4ae50139fe90c84eef1c6752fc28556bdf13",
        "1133": "5271b25325775a40c38bc3cc24159228f9884c50",
        "1134": "4f318425b334193fe330dde9ae3a070d34c2529c",
        "1136": "d72282c30f98b92af8752d3e2d6e406a50262823",
        "1137": "dfba8c7b7fd5461d7f4a3d1c2e7cd79e92a6759b",
        "1138": "cfcd50de350c74615902362f080a1893ae8fbb98",
        "1139": "a751e7f51412581e14cc822f1e443ed97746055a",
        "1140": "495b0ead142f8cc27cad4eee49d3a95bec2a9f5d",
        "1141": "a218a64e47e98877363451db0d4585b5a7f35192",
        "1142": "b60eece9681e0d53960ea4abc8a40e7d364d5f40",
        "1146": "5b81225fe56ace67babab6cfc87a7d9b30947b14",
        "1147": "9dd8fe8be64cde82a14d38dbffec5a4b3ca2b53c",
        "1148": "3a4f71ea3c79248ebeae8094241f24e720edd8ad",
        "1149": "9f2d6f5f924f75a0c9d234848041bd9e0e898010",
        "1150": "c603ac7064e7c01f951cc09a01ae9c8c9d96442d",
        "1152": "4524b1e6db4c3b611af9d3207e605a230aff5524",
        "1153": "776054aebf470e8c2fd569501967a5d6abfaf8cc",
        "1156": "9633733fce051c76b335a29b6a0477cee7d25e9c",
        "1159": "5b63eb52edbfba78bd2fb5b678a81270f20d04f8",
        "1161": "6fc896af7d0df578c42123d4db6b0aae284196a7",
        "1163": "d9ba16215831f8dcbb84e2489c16052a68a9ac60",
        "1171": "d6fdd7478aeab4f0806a8a72b6a16138b2e83975",
        "1174": "35fd0e720dc49b7f3821b7e42eb9a1d618bac8b4",
        "1190": "c9f6adae5a50da9c6a1311aed7b3a12268a8ed73",
        "1192": "6cd4d147fec1bdeeed8a938ca11e9fbfa41507b9",
        "1194": "b03192856d76db8b002b6626f5b79a81fcf40613",
        "1195": "e611e10b23a065a4b9cf084f23cee13cb3c34726",
        "1199": "4cb9e4f0b3cabd9e6a144fa4f3f7e5d6bee45635",
        "1208": "03fbdff7f496adc2f200b3257384f85163707991",
        "1232": "33e23230315f7a922e50264948c42b2c68116cc2",
        "1234": "6ce7859b0106eb7085334dd740216a576f6e8850",
        "1235": "8b2788d5d90451d8415cee4f77a43621d52e8d5f",
        "1236": "9ccbda5e1f76c148afc8b3d1e869b2744d7836ff",
        "1237": "920be84e6d4a921ce5b81858bc33dac157ec9d09",
        "1238": "d79d29cee26c2816d193d4fab33a3f59070fac5d",
        "1240": "074f110d2d126fbdd74b57f60f1e8e76501eeef9",
        "1241": "9d7b856ad1e01fe12bb21f4b37049b9388e2c476",
        "1248": "96e50d38e33661f34515c4752d49f2726bbb7d58",
        "1251": "9f5455fcb7c1689b7821f4b445c9145e913879ad",
        "1252": "c2e9c96ecaa77225a874b9eae2ecff3337a5b11c",
        "1253": "c8c47cd20f1812076cc794c4aeb958105ca2683a",
        "1261": "f671e8d891f8db6f48464bbdbac111f11a3dc768",
        "1262": "14efb3e544674fac20da510cc7ca63caea8d33d1",
        "1263": "2103577d43a136572e81ddba837de09b5bee1378",
        "1264": "1d283c050052b58f99b31b2c616fee3d77d6151e",
        "1266": "0c45c839afa34499616d2c3b8eea36575b26ab16",
        "1273": "a05bfe3cfd9bbb2e413717060104a150abc90455",
        "1276": "a407ce1836b4001a9b411517c0ae279390aace91",
        "1277": "b64f6983dd6d57c0746bf73c6cbe19812acc44b1",
        "1278": "fcdbc746c82e7e05419e7e6a75c21ddad709194d",
        "1280": "ba0a5e72f512b31756c5dd049332347c4bf67343",
        "1281": "644316648ba66b705c807e8bf26a419627a57da4",
        "1312": "4493e6b0855fdefab4d330131f0211d7d93836dc",
        "1314": "724d04a0f603bb956ecf37a2e15041cac691d387",
        "1317": "df686250a6dce4cd13eb05d06101a67255e6079b",
        "1320": "0fe1f286337d26f23649efce65ba39634b4ae11e",
        "1322": "8072419a035fc478fc1607889c247b586b12c4dc",
        "1325": "e3093529b3436d22382fd043eb3f82f338ba5fe8",
        "1326": "98bde5e80e40a3b89ba2e9bf689920f1eb3d3e34",
        "1327": "25cad1bdd1b99b1a32d757b12495a1c9a5ef142d",
        "1328": "0e3aab9f099e267d344fd4b4649d46aa35c8ffcd",
        "1329": "b670d5bb5d7f18b299cd9dd39478181f8e4e9706",
        "1330": "2a9cd0ff54163c027f4556d2b778d3a8fb9b6d7f",
        "1331": "1563624d563e712ddee1b2e34013edbb6a4e6f85",
        "1332": "e148ef6a98b3334e4c019bd648faa961a9cd1e30",
        "1333": "c872f59ec112c3f611f89b895ee4dc12ad65aaac",
        "1334": "330d29b8ac56ecdefa3db34b5d688101ed715d1a",
        "1335": "c850327e000133c5759bc3091d3870dac74a04f4",
        "1336": "38f0435a2b5edb767c0d0b1628201e88d03bda13",
        "1337": "5f2ff23f09f91e5b96f16ba0e1fe8490098b16ef",
        "1338": "afdf8e649ad4952fdddb80edd70fb5d52e0bbd0c",
        "1339": "f471a23525edc75231333b34c6f0609a535c103c",
        "1340": "8f8cc2c242a215b30340ac73ecc8e1df896d466f",
        "1341": "1a0c5442fd7da27de15f01d5e9925eb7d38dac95",
        "1342": "9094ee7070b2401487df26dbfaf85deaa88dcb2f",
        "1343": "1bb2a4ffca7934a7c7bfc4c2c47060dec8f7f0d0",
        "1344": "323945bacf0a01d6978e2ad4e453ca12d6c2f4ed",
        "1345": "c3f35e76f5eb8b82d595f406c0a5a7d0e9679326",
        "1346": "01dafe2aacedbf8a94350a88a52c78d42d3fce03",
        "1347": "fa9ad69ac6bdbefb40f2ae1f766c1a74623c78b5",
        "1348": "7bb57a5de0c2a97c314df7a2e5852b01dfcb7ff9",
        "1354": "595523f2469cb5925e771aeca05ac607399350fc",
        "1355": "375ecbee90c6193db9e8623d601b4639cf339f90",
        "1356": "31f1f6960328273d45d53ec7f161c99654f17510",
        "1357": "add1e2cecb006a4ec1df4c76fbd49561ab20787a",
        "1358": "b3c7b11df4a991694090589a31dd947cc1550241",
        "1359": "32cb063bf61d27771fd64d7d51ac90d44e557705",
        "1360": "de3a068d5b85c9267c9609842b76b60bf28b755e",
        "1361": "81d4ba9bc95c7aaf433ad26bee2d22daba54f54b",
        "1362": "eb7501a62f8779a139c9a1714548015e53dbcaf6",
        "1363": "4b575c9ef19d46d095ad1cb7c9d08f17283757b6",
        "1364": "f4075adf7fef4065706c65783ce2d6d93fcfe128",
        "1370": "da7b111a15b46ef2047130ca40aafa29da118500",
        "1372": "afb7a1859a3e8a256ebd24f0551b9d8a50a20a7e",
        "1373": "d6fc1a6fbe44066b02cb131450a018e94aaceaae",
        "1388": "576390c065da9b6d3e413ae80507150b8677e25e",
        "1389": "fce0a13d2f09985086471665221a487e7f073fb6",
        "1390": "45ffe0fda9978295df44500abe189054890398f7",
        "1391": "5ca9331ba216533b48b45fbc851e105ae2a082cb",
        "1392": "0f016110a19ea651974627469f2325a13d8cf624",
        "1393": "24b80e7fb712852b263cfe03fd7bc5c78ff4bf91",
        "1395": "8418bac6c00eabf00aec25941a62fbfca84c027b",
        "1397": "ac1b7e3ca0d9d0a7b5352d9d2c988edf18a3b89a",
        "1399": "0999fc2c9f54aa3a33152cf607e479bb9b672b22",
        "1403": "28fe5645791635c6bfa7696b8602b9db6b9e806a",
        "1404": "f433e4368a24c592050d15fe39e7aecc86c64010",
        "1405": "ea2aec2b48aa8edf93c6c3c2cdacd63d79369bb7",
        "1406": "6cb5baec7c9923349470056411dcfb3c6303d937",
        "1407": "caa8b082d6adeb25867295b7038a77de5202e84d",
        "1408": "6c40a372d3b6292c4e300176e928c20971e4c40a",
        "1409": "a97beaeb648006e526aab58f70617fc84872b35f",
        "1410": "8a2e7fb4a46e8cbd514738829f02c84706cc6c1f",
        "1415": "b1c12d4ef97693d5d061b61a0cb83599fda1e733",
        "1420": "ed97b7f3a81a855b7d479ec58cb481ea58dbbff8",
        "1421": "67dbc929f0be96a573ce73c6ebff9d6401f0624f",
        "1422": "d7d4330d8c686da6a13e0e045a7d6d6b39cd679c",
        "1423": "a68bdaf2507dc9bab648c75907c1a8c8a224ebf0",
        "1424": "e6d8488436b85c05687b795f8784ab41e820bcd3",
        "1425": "07f20a12db0e5e0d8bced65fab6584e34656a2aa",
        "1426": "e895959fb35719983e1ef6ba9aae3af52391f791",
        "1428": "3baa3bdca1ac7a8787ba1d084826acb70cce9405",
        "1429": "0b2197a5469a5cc605b7963f0e0b34e801ca35a5",
        "1430": "707a5f4bc557eb8d894d9311cb00c781efefb96d",
        "1432": "62e453ba53024983c1b77252abc596f2bc39366d",
        "1433": "3b81456951ec8690dd834f46f6070b530e6444d7",
        "1434": "a2df42a2e30ace20df957eb64106b94a05f22a7d",
        "1435": "bb585ce8e95fe90d690c6a7a30f825344f818b25",
        "1437": "2c768d2f216dea931f50dbc563785ef814bfed67",
        "1438": "45cdbbdf0fe6295285a422cbf9c5d5e4bf1acc66",
        "1439": "7074ce3a3812f786f80d6cad9266b232a5e91239",
        "1440": "0e0eeb73585e8468882e6e6f4e8611ad32ad2ebc",
        "1441": "85de5e72d6369c5ca03cf853d41aa2b03881c123",
        "1444": "7bc18ce65ead0f481283e37a2b878ac4f81db8b1",
        "1445": "ef2125f80576118ae6a8400bdec789b7c22c6c5e",
        "1446": "ce7dd7070c2be3ea38d72966acf6b0d07770ba46",
        "1447": "0c5665d68390d1db34f2f5fb1a29675dadf87aeb",
        "1449": "2bfc5f6cffdf9c93aa9f6e71ce7aaea67f1b949e",
        "1450": "312c95412898d221333de82e65e0819500decb5d",
        "1451": "aa777a9995316f6233122207b1ccdfb527514969",
        "1452": "062359126b09d43a89af2684f35d02356a7df438",
        "1453": "3bca6e8abccdc0eff85b1e30cad1daa20af892b9",
        "1454": "7f01e93b3145c3ef62d6f34589588c5850a44e56",
        "1455": "a8d2769899dbe2d4552bd26f441d5716b49e4a24",
        "1456": "5497f6ec68b1b6ec04cfb9d063047be6d4627a67",
        "1457": "ae68d58df44f58dd1d4613a7b15dd451507b9aff",
        "1458": "3a15614b61199ca9167e0f5d7cefcf0621caac3f",
        "1461": "43096e150bde9f019664c015705093da2ca13f43",
        "1462": "a2bc9c1077f07816183cf77b509823861a5da39c",
        "1463": "fdd5ec82c9c9e72e2dc7a38aa3ea0dd95139a236",
        "1464": "ad3219a504255d32b3b7be9391ba24258d9d9986",
        "1465": "f6db20f6f6b79d669db32585a8168c4f26a2c232",
        "1466": "9f34260971be07f6217556f149b96ab7750e737c",
        "1467": "eba340cddbdd9ec6a6aa638df7c162c7c51204f2",
        "1468": "02ac48a4b53e284b347b734f2b57be5c3889c783",
        "1469": "61c6e15179d50a4c1929a6773b5a41d9f26979fd",
        "1470": "7eda563e4fa482240c2b4436d8f52143a201c495",
        "1471": "2301119f2b9f17a2b274fce69382a83d31099bea",
        "1472": "58020d84e81463d161e363f5d350d70bc0a5eaec",
        "1473": "eb01755b4025c26fd2f19f8f8af231e23ff26edd",
        "1474": "d137b8c0032e62ea9f2e6d38d491feb6fc356e7b",
        "1475": "3586fd27a43bce4d9499d015e0a931eecb220f1c",
        "1477": "a2b731a6968dc4b592ea358ab2732cb306e16775",
        "1478": "0114cf2a10bc711d79d2aea4bca343adcc20e4b2",
        "1479": "fe8aa4e23810e243779605a016853e12f05fe83f",
        "1480": "d6cf9df23e8c9e3b6a8d261ea79dfe16cfa1dbb1",
        "1481": "f0eb80a0029b3f521b43eb1d47a05ec0cb870323",
        "1482": "6fd178ee1dab0cea5bc271ece16626a73cd4361c",
        "1483": "686da2bf6b71961ea82e72640b7e6ff16c4723d7",
        "1484": "b148ca04fabd5832f6c461c58e75acfa1ff5b94c",
        "1485": "1d557fcb5a8c25eec1ee3951d1293607720c24f5",
        "1486": "e78c9f7988d61cf30cfc45629904dcd9922f33ff",
        "1487": "2ae4b4e604e9b1e5a64b11af784b37dc9d3d170e",
        "1488": "97863d689a095c1cf65b5205e9b5f486ca17d5a0",
        "1489": "44d0709189f0b5c53e115642215d4a446540db1c",
        "1490": "a7c3fb82b9a9e952a2c89c11b48181b2da0ffbe5",
        "1491": "c47ab64baaf4fef4982274945e48173dd52e9955",
        "1492": "fc66667a3d83ea5b7d91d92622dee31eabb112d4",
        "1493": "3ef1f53d159bfd286d3deb4b6df091f42504b073",
        "1494": "efc966f48862a41d47395235ce23115f6c50cb21",
        "1495": "cd555ce5280e0747d310d2576406b2a77fde8859",
        "1496": "2e418c33a2ed30fc8d0da63b1fa9654f665e45d1",
        "1497": "d504cfc96a993d87744eb9148975382e0e3c48ae",
        "1498": "159b83321b05f4110971e58e82c60b6739e605ca",
        "1499": "451f03d7c912c72ce8be94124aad287304a0f3a5",
        "1500": "77331001571675223e8174c35475877fc5d7096c",
        "1501": "c16d05b8567132dcafa38d057e49d328d434c5e8",
        "1502": "271d99e7f94b78d2ff498fbad78eeccb38a63637",
        "1503": "8be64661ba9db66ad8dc054ec9ff0a3ca4b567da",
        "1504": "e144a842cbf3c4ed6ac90b4fbdf7f2fba2ff93f7",
        "1505": "a6cd01254b4afe45d641bf96d47374442eb818a4",
        "1506": "6d36bd435d81bbf2443f8b63820bf85c07e9b10e",
        "1507": "081244b6844998a219df699a6fe14120de5129ab",
        "1508": "6641567e4f4e843f8ddb56f135f4fa3535dd3df4",
        "1509": "8edf55cc51250692e5a6c382217190ad0a994eaf",
        "1510": "27728265baaac3a8bc17dd61242730b3805c6400",
        "1511": "f5669668a1fdfe61e44f077d6d94ff95a01a03a1",
        "1512": "5503d2323343f95807d5a03ca1ab01646089e295",
        "1517": "15806d007bf8c963b3a23cf514e8692da2b27ddc",
        "1519": "9cccd76bbb78bb80333f273e7b7ce6b9948742e0",
        "1558": "87c121d05f59a34aea55119f6a925d3a371a3ed0",
        "1574": "36ba81af3818672db68dc2fa07b87fea99aa121a",
        "1575": "ef610ff54102f885ab75e71fccb6167e087474f5",
        "1576": "7585e25fb104e0b0f5510055bbb344dd9bcf33a7",
        "1577": "1dd2afa238bf002608fb620f4fb7deb3fc2f172e",
        "1578": "3e85e6886015ecdee141518f8b41285221d326d1",
        "1579": "39a837615d3976bc1358afffd2c29c0c90f8435b",
        "1580": "173c7665284d835f1334f14aceefa3e1a079a65d",
        "1581": "3e03d2b1515e6fb00fbdfd389a2bdae8d4664f02",
        "1582": "c932c86299031db5fcd5358cb2b9063ee9a676a5",
        "1583": "ef9fca23340e2e78fdfbda81ac1f275a4ded98fe",
        "1584": "2024621e8a24dd0c201b2066189531fb9f859599",
        "1585": "1602090132336d5e995836132ccc55900aae03b8",
        "1586": "f74aded45d4bde9530cd16a1059ad19e4d172bc5",
        "1587": "9a60b0ce84b93a62b8895c2667cac32e047348f7",
        "1588": "229eec590aef0c3690c498be3203a6b5bcd7252e",
        "1589": "ce121aacf8a5799defc99ddf68a2baed34cae0af",
        "1590": "362b98cbf86fb032fb7d8c76e337aea91d8eccbb",
        "1591": "d3382d2e78b74cf26d1ea170a05d9ee6c623dfdc",
        "1592": "d7d835b0ea336b1e2824f340caef1b9c5042cab3",
        "1593": "64eb184be1fae395e8eb820fa0d298039b3c0c08",
        "1594": "efc5e1813fa72d6d6d0099522e5fdeb5f0b2bbfe",
        "1595": "44bbe550bfbf88a8f1c0fe3b92ce93918259f382",
        "1596": "3474f715864fae1485bcca809a955643b3906c3b",
        "1597": "cb94ecfed8445a24a390075d8ee565a356ce13b4",
        "1598": "fdc8e2a182092bebd4994763a861067f3d8b6cf0",
        "1599": "876655f9d95fd3c12b3ebe4a62be60510467e3f2",
        "1600": "9ba1e29536fcf85978cf7176d68ee2d8120b36f9",
        "1601": "8ab05b4878891532e020878e11921eae1a964583",
        "1671": "9a5c27eea0f5bf9e3b304261993bc2e21b394cae",
        "1673": "bbda46a4064f28e4de81ed4b5a270611f7d4da5e",
        "1677": "05d6173778d568fb73bdaa2fa34a5cf03551da46",
        "1678": "09fe070d4e3878e2e049c55814bf8241e3b758e3",
        "1679": "f6eaf67bc07801d3fbc58f9a5f1814b346b03097",
        "1680": "4a578886176aeb19d260d58a7349884a55ae4b26",
        "1681": "bb47384ca7f9725b5f933c22e38daa717cb8bf5e",
        "1682": "8b9575617c26689d3aaede89e3421902548b5a54",
        "1683": "21111c23ef2e8b76c94ec8b787a54d61850448aa",
        "1684": "265a23f34df8b6da3553806d8527141e098c2fe5",
        "1685": "8e048478207ddf714e893c3e61dfaa2cfcedb13c",
        "1686": "69aed41aa56b94924f84f745e8f65207cbdbb22a",
        "1687": "7daf1a5e5dc249538abb5571edfb5d49f256859a",
        "1688": "ebc55d65a22798e2fed8e09fe1dadc295d833b62",
        "1689": "5021661f5c51403ffa7323f5fef5259af13c8bd7",
        "1690": "5e4133fa37b0ab317798603504364bdfa77a902a",
        "1691": "5bc780d5d8e69f8953dfb7c573530f34a7abe232",
        "1692": "ddc414372bf50cd96dc7190840e7274a5752530e",
        "1693": "ae8bbef7018fffb5725021d7a2f4a9cfd5b7750c",
        "1694": "81886fa65f59a7c29e1fc5eccfe334f07490a147",
        "1695": "c25f013289a5569cedfa1685926a3cff583dd904",
        "1696": "58d61b73b2b49c846ebb6cc6af318be4010cc943",
        "1698": "27fd40fe7151fc9be866155770acd84aea6cf471",
        "1699": "f360d863f74c2eedbd773e0f0ee4d40c0d68f8ab",
        "1700": "bfcc32d89b46175b76696d689c32ab255ab46bd6",
        "1701": "bcd42cb60a9914ad608f7fe4c89100b464a8735b",
        "1702": "7cbc6ae58357ef647a007e1b505884e523d924c2",
        "1703": "2be29822e5ac6b36d39c79ac7e1790b728e14939",
        "1704": "ec124d5b42ccedd8748ff3ec36f6b56344ba0837",
        "1705": "6aa8b41580affdba15e11eea1df5a52fbb42c4dd",
        "1706": "425267eb52ac673c29d349806564bfb5abc0e9c2",
        "1707": "a3218fbe1822490775376adb15c4d693d65b9401",
        "1708": "1f8c02a2562b27f553f17cab382da5816d91439d",
        "1709": "d98d7d56508ff3f4d1a476ab587a7f3c6d8e1378",
        "1710": "417cad93c35dd74c91ddc9e8ccf3449d21676018",
        "1711": "ccbbad3a8b6a880a438294c7b9a3943fdfb0a143",
        "1712": "a592ab403fb0a383d2e73155962249aa4dfea766",
        "1713": "92db3567b0258ee5876d742f99814dc11d837c22",
        "1714": "b1f371fb8208bf935816c9e52d2566b153a1e8c7",
        "1716": "f007e1be9d58e47bbad43efc030ef2e29fbe3b34",
        "1717": "05f04e7533d1e6b79bfecea4a337c8339a2e784a",
        "1718": "15ece019a19ba46057e5c260c94f8a9fdda8c55f",
        "1719": "4451f7a1f8ae8a37f6fd677de553e8edc44c53ef",
        "1720": "58b4e708ffe5b8b171e1b5a51616a8a9529ab3d8",
        "1722": "fb52afb55e95e4cd55e8c4313313ea4ca0d05b4e",
        "1723": "9f543ac5e4d375314833add3128e90ccf9ece2c3",
        "1724": "11882eac49b66aaeda596dcb0e63260a780be0da",
        "1745": "cc933cd1ea96befaec57ef0be57fc3622b7227fc",
        "1746": "7b60d503f47616c6e0aaa1f4472019711f1cd8ce",
        "1747": "29418a3cc245cbca30d144f28f4f3e181f3e0864",
        "1748": "1cdcc3ada4096a8352acc7f7c3e7825a7f44e0ac",
        "1749": "97cd87b163d4943557590bc1bcd1e3cc4c4080f6",
        "1750": "1ca3632398f7b4948ab4540e5de931c9a6c6a15f",
        "1758": "f64aced5a7c94a434fd2d8c678d93ff8ac3ae1fb",
        "1871": "f6fc8076afe6e0606d5879cc5c86ef032321dbf1",
        "1872": "c88b87bc108986ee3d5d81bbb7e7659e11ed5460",
        "1874": "acda2de1d6b317308a4a4f75d707774f06f16062",
        "1875": "186a125711ee1eefe1c9b624208a2d5c53a1850e",
        "1877": "8c2275377763e654bc9610b9aaa46eb7ba1fdaeb",
        "1878": "c63bde04038fb4096004066e4a40d85b9d633401",
        "1879": "52212494679542774b9e5dd2b0481a8763fe6762",
        "1880": "c2459c30d1473ad95981f99f3cc697945a59e6c9",
        "1881": "e267ce4040b3ccd2fd369ca107565ea45bc1fbb1",
        "1882": "3bcd4ef2a2df167540736a2e1e1e57aaf03849b4",
        "1883": "f5400f2f2c808b5100ab5a187477c51d1a475411",
        "1884": "07baef058eae0ff610306e2131878ca4fb9f1648",
        "1885": "81bed9b41b974167933fd3b62a256a4ffea05a0d",
        "1887": "7bb761f622a5985562bcdadefffc243dbe799c0e",
        "1888": "0114a9a5b21fe72ef4d9498ce5287b3f0efad641",
        "1890": "0fe7805b524ebad277b75a12b7f8411c3f03c261",
        "1900": "e123f8802441323beab5f8841a5f0504f7df0bdb",
        "1902": "569640d85b68628fd8a87e6c7407723fa6bf6080",
        "1903": "3dac18582046cdfa1f9529ef4c2f5dd894ae68bc",
        "1904": "f8792e8ea295bd63377d7a8c9225efc0aea05684",
        "1905": "27e9e102a7d07f5cb22d3caf79b18f69723c8901",
        "1906": "6a34f1aa9beea02030e9a6708ce0abf96485619f",
        "1907": "33e539b5e142a32afea476c741f1b1609ba2f1d8",
        "1908": "c669e4d43b59d899b823e38261447974a760e0d5",
        "1909": "05fa39d50c766f146cde3526a8c84a065523c399",
        "1910": "370d3a01a02e1f08fb3155c17f5d571e4c757875",
        "1911": "e2bb18833add12c7580dd009be6c36a30b2efc56",
        "1912": "ff535f3960f2ddd7268317023517df7009a4a922",
        "1913": "4503d2327b5f03748a301a04b0a705ada990212d",
        "1914": "3d70db564e17ebc3ef12775982b039437205b018",
        "1934": "0dc5782c91daac8fa9be9c880d83ddd4a927da17",
        "1935": "ef3fab4f0b8ece8e21bd02ab03308d7db5ed9009",
        "1936": "ca01040a98033dbe7d943e3c533c7a4ce5a9f9ea",
        "1937": "e95131a4bd50105d41a8971f126bf30c45593f6d",
        "1938": "8a115fd455eccc2cd218c81d2c076821a69aaa91",
        "1939": "73ff8697d06ae573ace332f69d488d49941676b5",
        "1940": "e5f513fe2fe6abd21a8fe3a072ca83794bd4dc30",
        "1941": "dddeb7b0169881b738bde9c3d8cbe697e944222a",
        "1942": "3ddaf0d847ebfd48d772d863f2f30685bd849af4",
        "1943": "52ee3ce5a0bf739ac0371f86ce3dea66f09afc03",
        "1944": "39073dfe569959382f80f51e5ba318b9fbda5695",
        "1945": "c420b84db0da9f90b1ed2b67b8176f0b30894776",
        "1952": "cf594b19d1c8c3943c4a3b5c5f4e26c4baa971bd",
        "1953": "f2b52db3912ff12bf7aa46ee76a651db30ba67d9",
        "1954": "874d41dfec7d6a51369729dfb748afacd18e93f9",
        "1956": "73658d55dc64a7a442b09c7f401f79e887941841",
        "1957": "c8ae6aef1d5beac5f03405d0f45d9460ceee21e1",
        "1958": "d0218d6ae8c754254b056dad7b2d0782dad0ef38",
        "1959": "511d3b9a42f740873877758882d2ac2aae377707",
        "1960": "980fb9f299180e286e5e4cb373469198084885f8",
        "1961": "09db42e4ce784f63be1e501cf2a63e80ff66a86f",
        "1962": "f724158a6401d2b0c062fab0467db2c55eafaa22",
        "1963": "94423fc3a0080061caf30d1145d5d6e23cd918cc",
        "1964": "5024a63213573ec129758e08c05615a87c04b4ae",
        "1965": "e297e7a873b36478c0ae241c50a2e48a36fc6902",
        "1966": "614bbe57d4f69b0348649562e303dcd6332ac7a3",
        "1967": "9795586a7347258f7bc2ef2c0be687c9144b9136",
        "1968": "8ebc3e3ce97432c0000f09097f7fe18336f433be",
        "1969": "b42ab0cdb1cc56f5f1bc4b10409d61127ef8dc37",
        "1970": "02c23ac302dc692aff394d3346f545c2eb7ae71d",
        "1971": "01c921386f2b48e4c880b029ad9062c826184459",
        "1972": "cba7598405fe0791b572d694de4793588c5b4d7c",
        "1973": "3df91bb52cc8f2a3ec605a6ef24802c89a5e1c48",
        "1974": "3bde0928185766e9b5abcd2f15b9915cbc925a6e",
        "1975": "9c6a1db142139e93026235abd1bfd7ab46ba80a7",
        "1977": "9914740e77c170fc737cb9dbf3b7a66a35689672",
        "1978": "ce57f89a5df5d0c25d4fd491bbafac096d084d6d",
        "1979": "6b6375841b6717a9fcfd14e63d0523616172af22",
        "1980": "a563d0af5aed2928f25b0316518db77f50efed62",
        "1981": "7a87681b926ca9e7f16d7ffcec70e2eed6a95f78",
        "1982": "c5324e56a98ce0c796ee38989fdb35ac16790ae7",
        "1983": "a5cdf708b2b35ca6f80ae9d9f848810bb5a5b5f5",
        "1985": "99cb5c947dc79c266358daf396815fa6ad5ec39e",
        "1986": "f6a7ab47115c0dac4c9af6104437ff0bc8516c68",
        "1987": "ef7b619fabf4ab284cc7a7d4713d7c0825f8b6f7",
        "1988": "e55af2c81b89e41b4bdd5c4cc580e63fdbea1d19",
        "1989": "11fb6de5fbf30e94accd7eb281d9c733296bef3b",
        "1990": "09a6b94846e620fa4fdf3773bb468710b285dcd1",
        "1991": "f84f344ce036750db3f17945179cff5d7eb775f4",
        "1992": "827733e4039250f84d6f0d6190fed7dea0daf587",
        "1993": "950d161d61415c1d607e8182bb86cc01a707ca67",
        "1994": "6e514bc7b8f01faa22f6792ad6ddc558f1e4ed21",
        "1995": "16c05aa459e687642314b9bfeed29e3ea2a93b7c",
        "1996": "84d252e615b0766d9a9f2f014aac19bdc942c067",
        "1997": "890fc1ca6a71f5075aaf1ecd4d173d74df054eb5",
        "1998": "6a5b7752394e5da197451a833d9653272a67dd2b",
        "1999": "723229fc33699b2508eeec4bc220005fc7b54cc1",
        "2000": "c562234ca72e3f3a3cf96983b5d4f3c2874430e7",
        "2001": "de1d076ded57e227392da4055d3bc7ec7817e177",
        "2002": "434ede315274959feb792263852746030503cc0e",
        "2025": "39cdf10babdd0c18d6e8724df9b92a92b8b135d0",
        "2039": "9cc1091b0f724c65551d82a5851742b9270daae5",
        "2040": "6962af75ba3e949135f8143fb1c0476861dba3cc",
        "2041": "f63ad276d111869dafc400194677cd670f71c9e9",
        "2042": "2155651c3d5332481ab76b1da0916ce0b4d6f0c1",
        "2043": "2d1677364b14a871b8d423235b4ec2df3356c613",
        "2044": "dd08145942aee9b5d44542455f544a4f5be2a77d",
        "2045": "25893cb796762011ae9daba0b8717eb8b07ea08d",
        "2046": "2e185ed499406abc04f6b993a879b7ec3374a771",
        "2047": "b4539a10abe26803983c1c3f77ed8ecc13c3b287",
        "2048": "d66a1e5f5bc58ba21f599d752669981f0b1a4227",
        "2049": "ad4846a1a374e36c6b9afa79d06691a934501745",
        "2050": "57a267053945a4ff033331d3cff05f12cdfbbb09",
        "2051": "94ccc6e683ec4077a853cffb254377c95a4ab7d0",
        "2052": "68fc142c80df54784f2cfef063e5b12a85c5f807",
        "2053": "dbb30b920ab800dbb99b16176a9ce8d81a738ac5",
        "2054": "d85a358fd8ceab87a52d7b3b53338eb7c3733e72",
        "2055": "52366b46011b9504c0d616c8c8114a5ab6c725b7",
        "2056": "18d9366ee0951ec51db3d88df7cb37ff84f08210",
        "2057": "18ec371b1f5aa54888d33a0dd5454b5d9919a732",
        "2058": "759696e46b40d5443c0a7797d515e45450012210",
        "2059": "57d5539d4be5953d96f59e2a63c55da5569bfaf7",
        "2060": "2ec9effee228f7f77afd0c2838716b9ba02c7e10",
        "2061": "8ddc9a5fc2c7f71988a3735cfcc2398c8643256b",
        "2062": "285527b2e6371194b01a72d52171430287c153ba",
        "2063": "d3f3c499dcff486f6fb4d8bcfa2254c4d7c819fa",
        "2064": "04d9be8653c1b64394377c6ef09322b867d4fc97",
        "2065": "b2bf37c6c32f5a3cb3256caf08d490651935f5d7",
        "2066": "766316b2512c74361b716e0ae3905667c9e078dc",
        "2067": "a818355a4b299d8e9f66e9ecc39f4841918afc17",
        "2076": "b7e9c95d131f189a4a4c3b5525d2ab0fc60085ec",
        "2077": "b1ac24938ee20f45f7fb5f4242027df5d3a1a781",
        "2085": "e53727c4c3df82228316910bd0e3df462775637a",
        "2086": "8b6a1eb12dad89c5164be612d6d9c4cc58bb342a",
        "2088": "96126b320512369f74537c9fcf57a9a0921ee399",
        "2089": "f89995abf40fe7e5b75b7c3c34ec2a17b253bfa8",
        "2090": "73fc44eabac2319b987c999a7af73647eb6c1534",
        "2091": "210daaf7992d8b6e81adfac7fcedcce3766979e6",
        "2092": "0435bf3482954b9822213fa2eb0ea35f47713d68",
        "2093": "0c66c5f3a466440bab8e9df7502905f356400786",
        "2094": "dfdb344b4d5adaf343d7b47d1d433dcc98352f78",
        "2095": "4abf7b580e5dca9ccdaf30f883b96e797cd70ab4",
        "2096": "f8bc2486c583f004fb11f6cb449001f586ae64d6",
        "2097": "1391489ae3f3ddef52f26ee46c2d6347a6ec390d",
        "2098": "1694df74d78764377b046da55f9a9b9b5a8020f5",
        "2099": "1f0470c59b9f1ee94ba5d152fc73da6d4caccfe3",
        "2100": "cf3f1bb3a8764f42eba6cb034535505384412ec0",
        "2101": "e1df5e7445ac32a0f265d775eecf2085946d0b04",
        "2102": "6da0ea1a04915d83c2ab970fccb41263a1d27c11",
        "2103": "27f1035f078dfafd1ad35efeb02e2a5d9a3b1cd7",
        "2113": "1740f5588c572ecdc5c58fb9279a9a08b11e18a9",
        "2134": "cbfefeccfa5dbe7bd905b591942e605cce167f2a",
        "2137": "b6ea1d782282b642693bf58b6ca0bb6640b5d0a4",
        "2142": "83e42baaa44c876746a161f28a3cd3651339454d",
        "2158": "d3b40a3a0114d74b3295e6e803bd3b252ab06e24",
        "2159": "9f987c0cfbb09c2a1555ca28b5ecca06b86067c4",
        "2160": "b7c0e7c0408b459e59cadf44fde8645e68ea7e6f",
        "2161": "0c51b4105f1240083f31cd1290b701f8d2748144",
        "2166": "c1911c86b91542b7df5b3b9859b1e686592f77c3",
        "2168": "2a861e77bacd06b502e460b7dd149d83c9bc8a01",
        "2169": "9016cf7e0374f56ad4480e48b980b7cef6666a23",
        "2170": "6f311299642f1c9d07e60f95d8fc90dbf564158a",
        "2171": "cfa3000717803c3f011d957742f5cf0b2c462b8a",
        "2172": "5bbe6579fa1dcc0d94664df45135d9bb6d0409f2",
        "2173": "a0d65aeb873a1265f9e7c9f0d71c56d44960be94",
        "2174": "4ec49c0c5a63e27b38dbbafab8054b07c7938697",
        "2175": "a021a700ab39657341260aa24dd957bfd4a71b79",
        "2176": "07238f97e411651834ccae0edb2a75b84b73bbed",
        "2177": "e9f88ad6780cd86f3006bc43482e896a2fa3f4e3",
        "2178": "f7e853eb9738529dfa800f42e40e477c34e86ef0",
        "2179": "b1389bb0f2a7720d32ec5dc9c6fb236d116a4b7e",
        "2180": "905686e878dc4f65f7e0e253a4c204d1ac5f65b3",
        "2181": "cdd3fb87853d3810fe37eb7e9e2d59a74b8f22b4",
        "2182": "95b34cade856dd4a8d9c3150a0284d5c612a9837",
        "2183": "65be3e573268ccec7134c6e9ec2c893fecba7e16",
        "2184": "715c4624bec572ad67aed7062cb943704d672cd4",
        "2185": "bf945e72634d5c44f2dc045a6e6bd4b8341780f6",
        "2186": "46e9b5f620bf7200c3d23cd5a9904c30d84227a7",
        "2187": "c7f1cbf41ef174555386fbf3b4200285bdee19b6",
        "2188": "2857998452abde98ea5bb8d541151092c3870820",
        "2189": "a6269f120795b5c2454a1ca13774499ea98c36a2",
        "2348": "5fc6ae8fff143499d1bd45eb9bb8a293dec35f14",
        "2378": "afb98e7ac1d9e785cc1b86bdf7925ec96e6357ad",
        "2379": "f86afdb3487787cb291f803e602c6c6f20a0ffe8",
        "2383": "a661161c6ba1e4b93768be386558a3c0bf72c5da",
        "2384": "09dc2c0a59199d9e35390b6876a270b0e0e656d3",
        "2385": "922db2ebf8610ef57a35f922ef277f011a246672",
        "2388": "e78575ebf9f08aeb5781ee51af04fb28ff88414b",
        "2392": "45309f3a7b53912724bfac13e24b00c82b3ca541",
        "2393": "3e631e7301c4b73842ec7bdbdb1fe5150c51debd",
        "2394": "031353f1605d34350f13a9f410e4142b7f37139c",
        "2395": "3fb4ab0903404ef9c6da690b7c59dbb11b87aef5",
        "2396": "12451fa75f93aa31607d4e9274f108e8b2b20d34",
        "2397": "3e164912b3468286290ab85bb733f6f74fa9b41b",
        "2401": "b636696ebc2233bfd6a83c49c965be37e297af56",
        "2402": "2e6637e39756fe2774bef4c9aab21c642d7d3b72",
        "2403": "c3478f29e5349951ba65cde1faeec92cef1cc28b",
        "2404": "af19bc527713eea2809f9a4cb27644c3925dfdc7",
        "2408": "232d4113e5d5c15dea3c55ae1e5f152cfb82ff5f",
        "2409": "2831b3d3253dc50f4b7b8766dea4576452014a5a",
        "2417": "089df818cf499ca309ae9b462092d91a82926e4b",
        "2418": "2474b9c149b2c259007769ae7e2c96a6e7c368ab",
        "2419": "aef2cd6dfbdd4b466002c7587bc851577169ab50",
        "2420": "0f3c1f581e9ef859bbbef03bc828061d73f6119c",
        "2421": "bd3f29f4541618241de5025682bb2061366e7d67",
        "2423": "f1a1ae4d1fdf85bed5906ada956172f22933e059",
        "2424": "70a3efa690c1b2a561f044433ac2e67e3babc45f",
        "2425": "8b186ada2e86fed3e3eaed7b178e8d980c2ee634",
        "2429": "e3c7adfb6c3843200a54e6583822346fda06bae7",
        "2430": "0d49f0721f1d3956ccdf7cb1734b4c910cb1ebf4",
        "2431": "980da6a55737c820dda2c4e1fc43defde1fd86c9",
        "2432": "21b847ea494ff14585885f84f1dd070dfe5b0efa",
        "2433": "8f23bdb9216f6e70d3f34be0b991aca00f680de8",
        "2438": "8f0381629a067c2561b5010e9a1b86773b86dcc4",
        "2439": "7c38cfcca0677ad98b8e045985d456044bfacdd3",
        "2440": "eccd67fe088b3c6c8126c80692d0cc17c4cc9e57",
        "2441": "037dc2c4d52655233ab60a33be791d9ed7784654",
        "2442": "82c3dc501bec9d602eab928ae56e44396395c2ff",
        "2443": "fdfa3d11780f931535df513feaa0c898de4e31e4",
        "2444": "4a812f27d92e87197d427b91d94c77b69be684c2",
        "2445": "98eb16214d2d64766b9c96e9888883674df1c5ed",
        "2448": "1b0b0ac43564e5e8e38fe8486597563157e6dfa5",
        "2449": "ec5a39e2ab4dc359dc22f374bf2116df4fa2ba0d",
        "2464": "3d31203aa7445feff50d8a36006a532db5f3caa7",
        "2469": "f4584562a22e90950cf43e1f643517aef0be9dc1",
        "2470": "b8095bef651e14e2141a7ce72369f26a1db19838",
        "2485": "3fb49898fa3a339781d60911fbd7c171ad462477",
        "2487": "0a7a9589cb7454b1fa21b34504dbdfb6339675f3",
        "2490": "77dd2ddd81f5e937db8a42ad4a2501f5cb2f7154",
        "2491": "51058ca14b5089a380db1ea68a5151193b903909",
        "2496": "32e66d930fa6605ae4d1a9fc23964f225ef382a5",
        "2505": "5b4206fc487c975609c1fcf881d88844e7a05fed",
        "2506": "55c00fdb3b44362ecd85c64834c434bcd2a96712",
        "2507": "982ff2b76a7b7cf8c285262dcc64996b3d72176e",
        "2511": "10c647ec7ee3d4cd05bcad94e012bcac59c6e759",
        "2514": "10e1ef13bfa76fc56476f3648b8a5bb7270ea702",
        "2515": "be209523f350be4cceccc299a75c75d4e69d48fb",
        "2516": "0472d7ec07f4a539a00cce94c949c71ce90a5d6b",
        "2517": "0d929f1ee7f8e4f90db12c2b954152189978ed86",
        "2518": "9b58b77fb27e8bfce2eb2b34364566a89dde8ea3",
        "2519": "c886ccf66e6350ac59b521b0e1fceffc8cfea69d",
        "2520": "21cacf6b0de3da3dc1cc0f0219881d4b3b04f14d",
        "2521": "f311ad15015fd34a81cdb04f60b8463791738bd1",
        "2522": "1a5efea214d01e1a8ecbd2879791f4e9e084f577",
        "2523": "c6a72afc705512246b031bc64bf99f2fca514e9a",
        "2525": "3393da26da2e79ebaed2225dcbb24f09c50190b3",
        "2529": "78f0f42d5234e7b584aecae874aa2724acda0a84",
        "2530": "42f51c99a9f958e528485dbae2222629d9921d92",
        "2606": "86839ad6f4387afb7d250bf5cb3a95f03c6e1f75",
        "2624": "1bf342ef2bb3bd99be2c5fed60af0cea9a83dace",
        "2642": "cd1d55520d09722545dda86e301a265b2cf31f0d",
        "2643": "4aa513f38b1e51dd639e56485e86e73125600011",
        "2811": "d9c4219b36518167cf217875ac13f62c87cd131e",
        "2881": "1330a6cbcd4c3cdd09a3ca8f0a7c74134f9bf332",
        "2885": "8203f3a3b2cac0b036f8e545a303de3b9bc6f7b9",
        "2886": "c9e44193b960379ceb335609735fbd492d9c06a3",
        "2887": "a4c2251b3056bbe862710f93d5b75215be112d7b",
        "2888": "05e66f1ab61c30790341a60c5893eb11d6e09cef",
        "2889": "bf2ee612ff6348ee25e3cbf647626d272b7651e2",
        "2890": "e69a41fab1010fc1b1b1e17494479d61eec3e5e2",
        "2891": "1efd072919bdf3dc47e0ceec54a7853b3046288a",
        "2931": "2b5ba6b5c6d3df2dc2dfc134d725c30fac8a7bb7",
        "2932": "6f182d7e1fd29db0c3f079a4e007c01d2b7eee4b",
        "2958": "392482e189c26b24dcde99adc0ef8404011cf350",
        "2959": "0701c546348451efb2ff795e723e8cca5ac098a9",
        "2961": "194a574ea70e6386e693a33e5e3630b333ebac13",
        "2962": "a8b670b240193b2413b923aa9ae70f07694dfea9",
        "2963": "9a1a158226a8c4a1fdf800e87898b0333c7ff52a",
        "2964": "e380ef8d890db4cd21ab9ceb943a38758526976f",
        "2965": "b184b98c05a7bd1b66d2ed57c27c7f1d32044cd1",
        "2966": "d535a1c8b2c1a46cbb2e8a906206b7d370c21066",
        "2967": "ca5dffc1199be4a52d5e35c14f9890d92ef7958e",
        "2968": "93900dfe3f4c7ee5800f7fefe34b1017c9f17cb4",
        "2969": "d2311221db99ef829f156b7768e52c940b9c1f45",
        "2970": "3c687a43f6820089a1cc2f17f2c154183d9c6f3e",
        "2971": "c862d65f20772f9b19d8ac0c5c7649f39bfd3763",
        "2972": "5b83d5e7bc3ade54a23dc225ff42d115e06d9d16",
        "2974": "94f3548fbb7d4bf6999dfa190f0b52858da39867",
        "2977": "3b385f4bfca8e92358b50123df7943e86304c806",
        "2978": "7752cf0caa0f4816de9adf0aae40b1db9ecdbea5",
        "2980": "cc678a4ba8c28b415c62430bb8017e9bfa66d343",
        "2981": "fad0f36c0a1535af7fbbbfef1c70082553ef160d",
        "2982": "337ad671c8d6a24f60be660137c8f99a6bfea17d",
        "2983": "dcac6b1850786c046dde50d2b3e976956837f628",
        "2984": "cc0a3f7cb88c1705d307cba9bb3fe801514bf3b4",
        "2985": "2a252cdb4b54888022ab943e0bc340a3fa28a9ec",
        "2986": "b915914ebd57e48ede5d507970782195805e5bb5",
        "2987": "93b468b0f064adb29d82999b21f5bbaf5f70d74f",
        "2988": "adfd95f2402c98a2b51804c379ebef505d7b925b",
        "2989": "9728b297954f23cb9dff269bd45b79f18aca24db",
        "2990": "86f3e19e8ff5a1a85f17e7a96cd108640b2a8a21",
        "2992": "44f64e5ea73bf5fbe9373912624975d5813f974d",
        "2993": "6929d44ff722c11aa4ef71a4b195e4c287f1c4d3",
        "2994": "29d1dff272ec230c3415b6e7b45a34705ea29163",
        "2995": "648b274c04be9fc7532a8ae185cf9e12e801a34a",
        "2996": "6a76dcb95628ef5381e1bf5781306003bc654bec",
        "2997": "c45d846f6d286cacc59330285e4ad84f973ac43c",
        "2998": "611c6737ba81247d287e479acf8d91976a4350fa",
        "2999": "4babe908fc89fb82c097527b7b6c527ad46dd693",
        "3000": "340ae35545cc5a16d2505283f17064f57c84dfea",
        "3001": "681cbcb8b935afadf81ddb68cee7a78f13f6987a",
        "3005": "ade696d38de89c56ec68cee7ac5e70360bf88a8b",
        "3006": "72c6fed5e90d6eac94e04d335132f34353d2e07e",
        "3007": "11fb450f524b2e3bd4284e372e91adc62a95087f",
        "3008": "d569364aacfe3e73eca5ad921b6f7c229b5911cc",
        "3009": "4dcef031207afdb8f2ac76ce26c593592a6e1dde",
        "3010": "88983b1fc5ece12af125f3b580d4de3ba82037c4",
        "3011": "49067acc356503f27b132183edc0884d8fd43af3",
        "3012": "e1312407963f202c1a2a34656e538da9a7660342",
        "3013": "ad1da4f2f9ab63f48b34bef288714896eb6781ab",
        "3015": "a3f51d895c533929d42cbeb0bfb20912cc091e94",
        "3018": "a8a210465a3ea0f8253d4001966a50222455671c",
        "3019": "7140e1f04f79f7fde1c2cc31e0aa6d6597826c83",
        "3021": "46bc28464d24cf9d93828fff8a4b4744645f8f36",
        "3022": "45d5a5b1f5356b5fe0f7f63ad897488330235fe8",
        "3024": "59400c3634b2c15fc8e5c934faeb2315ca458904",
        "3025": "c4ecc2cdbdc51c3014a31f3d9814cd08b811d0a7",
        "3026": "9bab14655cf10c05260f204103cfc5108e20c078",
        "3027": "ff8458b0f890c30d210fc06b6c8972b1ac0a48b9",
        "3028": "2ba65aae8f87d7669de427605e31b8f3eaf7357b",
        "3031": "7629a0e9a0b9736200b1b17ff53273293c038e31",
        "3032": "8affa8de7338f08c2bb77e290fd7509440d6eee6",
        "3033": "a8f2d88252c9c538a321bd20aa21ee9ce7fbb358",
        "3034": "6f90a2faf307d8f682a934907fdf10cf67774d04",
        "3035": "a94aa2d9aa58a7c2df289588eb4f16d83725ce8f",
        "3036": "0c11c224f38db173dddfc4e4e9cf03f23b7c126f",
        "3039": "b755a5f56a412d11f448f869d1cb04d9f3cd7a12",
        "3040": "48e73c14bd19beda7bb7eb78c0fb51cbb8997dc8",
        "3041": "bf203db4bbde18c8b05fbf179eb62d2cf66f8836",
        "3042": "d23053053481ee35145bb1177475597d0bbd9285",
        "3043": "1c6861e03b865997bb593825a41a3a8b0d042584",
        "3044": "06fdb86cd99b5eab3647148eb5a7b7ce5121f123",
        "3046": "15b96b9e4d9da0ab3abe1288709658a5b6ae6006",
        "3048": "578fe71cf2e01408d53b98b14c20adb36c24ec55",
        "3049": "4b4c44f6730ba4351f1ac1b49cd22c4087e264b1",
        "3050": "1eb1311234aa286796eeae3c4218409a69740b74",
        "3051": "472fbc206312c109ea03c71abf31010a902104a2",
        "3052": "113590f80bd718e11c8466f9be37af40746b4f60",
        "3053": "175d5dbe371d519b75e2a37c92b3b1ee17113516",
        "3054": "64bdac53f556a83de96ce5ec70a7bf9508830d97",
        "3055": "e7e3e72b5afd2b715425a5a97d5b9720a7f9ee24",
        "3062": "bda336315b35a4299f65e79925dae7bf9de67f59",
        "3063": "13c3c748ed718ec1939740b6d1d19a8ffe04745b",
        "3064": "7a459446d91e567c6ba43b1d5945685c11ee8956",
        "3065": "b3c48b1a498a4c2bffdf46e99d3f250a69b8b4cc",
        "3066": "2aec97e3f803dbf3e9abd1666dc1a70a5be757e8",
        "3067": "298da3f861622d6794e96dfc75db32a9c39c6349",
        "3069": "2a6baaafd112b169d2b3d6c301233b7db04f0729",
        "3070": "17b9be94f0cfa362347d39dd5c3fac07c19c9813",
        "3071": "2e28dee68b1b68d79f0bff2615dbaa9aed8ea24b",
        "3076": "f4e1a211ecb3b55a151c9402f715fd1c659c9cb4",
        "3086": "86eb0408feb0f8f1fbe27f8ea94937f207995525",
        "3095": "943b1d231fe1313c6b68630fa023d70f4c2b6aea",
        "3100": "0859529e076bb626052072e0833f04e69e0ce8d2",
        "3101": "732430fcfa1cfc6e7303ae1fb6d0f2eea43bdd00",
        "3102": "2d4bb7d0be38dca1ab1be90260da96df1987bf2b",
        "3103": "82fde8bdb473703c222eb8c61447e32bb9947647",
        "3104": "7dfe4381ecd252530cb7dc274b2dc6aaa39f81cc",
        "3105": "c50a03d01269f71422a86d846cd151407c9420ab",
        "3106": "baa005789e12413f64e050f3bde95f9d70884a4d",
        "3107": "ac40e8a936f35757a43769f00fdef84a40919829",
        "3108": "793f4db0eaef6a0c3687b126144f2d488eff1bf8",
        "3109": "735585e4ac721c07719581c5c2d9a49751a7f07e",
        "3110": "1134e56155c30359416e59f93a91f0004afce6ba",
        "3111": "898cb0590028d39b84d3c631f14b4a4deb2a4f92",
        "3113": "51bf937b4c642e4936e1a38bc9d15c17fd0f0a8c",
        "3114": "ce24f661742e19aeb93ffbfeb78bb1c093b48e9d",
        "3115": "e8858db96fdb25dc0dc7b0ea5a72812c57758ba4",
        "3117": "9835b612b3bff73f4350e7ff5f1e1382ed4922c0",
        "3126": "db3fdec84fcfdab75b28145c768dd568d8d08860",
        "3135": "2917d0a34a608b031d7a62d5cc16f07825b12d74",
        "3136": "1b47e2fac8b3d3735672de758c926cf67b303c19",
        "3137": "f92028887988a6ceac0a8eae344b9791d0cd8088",
        "3152": "fdff13bac947d6d2735cd35242a11ec8f83e84c5",
        "3153": "841d89ea9199bfad94c74b75f2bab5ae2690ede4",
        "3156": "2a39b78ba6b56b582eefb15d142eb6e7184061b7",
        "3173": "b4e06ba04431b01721ce7dc7b5419955eab52768",
        "3176": "84645e1e2a97e24f2684cf1c78d28aaa0dd8fb12",
        "3192": "817da596645f6db8825d17ddf1e8a18d3066e146",
        "3193": "fe2bcd3fa21f012646e5df88bf24aa246a7055fc",
        "3194": "7f9fb049e7bc0c24a30c0d105c63133cd0b4ad8f",
        "3198": "5e43a9b501ab24d77e17dfaab69be53ebaad0772",
        "3199": "4996bc77c5976fc257e47f9827efd1bd0c95da15",
        "3205": "0d5028d8706c7c1a2df93bf7a7394d5c67c60a06",
        "3206": "ba83b224282fac35fa3907db1a3625de1692b708",
        "3207": "f0f2aa7998683fefcff3f161e09859d450e46c25",
        "3208": "aa5c0422e40150b8323952b0ede23f68f4ecf57e",
        "3209": "bdd8f94abb183e6b07069b5524e1be495edb2550",
        "3210": "e3356b1fb87113add5e938141d9ae0326bac2d35",
        "3217": "3f27f809f57c2f79b685982925828210405c8ebe",
        "3218": "164fe2780554ddca5f66273e11efea37cfaf1368",
        "3229": "576fed206e2b745b8408943841fff525a90aff3f",
        "3230": "c6b944bd4dbb7cf466cee53f636dbb7db35a37c9",
        "3232": "b015316e016ce157e362e707c266a00b82af4985",
        "3234": "ec370dd020cba777e8602a280465fa71eb91c997",
        "3236": "8c4edfd15596614f826d38b8ecfb1594359b5756",
        "3237": "3c52d6083823baceaecb4eac002aff64df48011d",
        "3238": "fb3c81e43bc4e5e716c49716bb040b700f4e824f",
        "3239": "518e79d635abc75d21ea6a275f961609c7debecd",
        "3240": "84e7ede7ce120a6951a080a88bcd11c35954e8dd",
        "3241": "5c1e1fc4a923e6ad238e21a1b143b8569b3294e2",
        "3244": "aab721950bc240073d51cb168333ef4485acb3af",
        "3245": "6182f3177417195a76b7b2bbcbf2e724ede6b562",
        "3246": "42e687fef942b4bd2fe4e9edbedbb24025b79c36",
        "3247": "58319b95b673307ed03759df1a3426ab9864bf25",
        "3248": "564db469cba6e9207e27d717b37abdcef01b6f16",
        "3249": "ef626290152634a3ec09e25795cb5db92d1b40f7",
        "3250": "0d0545a1e1aacb721941dfd8bb271539c154e4ea",
        "3251": "ccf7a4962ef2f1a9e8a966a8886d1cb580d7bb55",
        "3252": "a8b4fab49aea00d54e7486f461dcaf1e8913cd07",
        "3268": "199982646f2119c3b8a3994279136411f748d1d6",
        "3272": "c954ac614ed0d3326bbf92c99ae6b30e9b4a456f",
        "3273": "b977a2efc6e533aaa90fda76b98be36322631b99",
        "3287": "b9f89322eb5104f2186e4e7b9971ed4fa37d6453",
        "3288": "0cc8be769306bd19411fdeffc52977a81a44fba8",
        "3289": "5fd1999952e1dd4dddb5474f51a090760abec081",
        "3294": "60d01b8d17533fd4381a51d5efd039a457b7cbe1",
        "3306": "7243e33d3a2ba5be1216858d56a6c03ad48df084",
        "3307": "f2c7e3e9ad84822f65aed42fe82c655909897afe",
        "3308": "0c7dae2bfd8ad12890ce97b425071a006f4138de",
        "3309": "efa76f94a16c36d5bd8c558e9edd68be5dc86b40",
        "3310": "d6a38ea7226d1131686b8f2549c2155cdd93ed0c",
        "3311": "4df4c7687ec46efc6c21c4d7900f6b1249cc8c60",
        "3346": "de4cdef29d8d9144bd6b0bb1f234a207b6ecf620",
        "3347": "c87804d02f64188c7191aee423648b7608942b84",
        "3348": "d40bf6e5e5343cad08512500f9208cdde09774ab",
        "3401": "f238799fc9d38f89997dedcb01786a6f17c12558",
        "3402": "b9c6dd07752c9017f6394aaa656bd22bfe99b55f",
        "3403": "dfc9d41cf0c794b69295700ccc27590eac46f3e3",
        "3404": "b82cc421f0bd19caebc20900d774f40831746dab",
        "3405": "f4cfcc672fc966f23f7449c525addd2204783f95",
        "3406": "22104547b1cfa94bf77b88cdb9524555f86dfff3",
        "3407": "4739415141967af59c5bf249e70c1458f2da854a",
        "3420": "f90da8d13507b64e492693754bdc2ad48adb6f71",
        "3422": "6ac1df786d1f755f99c9ad267b0c9ad85d73fd05",
        "3423": "1400758cd22b3670e16d7ec13418060dcbd901c4",
        "3424": "4e227e5c2537c39c5fc61ad2c0a984de7e15b9c2",
        "3425": "f14b78723d78b0a619c0fffd9e7cc4305de46f82",
        "3438": "8177b1d8f5af3e2d686135d81e58f5a52bcd1ad8",
        "3469": "d1c75d5f98bfe7f84776185a9884656b7ede930a",
        "3473": "855a2b262ae3d82bd6ac1c3e1c0acb36ee2e2acf",
        "3491": "9f770b38ef7795f810a129257b157305ea89a5b1",
        "3642": "d35826a6e2b5664e3700034a0fda44c286535216",
        "3644": "930819cc85e2f094f98bb5a94481090416aaa3d8",
        "3655": "a952959bc1f4b76576f2a9904b0a98262d3fed02",
        "3752": "1284ecdb1d9da688b7f5dc66d1232a6ff54f2413",
        "3800": "9a35072003237073bb3c0514c364f6f8530523b8",
        "3802": "d82b26bef4b111509f4e72136f41f8de14462e8c",
        "3804": "3aa57573f7bdc48d34c8759b83fd838125cd03d4",
        "3831": "eeb2aa5bfb5b85ce48507c266e574d52bf244d7e",
        "3834": "f84e245ba490285a57e508cf0f22772d8cc4f25a",
        "3838": "5c2039bb8b22ba24c41b0e83c0b5f52e6001bff2",
        "3852": "142a6543fc347c333fd0c61d303d4b4158c0c148",
        "3853": "23b7bab2ba043bb75113efb4d54d275557a292e5",
        "3856": "a0a05cfa7513b6c0345d1230c48c265e9f6161f7",
        "3900": "9f5e20eb85868551eceeeaf0bd19e1332c7bf110",
        "3901": "34939c2866321e0526c88865b823775b48431447",
        "3913": "282d2e0db87476648abe39c7fc8fd49e3117f27a",
        "3927": "2f387f47d999d42ea294d993b8a2a1e32741af69",
        "3928": "09a358f73c9ef95645147664f0431c93846b068b",
        "3930": "06beac1c535d39845e75ef79c7c4c133c8685711",
        "3932": "9252f3144e93fc11b6192e603e789dee608a964d",
        "3937": "bc110e508f6e10a87b39ebc324020934fa148d42",
        "3942": "8894088b329559dbb4e788b591e19930047f1785",
        "3958": "1a6dac23f255dccf651a1a914e2db788c38a3d8a",
        "3963": "486623acc5cdb0c24a4c3af1fc34bb4f76103d0a",
        "3975": "06560b7297449e605e5952a42dc20ba1ea409e9d",
        "3976": "0e0d14e541c5c8593c4ef29f4febcc4300d4fe4e",
        "3977": "6c02d833f60e26fc8dd7fb1db72ccb4cc9478414",
        "3978": "e6595b099de582102760785ba785627ed20f722e",
        "3980": "922d403473a45e15d28518a2f651e0bfd60c8bba",
        "3981": "2b9c3e9dfa6f3325f85121d9a5f5070c9595b93f",
        "3982": "6417139a475e55c13e2b2d77ce9069457971554f",
        "4053": "ab3cd513b5fce869ca857c6105e21435d04af72f",
        "4054": "5f0e8579010acc3652e3854c3655e9e877afa3f4",
        "4063": "6768d0baa2ae523748af66f48872ce5846b9d79f",
        "4064": "da7d8df1df43528364e2344cc6b3635102659842",
        "4065": "da3e2bb2f9cf9495ca0ddc6e5e9f9643afb90369",
        "4079": "8c6e56af67b935b28ab055305599a675841dd778",
        "4080": "48ae7ec3322a0fe54ca49d714063e7cd6205b972",
        "4091": "34d3621496e134fb95e11d89b8bdc7094a0cec43",
        "4093": "644d1e97a060dbc568270f4e2b27cf02642d764e",
        "4095": "a1f09db06c38e383299e2118df5f211c6cd73e7d",
        "4101": "ea20d116c995f4d73eb9c1170e0415481215cca9",
        "4108": "a3000d033773af96edaf809f8248a442367f6723",
        "4143": "a019e82e7ec9ff56e79fffa53f90ba54f353639c",
        "4147": "c9b2228ea664555d276c705e96dd1e2ebbad4ffd",
        "4150": "ca8d55790afb97db688b140204249b63bee9a002",
        "4151": "c47a6966d58050b8c537490996850c386f7f73b1",
        "4153": "f56bd177de8ade7e7a05afde9a34542f7b5ec6ee",
        "4158": "44b0e95df0f7895b6333f02a6fba9fc1d1bb6167",
        "4168": "1136f4796e384baefbc3ac762aa4fa4896c1df97",
        "4169": "24271c3230808be36f6ebdb7a42ccf2f95dcab29",
        "4170": "02509c03ff930976c237ae98b1f40ce6081159e2",
        "4180": "4b55f0acf18c200bc90d8bd34eb380e914bd0039",
        "4181": "855c3c02263520f70baf2bda38f4767b3ce6983c",
        "4182": "4218b3d67b19ddf07f5be642bbf244ac48470b59",
        "4184": "598608eda03c220bedc39f1c4cc655573ca9b9e7",
        "4195": "41fc6a7d55e8417b35518bea5fc00d166132d36c",
        "4200": "77827c7384f45dbf6262a4b5b5c41d30ee1aabee",
        "4280": "583adf0cd25ec7b8bd9a52fc3ea1da83462304a8",
        "4281": "47a6861e06d4b2290fc82e05d0c5443df8e131b8",
        "4444": "9dcfba5566b7d6a872a152391bb1eba50ae64e72",
        "4445": "e5464a72a16d797a621a320acb601a24de06e493",
        "4446": "0963d62ae5207ba626ef0f378211d52a21deac31",
        "4447": "7bf9498883426b0e92e99fe4dae92be08f2fb33c",
        "4448": "3c37d1b1602da69a402edbaf3313989f9ecb64f0",
        "4449": "1ade5a10e79e0279cea55d95732d8befbd02f207",
        "4450": "0dec98dec759b54001024879a5308e317bc275a4",
        "4451": "5a4a38be37e7c065b222064292cd0499e81a75b5",
        "4452": "40dcd37223ad3edf090d28850ab801f751f0ce04",
        "4453": "39d1f9cd56a5de5460fc46865edcd7eecf5128ed",
        "4465": "1adf092d39778bf99c451737907aea5f94a99780",
        "4467": "83ee706b7fe4efe44303b297546a1f2f0466d534",
        "4474": "d7142a435c02b78822e5a9b4392c5b43668a474b",
        "4475": "7c1243b3a69274f63d2e4babb817610152cc7045",
        "4476": "d21d0397f5acbd59922a12d2765ea4059cc417da",
        "4480": "de4915064203867f279e3b9291b1f4a69f4c2764",
        "4489": "4e41ab26499b2f9485c7ae5eecef761d987cbaaf",
        "4492": "a74ae074ca08af18798aab2e0c32c9701cc01d42",
        "4494": "2cbac48136de3c56a433bf3b666b07d77a191408",
        "4495": "1adbb81b8f8bc511e428afb0237787c0679244da",
        "4496": "37564d1dd591b29e407bde36c2bb3fbba9b38a12",
        "4501": "aa5f235749817c70ce9e95408d32bdb080694054",
        "4553": "669da7ee5b031a0d8264e25a5e73136b61e18720",
        "4554": "81e63a573969a05c0dd0335060d6f42ac1dcc682",
        "4555": "42d025a7b26df794db9fdbfd3460a5131642457d",
        "4558": "ef4b77ffa51cd961a16ab704fff4db9c341e9ea9",
        "4570": "69234bd112b1aa5ff51f0d5ef4008f457aa28db1",
        "4571": "bb2c659dd839921d1a4720c2f4df89bdbfb878ce",
        "4573": "ad4223dcfe7cf8c2e6c1c0509418d992dd35caef",
        "4574": "fc4fb71392a6f17061ef8f8aea548993e0fe07a5",
        "4582": "9ddd45f1ab90706ca5e493a14176fadf009c7d3a",
        "4583": "02eddc3661a20bff345fcdc1056d17333bba3c73",
        "4587": "010083c2873c1c8c659d6d07592de85b2a594ef4",
        "4595": "ae971c748e2c222dc22f9fb2229a2da172b3da40",
        "4599": "a56557f4f37003aa2bc26797c56cc741b0fcaa24",
        "4603": "b18b8f3edaddd02457619462d0fbef378b79c591",
        "4604": "11780c1138afb65f5ef07c3554cd596e34cbd82a",
        "4605": "fcfa914d60aae176007327d09671b7d7c7e0f108",
        "4606": "bee9b9f85689ed042d3d157fa4014990a16f0a4a",
        "4607": "56d8a118ec556438a2c8d5b4592edae9af50eb6c",
        "4608": "c5a6d84629356651151c0a50507b07349fac9f5b",
        "4609": "c6f911c482d739bc6fb057f1d040cad8fad52206",
        "4610": "028580a1481a79b9409022d0a5a5adf17961509a",
        "4612": "bab1b777aa8900fe1e1f4d4a97aa89c05da3defe",
        "4613": "b01526974dd23d60933f93ef43acb89e6c2d34da",
        "4614": "bcaca877bd4682a7112b9c327d077ee7a0bf3110",
        "4615": "0e826e5b6da7702c2873d2a1bb57286d1f4ae2f4",
        "4616": "aedad766a20d1ebcbf1427882bf4e89d3ab7b985",
        "4617": "41630060a9561c9d9957573e8cab13064f625754",
        "4618": "529c5624cf3da3880f58df3b7252bfc5e1ea1260",
        "4619": "7ae4fe41f150c397182a353acdb216ee5f04bf26",
        "4620": "e1464c9c657d6410eec1905f23623cd3aa61c428",
        "4623": "01394ee2fda7fbd80143e6133f735d895dcb9bcb",
        "4624": "9c015eb35210e55ca38557a0ab19635edf8af8f1",
        "4625": "cacd98e80292e596265902de6a9b2031f7e9b8a1",
        "4626": "16ead4418524f707bf5c519f0a2e705b0c5d47c9",
        "4629": "8f73813475f8b868e8a29bf303c501c0dccd2438",
        "4630": "f07a4572016f66760e5ff11c2a23dbcfba02ec43",
        "4631": "7f91c847918e138f13c1669ebaedde475c498835",
        "4632": "ed488baacf14c8df1bb46c3b63a7e82872d05f62",
        "4633": "c51aa4838f3f50fb9852f66ad202f31d886eea51",
        "4634": "bc0329ddd5b8499c231b5eb99b3915f873d5ae4d",
        "4642": "cdd7b19a327ec8140d8278558966904bdb4860fe",
        "4648": "247b630c74c879db798768f4cb0c1a1d1eb6565e",
        "4649": "20011558e0f77b0288e67165e0492be57ad6c56f",
        "4652": "a3fd2cd3f9fcfae52d414a57264f268d5f9f4e38",
        "4653": "e1433ef904f2a8f6721239bd900f048aec16f08d",
        "4655": "fcf9e287aac9b2115883d977c9bf37b068ecd1ee",
        "4656": "e59151057c5787a578149c9e42a7d6f5e5c70b02",
        "4657": "a1272153213836e0e84039972b014d9137d3b81f",
        "4658": "aed43b22075443d00ba2086d119313b7ee4ab341",
        "4659": "8c8a61a4c53b4570b14a4f5505e5e2dd88b6965a",
        "4662": "dc29549a0d3e0cdc322c4a66e9836b801e28135c",
        "4663": "60b494a8dc37c308c219b5b2b3ddbabbc354f510",
        "4664": "9b461877f98a002a214946f7bc3ba8adea2c5181",
        "4665": "6e419d50f60a3fdf5a6a617d849d4c3b9aa9130a",
        "4666": "72d8a4fb289239c1a05cdf42cbed988b943cfff8",
        "4667": "780eb42b10d0846519137e3f31cf40064d7a7a90",
        "4668": "4be6912e0b090c921d20e0413f5b35c800acd8b0",
        "4669": "5ad18f8e37acf1abdbbd3aa28c0513e0fcd3a845",
        "4670": "0bb34b3fdefedc2a193f8bda0db4d8a8e31172bc",
        "4671": "d6f9af9611154ed3fb475c9d0c452db116537d54",
        "4672": "90b91eb283120abe6c24bc1b947b7542c04b2331",
        "4673": "0c32a8edddff7e395963ba1e5d266deeacc9de64",
        "4674": "21aa9e8c4b7a60f1714d48cd73c23603e9d55f11",
        "4678": "cb84687d6c79ba9ae08de61d4352a6e9b3a5b608",
        "4679": "1be92234170dd4e9dec91a79f3a281b1c539a795",
        "4680": "867b9394a565e1e8c4c577585da7d808e34ff0db",
        "4690": "081f7cf610687c1a675485a7a94f6041212a3538",
        "4691": "a25de9fad5fab0f7203a8ddaecd64931f450712a",
        "4692": "c9c05aab00888bc6cfbd87ae84dd77780f21801b",
        "4693": "2945b68d5a8b6505f1a8516dd8b5f7d4b85aac5a",
        "4694": "bc9d55b05e6de1f00e73dfdc0de71abe0aa76cfa",
        "4695": "8ef8338f25238913069f7f2b4f7526c218e23ae8",
        "4696": "d5d152ef688904b056e2873d7f76b0ac221ff616",
        "4697": "bba59c1ec5ed8b64ac4d8033d06e4528f67775c2",
        "4698": "0af2bd4121576c7242137aa7fba46b68fc7af360",
        "4699": "8b219ecf9733108a3fbc8a44a3e37cdcc76f0a5d",
        "4705": "ff45b46ed6a32fe07744c18c26933cc37432d323",
        "4707": "aef69004ffb290ac0abc277b787cf3ec28f9c3f2",
        "4709": "c218c4473bfe3708b6e0b9b83a7e35fa78b7f4fa",
        "4710": "dbe0081e46c67ef9f63c7e39b5f4b61a6924257a",
        "4711": "85fe7d00f3a14bd562103a628ae0da6235e77a46",
        "4713": "67cdd453add6dcda5bcd7ff71da548b0f34f366b",
        "4725": "95e47e71425ed440c157a0ca9197bcc3e9d9ec14",
        "4726": "a7acfce4bdb1e25da56e75478c0916bec297562f",
        "4736": "db7ee99d7be4aba14397f9c8e90f60ed65cf4aae",
        "4737": "c092039824769c9c1581b78d6033ab1660d7d288",
        "4738": "084a689d1fcc63498dcbbfe4715d727dc3067bb9",
        "4746": "7123c0c23fe3817bae3bd0c262120ec447b1029e",
        "4748": "5714555b481622a276255e97f778d8b90aa6bed7",
        "4758": "eecced07be42a52904145fa053295de243ba92a0",
        "4759": "40eec0cf34efe82ce3d944d4b4b96bc0dab99705",
        "4766": "4233556913724b8afb01e6da69f7c03b7cf7144a",
        "4780": "0eb74662fe9033678ef5e5d51a988094416d811b",
        "4781": "510691a8525a6c87405e993dba9ecc3b7ae7bd3d",
        "4783": "c2b1baaf7026c3bd8f2d0579275c58175b5e09b5",
        "4785": "3dc6214861515f08ad2c6f4056f1fdc2a3c1cbda",
        "4786": "666157b167981a6f47d4650fdf1f73398ae4805f",
        "4795": "d0e154da4794c3e1ad227d6ce2e3f4dfcd3fc4dc",
        "4796": "220b32644d28bd6215ce0b9d3bb00f97ba35dbd5",
        "4802": "41cbd6d62161eb5a755aedd94b1d6851339f1981",
        "4803": "c9f67e3e7999ca02a8eb5e1c15d0b5ef2177cbbb",
        "4804": "a6f1cec07cc7bc77836499de9eb8f3c5b567569a",
        "4807": "ee2288f2b9c5200617a501ec05a51de7afde9c41",
        "4809": "2720e20b0fb3e5838d0ead6476d62cc2f3021ca9",
        "4810": "6af77ce8cda7c28169e90d2e98b798c36341d427",
        "4814": "d085f77a9f1e5450f5c9d597779b4e6f5692ba45",
        "4816": "f6575480cc2b1d5010c0a71f47863ec404ab96ad",
        "4817": "07401db590f4b0480e08f54297109ec799184461",
        "4818": "8c269f7f5e7db8925f6fab42bc67ed967a71392d",
        "4819": "4b9a36e7b344823fa2d2bb85221a14ff9e0abb03",
        "4820": "7d1aa5d2b66efdd4c9b93b8dd38f05f9d0daa7b0",
        "4941": "2a9b9255bc6808f93bb21d0e1e237721dde35830",
        "4962": "de6479f5fcd979198fe7fa82ec4de14492e5559e",
        "4972": "3ca4914e68eab2926806abb5be9c11276d043430",
        "5080": "0932cd67610d43261098e301012ac2ae35726710",
        "5087": "610a76cc8114d84065e487d7f15790e1498d176f",
        "5088": "ae4d3498c1b5d5f6f0932a9b7b62ffddf4df3b06",
        "5104": "4c4c115fe2d61b889c11ca07f66f40c8d1cba248",
        "5108": "39f27146c628088a56355f42a8b7bbe18f82bf9c",
        "5113": "82bc3c98f39f72d330ee908adfb699df9a3b300d",
        "5115": "a08ed3f9512a6463f7cd62174f015a7e61b403b3",
        "5116": "e9f981ab21effad877dc9e176963ce7aa7548223",
        "5117": "4f8beec678c330969e76ff719f1dc84bf5565642",
        "5118": "a2e4978f714acd3b0aa1a8f17725fff7ce995e40",
        "5131": "1c054818ea987ada35bc4793d461152c1b850257",
        "5132": "3450d60664309d16d79da9c265ce8e7b6fd70638",
        "5133": "db31e8e4978359a7c8fe7f1760f42dd691e7e8aa",
        "5134": "9310a3ed1d54d250a999bed50dfa8326f9c48736",
        "5135": "26b7d418055a8ab905d2897d41135c0c15498da3",
        "5136": "1acc0e6d87eb99788c747ce634936364c0b6afdc",
        "5137": "e8670e78233a552287909bd7a8ff8384c99b5db4",
        "5139": "d0ee64595c3f526a6f4d1a9b214ada8c102a60b1",
        "5143": "477b4ad449f94937c7c5d34758e20e1d2409e0a3",
        "5144": "8f6f5092d023323e9756192486505739f3d6f1b5",
        "5149": "471a764a472d2d7680d9976299eaa8a7281d57b3",
        "5152": "30caeb06960029102a7965839f8fc12852a30d51",
        "5167": "2983eee434967d17e0401ff0dc0227386f865779",
        "5170": "5296f08133684bd6d1722947d0b5d916b0c89fa1",
        "5176": "2fbbe73ef935241a2cc49a105b3d3eae35b8c97f",
        "5179": "8c406a1f7ff4beca4802c167b3210cb70328f84f",
        "5182": "83c9255c0387bfc1ab412dc13368543125b901dc",
        "5184": "3d8bb8345a28cedc983019b5968b2379bd68c1cc",
        "5190": "62dd697d2b23e1ce7784bf7605d59c5e772179ef",
        "5194": "dc1953ab48bde0881c5c9de97974d9479baa0d86",
        "5195": "6384d841261aa09640d8adebf703d6d22eec7376",
        "5196": "7b4740e26dad94a532513c9418bc01602cfd2cab",
        "5197": "2997ffdddf9231d84d13a303f1d116e3f1352465",
        "5200": "875d5b8d8dd792b753ca9f4e647dab0361d174c0",
        "5209": "c7bbeb99428e8012a3c0c4e2c5f25ae611739fd5",
        "5214": "8c3abb211ba83a5f878bce6884feebf02af929a9",
        "5217": "a3810657fce305e39dba9b6143841b66f33a81c7",
        "5222": "276ff7502cd8889697615dfc201641a2b9860433",
        "5223": "6e87bfafb8f211fb7ebe72f739477140a8d050af",
        "5232": "3a8717aa9050f82457c2ee75d33f2ff28bb0878f",
        "5233": "3275024c95a9c45d122b3453f62c7a125b290af3",
        "5247": "a527e70406469bf568c69be772e18642b12d9021",
        "5249": "680c31321e9b33ef5a100df4982c95753ecd84a3",
        "5251": "5273cf1a96d0c8bf083026ea5426f629703c03a5",
        "5267": "fb366bb58e341ff4e00fbab21ec46573a38d46ac",
        "5268": "24a9e53f39c4f5e430edb398bff93021fee3a879",
        "5285": "8e0d323089e67c471b1597223bf7ccefb8cf3a1d",
        "5286": "4567fbf2e212eaa3bd977257c2b79a1708002967",
        "5291": "fc288d933c8cfda06e7d1081290d560e7d1b318a",
        "5306": "cba332bc8c0d3822db68884c2c719f14b7309888",
        "5315": "463b4be2ffb0798cfa71232f5f211aab698182f1",
        "5339": "7c649d7f8b88eec7b0785090d1e5a4e037b8cd3c",
        "5356": "a71987a9e57d4fe64ce86dda2a2eb067802c96b2",
        "5359": "1d14d8a52ef05f96dcca5f1b493ffdba3dabcf48",
        "5360": "792731196f8ca12f3f7446511062381474894efe",
        "5362": "261692d529e5e356e8ee1fb5a0c17d130d6cada5",
        "5364": "f704864c70a2b9d8491983bc3856050ed82e8c03",
        "5365": "e57fe864a312b6a1f5493c5b4687568bad99949c",
        "5366": "2b9be7d2fadf825a6deebc15f73b3dc7742c8d24",
        "5367": "a000b8b85666123f1ca2e7aec7a7ae13f97ae0e5",
        "5368": "281e686c00a34f4401d6499faaa2dc1c9efc8d4c",
        "5375": "155e0001134a01d316c9796aedd4d699ee17d359",
        "5376": "92a208a336db7d866697fa777ee3501bf5869ba9",
        "5392": "82e39aa059d85788a26c18a32380f87b1b1497ad",
        "5399": "55edb5ec0fd8cf4be5c217205893cd5562be7d7e",
        "5401": "550795b267f9454aac5dc7b6f24d17d14ef3aa06",
        "5403": "18e9db61852577cab324f73a28282ff6b011ff7a",
        "5404": "d31c3608a49faa286f107d419b25326aa0bd5d00",
        "5406": "c369ccb4cdb58255664b2e332c21a24687faf276",
        "5408": "0e7e6b97e0e49c2c70d1e6a3d96e00d2517dd4ce",
        "5425": "4e250d9e4e6954c5fc6ef5bd8c6bd862118f003b",
        "5429": "09fdbe0c10d38c5176f3970d3492ac32bc813fdc",
        "5430": "ef24cf67a394e9390e824eb374fc836e4def9226",
        "5431": "39f4de583c70102c9ce76498e5d154c5f299fe42",
        "5448": "4d21fe45b4c3231b7e57c6cb617cc7b5083f5cdc",
        "5449": "97d3080666e09fb8f6df86526b4db857d0b9f4a1",
        "5461": "32db6062e67ebe22008c54347ccf0927bb234dc7",
        "5479": "7ae63745aec9ccdb4fb04bb58c3a9493a2d38fbc",
        "5500": "7e4e1d1364c66fd5b9c2cc0f842032e1aa4a521e",
        "5502": "dd1068327d57daf69ae3d49953444871a69a5f78",
        "5521": "f4355e128de3c54fc0e535e894d97ab577bd7d65",
        "5522": "16110f952981b72d1c963e99032e13fff8a661f5",
        "5531": "fe6a514f488a2dc0d80f928e213673f0c0e8cbec",
        "5562": "6741309491284742466c0ac48c9d2c3750e23aae",
        "5563": "d440ba5c6e43eaa50f886c6b2b356b82d4e91a87",
        "5571": "0a2f64df1e5874b3c4ba3203a2f9c7b358596528",
        "5572": "96b441150ef42a88248d6a41f5e092dc05d6ab5a",
        "5575": "12e9b78be7e7b54b660121b1319f221186016d70",
        "5578": "1a362953e7c4aaf5b274e15ea875d8387509681c",
        "5580": "103637ebe949c4be049f8686c518613db2ca0105",
        "5591": "dd879234313861ccffcd46168e5258d5abd7ec93",
        "5603": "da27f1f2cf887f85e6363c06b87b6e60e83b96d1",
        "5604": "28f8874a81279e36176fc88641276dfa4f195fd7",
        "5610": "3e563d212ebd6fab055f3647cfc39f64fbd7fe2f",
        "5611": "3acda4b1c829debba03caf984f5d2b8e623b5cbb",
        "5615": "da6be6982e95a4a1e29a973a2044f467a610fa93",
        "5616": "a47e38a2b51759218952e3f3f6506b5d945e7c72",
        "5617": "3ecf43f9602c6e7e0fa69e7073212748ed6a242e",
        "5621": "15f35ade316890d51ac10c41896d696c16048536",
        "5628": "7ff9d4f68ed042227b635fb8832edb384ed06b1c",
        "5635": "985dc74192e92324df2bb56e5a285562c608d618",
        "5668": "cf95fd931c175d4093e1f8929bbbae8d0ddedd5a",
        "5669": "4a4d886c13be0360910632888f37167cb4407b6c",
        "5670": "5a632d2b7bcf1a1e188a47c1d98c84eaddcdba2f",
        "5677": "cc01cf66f96b2bf2ef6c883fea4dd13313c37e95",
        "5681": "8926309e91b53dfd7d4668ebffb0e407793c4e9f",
        "5682": "ceacdf62c4658f8a80af93cb1c0f51c3fced7443",
        "5695": "550ae6832d46785b3cce4360de0cc0e84f0ab3e2",
        "5707": "b1dd6b9bfbcde4c88ef7355ecc837a1b1b5c6a6a",
        "5722": "ac221b87b156d45811920078e3cb20322e9f35dd",
        "5740": "698dec91e07a85bf605f47e3a1aa43ba7ece3286",
        "5741": "12f4af0002a3665b80f7bd09cb08c1f1fb4adafe",
        "5742": "6fa7f6bddc9edaf12026697da05bf3e962d6b4b3",
        "5746": "4105e7c5e792abf12f319c14fe3fb7a0fcb6eda1",
        "5747": "23dd791295dd37ced390a0857e0375fe95e455eb",
        "5749": "a8cf27d989647b96bbbe4d4b536b3195fc6de0e3",
        "5759": "aaa8b43d1f54d26cbdaddeefb86984c7f8e2bff0",
        "5760": "54dd45fa81b394d8c50d70203cd356d1dcc89ed4",
        "5786": "5a7eb6983d833cd517cc5def32d2395b8a90e904",
        "5787": "a3c2a4df7d35521b3d1659ce51f8546602c22bd8",
        "5800": "8ab86189d061597ca2ee0f79c632cf0c398dd68b",
        "5806": "43b10e1a71f524955afcee7236eb5aadeb8482a5",
        "5818": "610d15c0e24cc96201eeee9e02517fc0d213d0d0",
        "5821": "ae20202add9dc735c7885b929fcac0791d669865",
        "5832": "7ee6366a0a7a5abcc8d0f3d6caa878cd2fed9b0d",
        "5848": "d766d63b16e5b04d579a1b7a655915a40ec6e25e",
        "5849": "414fb4321f1c08023b8ecedde00f3cb0d22ea18e",
        "5853": "32a8063eccd3e4b6b13536de48750dd96006f2e1",
        "5854": "2f989e973c033e1862828f35fa91fd09d32ca557",
        "5858": "09fb96c034f26d839197b1e550556139875ece6d",
        "5867": "cbde5bccd993ff3644cc746efda3c722ff8c5188",
        "5876": "3b53b6487c3a94c4a0d811f4694959b0dedf6a20",
        "5899": "f9d88e71c87586ff028e66c76939eeabe276f682",
        "5908": "e8901f70413382e335c2bd4c3acf2f0a422add7f",
        "5909": "8f776581d9656ea033fb50acd30a75d65c4a9b86",
        "5930": "b7e620974385c1847c56229c160228d2d5979777",
        "5933": "c21359bf2aeb7798246c42f886dd0c915a69372c",
        "5963": "d153d6b33c6edc3b42a678162856eb45e155f6dd",
        "5967": "24aa91c912118da71660e73a444ee2a87c1e6965",
        "5968": "7676e36746a5a0479b5a7d6ac416ae75e4bdd061",
        "5974": "f9a65ccae9aef785ce7bc035712c7ea81c9e57e6",
        "5979": "275f61e4d486b2b9a081f61fec39920d505677f9",
        "5985": "39f485e588e5a55d53afb9e1ad9ed47a6387746e",
        "5986": "73c77e5e200ae5a77555357a9a93fb38bb44fa6c",
        "5987": "d6ea8ac2e6723a5461a213dff630aa6adf28de8f",
        "5993": "a6d4f75135a85cf8ca72195a2318200900cf1c82",
        "5995": "c91e103bec7d3dbe038b7369f546b28729985aab",
        "5997": "cea3a78319cdf3491dc69f8c9be9d7237487836e",
        "5998": "31d7f6787febcf8c82ab638994667d3e52ac4a96",
        "6014": "801864bdf176a6e814a7e5c8fc52fe1783925ef6",
        "6019": "330c2406bbe5569e27a63ef9a453582bfc5b436f",
        "6024": "002ee455dc2f76916683e8b72275f830f08d621b",
        "6031": "04fdb1e51ab690c7f8e01a41c6b4a88b2bbe0d64",
        "6036": "5c4e103088010a639f3fb2f969c1193aefabae2c",
        "6049": "0dd3afebe05e00d1aedd0e9c66bc65d9f8a03469",
        "6055": "718dbab24640226e9e045623a5beac239a3b47fe",
        "6060": "0a0cd47bba3e94df84f8ef63942a7346b51d142a",
        "6062": "29d80a7e7478ffc03e417f5a8a859194c1053d09",
        "6077": "58c8fffaed0ef7cab27b2f2de89c4f3b5fa06676",
        "6080": "4903ab9d6c1babd2b3afd489409a894b76865943",
        "6081": "b8a79c5cf1a6189688f3bec13740727d4629c00d",
        "6094": "0a6bf5ce8821a02ad83038331a50db8f14006b9d",
        "6095": "f2c88887b6c9a094a1dd99ebcc9b6c090ae4de00",
        "6103": "0e0b01d47435b1f6a2c35b60d2a3d46abf307aa3",
        "6105": "82680d8781b4e77a022da1918c3d6da3db616b80",
        "6106": "ee9f50dd7f99b7c57841787a7efa444d8b13d35b",
        "6133": "e6a641abd4f384b36c2adc9afa89423ed9800e68",
        "6134": "178808156498c39e43dd385a139c467b4de4b673",
        "6135": "60e427d4704f236dc425c54a02f5e4dc130faa2b",
        "6139": "f01a115d6757c6b406e75c21802d8f8a3e6e3c74",
        "6140": "9178e3009c09bb34879ce5068df9e033690d209c",
        "6147": "88ee9dadc007c149cfe086e1c6360f2b2662411a",
        "6153": "7ed188d255a91945077320d5556df3198daded92",
        "6159": "261636be36cef02d40f4232a219fbd3fcb8a8f49",
        "6173": "3c7989d9d7c86f3ea043a84ddfc7fd81cedfe9aa",
        "6188": "47787c3441a99b5071f95e9157e814e854fc4f80",
        "6192": "a3662f88d89b85052833d31d404fa78ddb214fd7",
        "6193": "dfb095f26af1908dee4320c9c262d4f94e2a8f53",
        "6205": "f36df8a8b8d13733ad4e662e59c43b0707761421",
        "6206": "351a741f68f0248e3606c7d92792707145f74607",
        "6207": "a8a8c68c0ac84c1201834f50f0e8e059a2caf308",
        "6211": "ae093ba3963186c7a3e0bddb5902770368a99b30",
        "6212": "b03991788c5e27d101a8e8454327be9b94a12d8c",
        "6213": "21d3bbe16a55b9714b35b9d8e93b90f988ffa92f",
        "6216": "cebf5ef8d948624a7f6c5c00cac487fb3214afd7",
        "6219": "5682b60c6acb0f8dc9c2dad0d60a3c2cf83dd421",
        "6220": "dd69abd584ee88b2865972c0838df393aece07b9",
        "6227": "6485aad393332c33b66cb426516337eb7f62b6fd",
        "6228": "bf6453f521357d5f0afc541dfa5bb02a169519cd",
        "6229": "f1c714535fa62f3ad085b46652cbc2850a751a93",
        "6231": "eb61650bb48aea355eb993fa1c1d5bb3fc60dab9",
        "6232": "17feebc416e60e07a45484694efa32b6c1b2b1fe",
        "6233": "029b09b7b5972acf3ed179c42133169317e86251",
        "6243": "e3f300536fa5cf186c1525a4b4c5f683027f8dd4",
        "6248": "d3faadb9461374a8ba5c138182d8f0e2e40c9f16",
        "6251": "aea3830cd6a2cda8fd10c7738eeaf239e5dee048",
        "6255": "f4eb2637240bf8d78610ed65ecff22ef019a99be",
        "6258": "02e0c98b3708532cceff87abf46de0720da0e6f8",
        "6274": "da4115c9879b47d73134e2de663b56f4205ffa57",
        "6293": "d335011a0a3f0215d95174a4fdc6c995a3a38123",
        "6294": "6c116be3b07f3a63712f2454d3f3f15f48491ba6",
        "6295": "fe117b52ab50406122342006aef9e77f43e67ce1",
        "6298": "fae8e49c059ccb5ed1e9962f88129806639d40c8",
        "6300": "d070430c7774e7f3a521c42a12c06112a3166007",
        "6336": "5813bc65e446230e98d37defa3da38969ea4dd1a",
        "6347": "1f4bee0a86edc20c9d3de07046af0d77dfa75469",
        "6349": "a42325f5449cdcafef3238e96efbdb572af5b41c",
        "6356": "e5ceea55ea7470edc2dd57a73b43fda7289e60bc",
        "6371": "59ab61c5910270cd4e8513b15a2950afd9eb59f6",
        "6372": "4b9a9925d2edfdf7508f96ccfcd56f56f9330fd7",
        "6376": "c34d1e3f4ae59c8f13c3d3a5cd18795a2dc25b2e",
        "6387": "ab5e1ba2ec9f23d5971d1231d6023f5b0a4f52d1",
        "6388": "465f3e579590fdbdd512fd46f3bd7f884307a4c5",
        "6397": "7d1343b4217b728109122f9d5016def41c945fa3",
        "6399": "861c91d94615c946e599608bbe1e293d37e655cd",
        "6402": "04af3a19c47149e3a7ba81327be940e1abe89cce",
        "6404": "69a67e2afff8b5b11ebd2397b7b8abc24eee1d24",
        "6406": "9ea44efebe60c5c27269624d34d0472247744375",
        "6410": "09c9e5446245058d3abd29902f598436b2cc5a61",
        "6415": "c35a98c85fa428e47330b39a74783794fbb84b60",
        "6417": "34b0bf467651dd7255de9dcc905fe53fab17c54a",
        "6425": "133847aa00fa39e0afedac69593e9e6a4fae5d52",
        "6427": "cd296f4047430684af16103dcf416f2040a7ad0f",
        "6431": "1ee7fcc61c70fc14c4c114866619f21e7c514381",
        "6440": "78c59f87ed728f417b50713cc5291ccc75bbd0d2",
        "6444": "b9977779268570c7e18309b92603c975156633e1",
        "6448": "2baffd248c8cbeaff315a0ed2e6b19c1c7f85e6b",
        "6452": "5c3efb8217cf550dd0ecbae4cfdee8164799a854",
        "6454": "d77c5e4f3d26a30240095b1981b3689aeb22d624",
        "6455": "4625b9bd75f7438f2c6dbf012fecf7a569b52df2",
        "6459": "bea01161a5df28db212b371809478a9e56395a51",
        "6479": "8d5e5d1fe4770e91acebaa8e93f9d4f7ce01e86f",
        "6480": "918e37f3b867c271d0660cae8a04a5b10d894ca8",
        "6481": "350a7675bed3f6f120568b14f5e37b7dca69407c",
        "6483": "85b96e72cd03bf5f3735e63cae14ddf9a05d9395",
        "6485": "206ce48ebad87532d7d0ed2658b863e655d0a1ad",
        "6492": "a9cd487302b80227fb099a88d6a8500b6971402b",
        "6493": "3644f8de574543f42b8ca540427a290adc93b204",
        "6494": "8187a7883d4a52af0278254fc940f2d027ec31d2",
        "6498": "d877602d8c4f4361c139a91b01006c524b5e329f",
        "6517": "0a7e111ff1833c1631c9497253113c0c0d256666",
        "6526": "901d0301ef2147db441c8c39fe69e7dcad8d563c",
        "6527": "2f5d0255c9d315ce41a6ebb681113ab8e6cc9d72",
        "6554": "db6a5530ef98f518acd1289fe509fcc11411150a",
        "6560": "1066f988dcc3633738685e3b870a70e4039d357b",
        "6561": "25326b024881f45650d45bea54fb39a7dad65a7b",
        "6607": "0f15588d6b7f852baec54cdaef2931547c9ab46a",
        "6613": "1216338322a7c12a2b44fd08a77ad3eddf58dd9f",
        "6614": "a70212188bf26c17ee60b53b22c9621507d9bfa8",
        "6616": "6bdd982a96f266ac393ecd1cd00941a7250c76a3",
        "6629": "9c282339e6a314f12918fbc5cdf2d49d9251c96e",
        "6630": "e96a4ff1d94a1fc9bab910e4f056c049e8e27676",
        "6631": "327f39a50ba79465ca968d740e7232b563c66ce4",
        "6643": "d297968b3fe2f0f7bced77d8e2008775215a7bb5",
        "6655": "c07fe43a771c789c926ae51defa8e49d7285db42",
        "6675": "0cfa5730ed9caed2edb0ecf4252227097ad4156c",
        "6689": "2f5e41fe42f8b502e7357c9029eb43dec70bf86e",
        "6692": "609c4a84d43dd9f2dc01a96ebf91b639d9b95d2e",
        "6741": "583ea43ed20381c3ea7dac05d109055f9b43210b",
        "6746": "60ca8897d4bb118fe52ac6fe4d2a32e1096a8f2d",
        "6752": "b18a631eb7bba907d21319dcebed821582388dcf",
        "6769": "8b27b361046cde9537ebff7b9469fe217e415889",
        "6808": "35546517b27764a9120f6dfcd82eba7f4dd858cb",
        "6930": "84331646d3fde58e6310eb1459aae1a250a779f3",
        "6931": "e3b50a3f2e5a8086cb7022ab82e133bcc8525c91",
        "6932": "7d8cb0dc178923061f916faf5d9a43755beff608",
        "6933": "1e2131b4f05ff9721c5249b5dbcc905a84d564b8",
        "6948": "62325e128bf392ad0f134b0ae8dc643cc1258721",
        "6949": "f86d1505828520ac9c3674c20e7247398d9c35f9",
        "6950": "6d06c8cad5d87e94b281ae38d132aeb3fda8e50c",
        "6957": "15372689c42fda0124d46d672d65ffb37a4c7406",
        "6958": "81e5b478db67945c550d09b939ee5c0501baad4c",
        "6967": "a370bf750c1f2973c6e10533e906dffb3f7fd40b",
        "6980": "179bb3919c32c4611e2cfd633d1558021c8d9232",
        "6986": "4363aacabbc055bfc2544d834f55ffac63accae3",
        "6995": "f58982a320c21a2049b88e1e6262bd23e74d755e",
        "6997": "e09ee8ad0eb2a7bf6299a5fa1fe1ad9805d1829c",
        "7050": "c096a0bb13d00a330c14ec68396df8332319cee6",
        "7059": "c091e4a0daac0b216240932d64c89144a728b261",
        "7064": "f381c7db678016be51c5464bddefa519e0ceac60",
        "7076": "773695e7570a17d40e8affb0e1c764f80c3910ed",
        "7077": "9bd2b084a0a994bbe71330361832d1f370de6681",
        "7080": "819d4e001ead11318e1ca6f96158a0d4d4f650e2",
        "7084": "88eed424619204c01ee3d4c8944cb8d23325561d",
        "7090": "93acb878e083df6439e7a51ab2dd7e5bd7095628",
        "7091": "e2a56c37f56e02cb946b0ebe05180f4072c6c9ed",
        "7095": "63c89927bab19de4ac698919bbc1f4fc451efb9f",
        "7114": "ffed1d847c54c82088b4de48081f5179d12bf625",
        "7115": "41d94be0d855000ddd5f19cfd1241f157602a370",
        "7118": "be0cf84a74631547f155f8e3f0272b725fd7a428",
        "7123": "0c71bf7973e1aa23963509f2e226b0f195be8110",
        "7137": "f64c7473dd2385c2c272223c1d65b9919a6b631e",
        "7139": "54f18cb568334bf09dcc0c02d6b4109854684ba9",
        "7140": "e97cf936189104182256e6ed6a58be09f2908614",
        "7141": "344fb500d26ddad4210a0a91ea2e80fa777fc6b0",
        "7142": "3b15097be8b6282ec713fa8f07fed443588dc63f",
        "7160": "1a2adc55d65956ec9a7b9813560ac6e25b22d26a",
        "7162": "9c1b05464e87477d86a019981a72326fffceeaf7",
        "7163": "5fdd9731eedecb7404320731cd398ffd2c295147",
        "7164": "a91a848c989f702b3186a9268598983ef835a13a",
        "7165": "d4e1fc4f6625a882b0917d82d7e4486952e3124c",
        "7172": "162d5a9c01ecadb2d4f6e9b1967b1b1958b765bc",
        "7185": "d28fb6b3303713569f34d7c776e43400aef2da11",
        "7186": "afd9617eace3009ff1f61485b342f1f5e7b058c0",
        "7195": "cb9d4860096c69a564a5301050967851d4af4634",
        "7203": "bf79d1b86f7b32165d1e791da278a1b2aecb6372",
        "7204": "4088b82e1f99d9f7038cf7ec3450e1f503b72bbb",
        "7208": "d6b55fc50b2010576e85bb143f654dcaaa12d856",
        "7215": "8b15e2e3eac9bfc1320ae3829ba65be44033806a",
        "7222": "bf401bb8c9ed70e2fde6be87bba8d8a536ea4b29",
        "7238": "39b602db6b8b2062b0fa6630a6b575f6980ebc41",
        "7245": "91dc71fcd3438e81c184ba6e5278962ee409e2b3",
        "7248": "0215963ea4960a874b6f5f7a9c1328b539749d5f",
        "7249": "d2ebb7e33628cee852ef8fa81155addadd8ad102",
        "7250": "b06852a5a9317be3811f97af25e64129d8b9fba0",
        "7253": "6a3db50a9d0d2fb52b488762d7e24abb53cea35e",
        "7254": "0c9d8810c5372896ff2d73db6be44f04f6f4a85a",
        "7256": "692b29436c0f7b0676f5eab09b1be6ddf80805db",
        "7258": "cb43ff5e31366e71cbb511e2f07eed421e0cfc99",
        "7259": "0979e155bf327fb95e71828380fa47d58bd8146f",
        "7263": "b4588160dacd20ebdd3baaef6de3a90d0772df1e",
        "7265": "216eef6ef29e910a34d5a2c39da1c1788835d6d5",
        "7268": "6c9188e8955992cadcf85f58049f5757be5a7258",
        "7270": "92c03752b4c87a0e50b4392c449c5eff15577e42",
        "7276": "18aa4deb5f9cde39737a9094a1cac748097ddb9b",
        "7283": "772e4c0ad4bb07b329d65f6b9c40f097149431cd",
        "7295": "9412ce709365dd5b3519feb522514ac16e6418d4",
        "7340": "fb53d1100baca23659e793976c28d80bb644ec49",
        "7351": "66207f322e32950d4741a6ac2fa07d22160c790c",
        "7357": "aa01ade3e2013612055c0beda03f23bdcf4e83ff",
        "7364": "b22e52bd8dad9ae764bd93192651123ac6b2c1f6",
        "7371": "728bc3931fbf7ea06f9972e2dc101683e41a56a2",
        "7378": "483903094bcbf33c1e65bf9bdb5aeb5861e1b22c",
        "7397": "2562dd6193dad1b14fd93390018e62074ef883f5",
        "7398": "ca9641228ae2a12a80df2be4caa411dc201874f6",
        "7405": "3f6771d77648b6b7a75c388e9ce1f1ec5c4dc6f1",
        "7409": "4055af9e921107be1425bdfa7bb8c6c6fe575443",
        "7414": "47707db5ea4fa5c02ff2957d0261d205ecdb08bc",
        "7422": "29ae2f93c54488e379c95da2fbd4da450ead84a9",
        "7437": "a7b8600c0bc3f25d9c604947cd435de3c806c17c",
        "7442": "ffe5d2e409e6f0350b8df6f1c90d76d71528918e",
        "7444": "15efd401d602b9170d02b8b21b2e06ab15ea5e78",
        "7463": "c0378289872309e6ef704ef6a3c068b9a7ac86d8",
        "7464": "071b39e24d9b43b29f44485aef410c78b62628c6",
        "7494": "415896c31fc3f43b8dde7acb1ebf35a559fb97b0",
        "7498": "8e8f0066c4d64fb2cc7145d2d5ca432a0b2307aa",
        "7499": "905adde301975d51c5f544881ffbd1d18f75d332",
        "7502": "e819e6367332ee3725d6a6296966c59e577080e3",
        "7503": "bce85674544a3ed5b714e3e948cee8475a875c88",
        "7504": "049a8b11306b515528241608e76c1a0682fa1a0e",
        "7511": "8267aed50bf0505de0689ae3cc45faa01353e4cc",
        "7528": "81f1c51ef2c7c14992c843b8038a9be453ef82a8",
        "7536": "5e5ca5d0cd8d59c6ff880ddbd7f7b991aa713afa",
        "7553": "ce0c0d292cdaa1781b875c1b594e241fe5f82618",
        "7559": "465a5e8d7a536c183233467ac82f021310e5da72",
        "7569": "079bbe39c40d02def1a80b169b13d2ee22410a60",
        "7573": "b5725e1106e1957a9fea480fa1a26956091dff01",
        "7580": "ee4a3975c61bbfa5ec3703743426539e80465afe",
        "7591": "0c329ad5d477c58749e55a103ef43e71b1f1aa8e",
        "7620": "3aab49f31a6bccf1f7b40c7b34968d6d6923c031",
        "7623": "1746b8730bec9312800c92eba44b838695ab1c77",
        "7625": "08bf0cf7c20140c96f64377d288aeaaf25b1b84d",
        "7631": "86c616342147ade8a9b52a1f634db3ae0b080075",
        "7643": "35bba8083807c05b595df5ac25bce443563716df",
        "7645": "6c0e096e9af4821a7e01a48d3f1188dcbc080cc0",
        "7673": "1dd934dd805c9c43c0843b99a44539225151a921",
        "7683": "b9645ed1e0655dd22549859b220c1d40b5ec0352",
        "7684": "fe86b7ca4f81f44cbf4faac73cdd9ee284cc6c6f",
        "7689": "e7ac2da08293d1c3d3b68841fc1745f0c3b7ac00",
        "7692": "6161cba58985e811c12cdd13abc4417dec4a13c7",
        "7694": "eb4ae4c564d12d4f188f6f63de1fdde6b19c04b9",
        "7715": "af0cf40628776e1eb893de304a2592002f148c59",
        "7716": "df35bfaa835efca9c3a1674d95b0e73a6da8bb31",
        "7734": "e7ef28a5dda081bf9759200087a3ff8d49728001",
        "7736": "f848b7bad69291a16723ddc9960832e3d4b00636",
        "7742": "357e45839b8a804392864f54bbffac2b392ed9ea",
        "7746": "e6ada6317b0b38b097b1a28162253885f25375b3",
        "7747": "901ce985270b29024d9d66385a7dd4a5829fbdeb",
        "7748": "f7431da77f22683109afa44fb34eb04185428beb",
        "7749": "6de6c9120dd86abe1edda328477b01f50a5ec9ce",
        "7751": "5cc97bbaa58e9bb9ba3f509d2ec65ed01699ff09",
        "7760": "b0039d9531244479eca866c84d88134669d37aac",
        "7762": "1936b6115c670e36085e7a6db0ddd2b13a081d15",
        "7764": "be08c7b9ad72378bd7b75c251f21a3608ddece28",
        "7768": "f89c5e515f3feb55bcea9b45f56bd153c35d19d9",
        "7771": "d20dd846410856562fd213d39a59bb98e32a961f",
        "7777": "41838234806285496ae8e09e100a0ec679b653a3",
        "7778": "067ef8fa0f319be6f3d01613f4bcaf2cee3e9f92",
        "7780": "53416ebbb983739eaf6eb426fd96fb029252d77e",
        "7790": "068b7f4fbaf05b6e44fa2c5bb36c09ee1f3fb518",
        "7793": "4d92a3f5235b10bdc6ab3ed25ff76457e54bd7c4",
        "7795": "a0519972a078e2020f7e634c59631c7f7ba428d4",
        "7796": "e7592a82fa737ed6c9e6ad710a36516cc543a1b9",
        "7804": "dd322923c708baa416cfb78bad13ebf5053b8a63",
        "7833": "7e4d8b9b2485480339add8e71a8c076b34f5cfcc",
        "7838": "a7c9c35cc2cd2d46902b7b36f2aad7cb90aabe29",
        "7844": "47f8ef8ede71686351958cd6f2c97c37eeeefccc",
        "7845": "f28476de8c39a5f213b91e4f5080d2ea51eacfb4",
        "7847": "9d03ba5f494a0ec9de2e03bbe0792f05d5561d54",
        "7939": "f021dbd577c96f955124a592862caecddad8df91",
        "7948": "0ab348a964970b8cb385c80dcabc021d45336fc1",
        "7949": "f12916a367d07e196e4404a41dbb8a6e63505ca8",
        "7950": "a30f9fba1552f66676721d579cb6077a68b74c0a",
        "7983": "fa809c2d12ff3655e1d102b22269350a969efde9",
        "7988": "21d8e90f0f3eb56d799323315f67dd00ef4c90e2",
        "7990": "33b3692d13805de32072c3bf142030346e30f51a",
        "8006": "c9490d0771252bfacf09aa9f0c05057e680eda2b",
        "8010": "f244c34c7a86670c701b9bbdfa2953a1e28a85c4",
        "8013": "d30bf713c89d8386c960fafab1b7d26e6b01d4ec",
        "8014": "808fcf4ab188bcea069cb9b2b5456dc782e1bf52",
        "8031": "38454cfba23615b31ce09021acd1478ed07fc44a",
        "8068": "c51d7c0990faa63fe16d88d65b98b5b75a5db3e7",
        "8070": "667ddfaefc98c74afc13b8d85179a5a64c43c3a7",
        "8074": "4998ada8c96ae4c0422862d08ec849cbdfef1dcf",
        "8077": "84f9864385bc6222453a8acf0f348aee61246a21",
        "8081": "1f2bdd6a96656407884992f571be122b73bb8b64",
        "8092": "c0d2ecf51779daa9f6aae86c89f26d115954db03",
        "8095": "a47593bb9bc479f74ce82d45f0de27efc7d46b3c",
        "8115": "bf2e4bab676aa13b6998f5a1b6c075ef8b112a5c",
        "8123": "de20294a56b9b90f9f4ae794baf134626523612e",
        "8131": "194dab80f2c71e1a7f0a0b019a458895413dda97",
        "8132": "06952c75b02d1bf9d6f1e1badf4ec954ac30433b",
        "8138": "072565245fd673547f29fbecc7dd034c8eb61e3d",
        "8162": "8b82d3234f6e8c7d8512cb9c6f0fa7d5eb6ad427",
        "8164": "0ba1eebe286d78872267b5c3a026b0e25d43b3a8",
        "8173": "6a6fe785ece46a9a1ac2e62c661c833ca37a92dd",
        "8174": "bd9ae67047c15ffee6a85cb145aebd5c4845e4d2",
        "8180": "7bdc418a137c3a9754c3c370247975c685196141",
        "8181": "df3864a014361315f4521caaccf39e979ad4a86a",
        "8182": "75709c3ea88ba31f2d419163a9a5d8a97aa56204",
        "8185": "bf81bfc0e8ad231c5abdecf6fb143c4650739cd1",
        "8206": "9a5a6b482164a2cc086543223863bf3ae392e146",
        "8208": "d06fdd06a178160e4f6157257f80da0e27273e3b",
        "8209": "6d14b28d43da620e0963326838687c55d599547d",
        "8215": "40c3cc029ea9b73118f60a674d9826fcf4a0e0ac",
        "8231": "c324dd6740314127b18d507b22f240c85cf1e331",
        "8243": "e9c5e26c5ac6574204d2a7cde1218bc8ccfec3df",
        "8244": "1bd1c9e11d452e263d3b9779fe3c83bbd6b71939",
        "8246": "e10ede8a9f63feb1ce0fbefa8911ea29b012927b",
        "8251": "49c098403a6e70a25fb5fba4c005560715a0d35c",
        "8254": "80ba72c99f87f21f03c2426fbed082b7ef5d0fa5",
        "8255": "18a4972ca1111630dea1c3a2e66444e4b6229e22",
        "8260": "2753852244f4a7efcd2fbc6f84aa12d479026ee4",
        "8290": "bc247a423359d818395264a63364ec3d5205d25c",
        "8291": "1f5aec7d95705be2a71c31a57c25d8218ba70210",
        "8298": "67538d9f0eb5b40352bade28978ab56b67b6ddcd",
        "8308": "6f63a377cca24110275102d496065968f2614a0c",
        "8309": "acf37d4057d421c7a81597aa38c0cbafa0e1da3f",
        "8310": "6c1251cb3c3ab49bc1bf1e28fb4c2cc7bdf51a27",
        "8312": "6f5e2b4434e67d1cfe10ea599a29d25746761820",
        "8313": "99630edc5dae0acbfb74909db2df5266ad403377",
        "8328": "11d2ca0e85936b2deb9534a66eb40a4fa71def8e",
        "8329": "297969455e6b2d9abe0e104886119ee09a264163",
        "8330": "88ec574a3a53cf1e585cda16301d330c3d89c784",
        "8331": "d616291b8d86a04ec8d86e9effc3f5d9fb0831a8",
        "8337": "9fee8c37f9ecba74cdb7d0a6957af72a11fcff96",
        "8340": "e9c9566829495c5261fc704403f9248c4e518737",
        "8347": "8a37f7f0aab308039a4077999da4babb41401fb0",
        "8349": "eb95cb944824fd83f81daff2a40d1ec1ad18f611",
        "8351": "e9b6e9d406c777a8dceecaa50faa1016a7f0ac01",
        "8352": "7cab1b6274b5cfc729ca0cef70037e12fa426618",
        "8354": "c2fde0945edbec4bcbf28257ead2d6e8c66470dd",
        "8360": "af05164b013f3b253c6e32209136e342abb9fa19",
        "8367": "98752647a95ac6c9d480e81ca5c8afcfa3ddfd18",
        "8368": "205ac49f4aa4fefc101944f79d01d49c4efcbbda",
        "8379": "ebf00d17a38e71d4e57e7c8b0b8d64511cdc0166",
        "8385": "c2a3c0c26076aeddfa0f9da56336d6c399e9bf66",
        "8389": "46f6f7d7fbdfaa0ed51110d3e3186b2fa9b378f8",
        "8395": "b4a7179527d27e2e1932c5b0cf2ac085c38dd68c",
        "8396": "0308a5d05f0e5014febab91d03be5c793cc8217e",
        "8397": "5c2a3f4335f207f91805499f6b292402d6a72e87",
        "8401": "0e9ca4d7e1b9b012cbc94a6342bfa57f7aeb00e1",
        "8404": "f68cfe298c5e4f2105e7acc484ab08c0c896f83a",
        "8408": "31ebcdb8560de9e8004909611b000154d128f1b3",
        "8412": "8a2ec149cfeb980a2b1b61522b4b70a64aafd9f7",
        "8413": "2fe24210254fbd5bd856f6f9001f668b75f0cd7a",
        "8421": "81f9b205bbe1df5b0bbd767cdd77a586b9b43381",
        "8427": "b1b76c2b6f666a143493ba3fc9c33588a5ff7074",
        "8429": "02e030ebdf37950ab89d36bcb3613ce29bbb812c",
        "8433": "0ff7dce2630b6da42c3e27af02080be628bd669c",
        "8434": "d3807d4e08a9cefe7bb1637c818636d6ec8aa3aa",
        "8442": "1010eed8b5c1993174dcfb32c6a6362bf98a75c7",
        "8443": "5fe59a59cebc6051a33bfc2156bf5191ba0ef50d",
        "8446": "84de42d04298c68ba45f2d17946b8db3a67b3d73",
        "8453": "710f7e7e939a550c651401c87dc9fd33ffda56cf",
        "8458": "65d864740b0e3be1d63d93d00256d3c04eb32a3a",
        "8459": "902583a60174a9dd48fe633b9d58dafc3557bde1",
        "8468": "1380c0368b81353f03d431f3d59d52d6d34b4f2d",
        "8476": "49d01f4e96481e3168d7a0e00830850a1752a374",
        "8477": "6efdca690a4e13d10cc18e2c172c0b2050159c95",
        "8479": "f28cf4c234b97a54c1f0eaa1a4ba723de1ba8981",
        "8483": "82e6abf9e7728be8777b26fafbe4ce3a4beb8108",
        "8507": "bb972d06223a23031f39ffa1decb45914452b557",
        "8508": "3603f4a1840d7cbcab38d05177c6b186a763d2a5",
        "8512": "5b8a4efa41838ceb74a93714193487525104daa3",
        "8515": "2d60096d8f3febc559c991b17c7d0bfb23fa0bc3",
        "8521": "22c6afae8f3fc5258a8fec1a50742b044b26203d",
        "8527": "e6dbb3ad4ab3dbaaf5f7906a8d495aafe7c23c3e",
        "8530": "d3040076c5cc8065c89e4c7e9f5eb5bf58cb4d41",
        "8545": "a3caf8b2667a73556c16015c66e0554da029d9f2",
        "8554": "ed8fb9ffbc31c0724a8a95b35ae340a4f0c4f269",
        "8561": "04a0d31ef8dfc5c875dbb1a78f4b509dacd1f4a2",
        "8577": "d0f4e3ddb87528aa08b95ada9d81e668ae1ab750",
        "8578": "58f21008ce6931922eebb9c10d994d6156612c7b",
        "8581": "9357a6dfd071194a661358596f9f16004fe93e29",
        "8610": "3d98398eab0cf5288fb160069769f344565e1a2c",
        "8625": "f91c8dc0c5f339ec0f29c7cfa6e8fcc2c95e1953",
        "8628": "265e74d810d8633c59744bc2b2aa953b59abf953",
        "8629": "356939d14a2cc9c94362e23db9817777a725f6b7",
        "8630": "4e8921b438bfc0f052c7adc74dd5ff308d54d5cb",
        "8637": "6a6e07fc01602fa21c98251fa50c25c41d769c91",
        "8646": "901daa5e4d3ee5d4fd0fa8ff2a669bd82629b480",
        "8664": "565f0587a1112b0d43e490667ae62a238a89839f",
        "8674": "127ce43f13695b27ffcf4c7ee34db3070d4d86b9",
        "8675": "8c12b3675d6c7c2c4462d92938eaa5f5ad733f75",
        "8676": "eee2430286f3443c5cc6a6828e7adea841edf9f2",
        "8677": "1f9a01b95ff40fc9cd18b50bf684d4fc7c8fa084",
        "8678": "a2103f2ccadc6b8cf7481337cafcda39db881f4d",
        "8679": "dcea6d8aeb4911eb1ae877d8dba7798ea7906d37",
        "8683": "f0690a767bc023d79f855e0d0601737d2062eb1d",
        "8690": "4a0fe77c7fe20cdc1f9b9643bff10e57b8f64591",
        "8692": "78b40320cac5c390fee82529766acb1376662574",
        "8707": "9558477c694698fbc192f30cd6017c4e1b66142a",
        "8709": "3005f4133c5052c57c1e51b7e81f0670a5f6861e",
        "8710": "35a75cb4093d7774b7d2a9309e089817f0150280",
        "8713": "1414d815cba378e746fa178986e2514b0a0224fd",
        "8716": "f93c06c9be4c7e748d5c176d739aae978838f2e3",
        "8725": "b2eac037ad0cd825248b63f916a4c80003544cb7",
        "8726": "9394d3ecbbdfaf882b7b0f6f54f53a12cc0b5a57",
        "8739": "81ec3d443afdfada155330ebe6e8ac908d035974",
        "8748": "377299d7858a4532c51c66338208a6f44b2d92ac",
        "8782": "747ab8420b4cbd73bbd419dd200e5a2126b70421",
        "8783": "3b51e6a712a33e97d7a37a0ee5f272747bd53e32",
        "8800": "00a62889716b8c59d0d2b2fd4be9b036ddf0ec16",
        "8802": "5c7212d8e7c6037564c9a2c90b547808ee857db1",
        "8803": "0064907d331269ca4e592172b3b46cc1c1e53e4b",
        "8821": "f957ade051e924d117c070c58ab67217ddb57b02",
        "8823": "d34e1c8d4f1f582c89b0a8772073243e515d0e4b",
        "8835": "5995af0b6217fa58879b8e608cbdf7a645532d3b",
        "8849": "47c20e01c7de595e73a7c96fdd19c11c8cbc5dd0",
        "8872": "ae6fe05e2bb809e42572c60409fefb01ec6b734d",
        "8873": "58bcc634604608a58d5756bf8f10e24c3a51d280",
        "8874": "aebd68d5adb145f15229d654e244864424586acc",
        "8883": "c9d1b19a99dd14055c85a836ea923fdf208d0e93",
        "8892": "b46272fcbaa46f20140c7ed39cf39e6189bd1254",
        "8902": "3ef98a7fe447e8ec8893f62bf7fc17e1b7ab19e7",
        "8913": "dc51f4c85dd6c4580a8381508035d228695cb91d",
        "8923": "eea9231b111756cc0bd0de7eadd31743d8eb6a9a",
        "8933": "abc09e107121f333154799d717b8f992fc26703e",
        "8940": "0021237b58011f16e8917d8f61d52e36b8fbc6d3",
        "8947": "6b7b2ea718a945b4117edd132f3b92fb84b25333",
        "8948": "f8c847987251e16a059ad86abdac628c034c6a5b",
        "8960": "7fc1c444ca84b1bb0d4881d65be66c1eb3db5353",
        "8969": "104124245c87e4c86d75cbe84daf7d60dd1379c8",
        "8974": "8c8e282718e945b01dbf31324b326e1d9b2b2ed5",
        "9010": "cb27cd4570a2806111523ccb74805d4398dc2572",
        "9013": "657c2528caa4dafeba2ad0d3096fcae73599242d",
        "9029": "62184d39b2e32e1146692302686865fa55317b8c",
        "9034": "488b7c547c4520d5b9dc304fc443fedfa1b2c406",
        "9035": "82ca5cb43a2d835dc4fa03f611c87642cd7b65c0",
        "9036": "b28586b8324292749a63550c8b6502e1ed5610df",
        "9038": "d45ff4c019d8628a4c36fc7617e66a0bab6867e3",
        "9045": "9382cdd55af92e4ee85a8abeae4a51d011c85ad3",
        "9049": "a8b82c8a23846d2df6f89773b7c1604d26831071",
        "9050": "ba741e98717e760e1501d249f211a15ad18da872",
        "9059": "9080460196ba5ebc493b93fd14cab77f3f664c50",
        "9075": "8e14d62d5ffa76e734d188d97aa8e1c9ee98dcce",
        "9082": "22af8d3eab649158fae8b0afa77869e7de676f26",
        "9086": "cbe6f6e653b7545d388aa98f79b7dbc47f53b93e",
        "9095": "3ad095f779c27740e907ffe75ba081690985a1dc",
        "9113": "ddab3125683af5b44f1c5b0570e9401a34acd286",
        "9115": "1f45144a5dcc02e670d0106fd293c399bb75add5",
        "9128": "76d0eef08496c11a3c59797f8bb1ef9882330e57",
        "9129": "06b49718df869a9ec75478ad225e4e40eea56086",
        "9133": "fa993bc1fd3f6202cb72aa0b9e3d1fb43fd17fba",
        "9134": "25f007f4ad5b13750fbe88c4251a7a7730f15d03",
        "9142": "36f6f080eba2fda15df5e55cf85151a6f202fa2e",
        "9145": "b353974a4a184f2dd35135b4aa8f2c2eab19fae7",
        "9154": "032913c40c7ecb96263f8e55f6692707e7f8800c",
        "9157": "255d15b26d87b92cdb784dde1e3a7b2f15ef6a95",
        "9159": "1c371994e344229b59e605831e06ef46b055d3ba",
        "9160": "d0de18a7dff9d68c5e659ed5a48ee75c28711817",
        "9161": "ec1b520fe12bf1b17e23dcfa85e1cdbe523cb518",
        "9166": "c789d1d987064da2330b83931589a6c5f2e85952",
        "9175": "189543a51a043542f6bd1a30bcc8e198bed06708",
        "9176": "f2d60149871c2c535797ddd70e6683cdd953985a",
        "9186": "fa90844d148ea73cceabcf1b0d8a89ec0b2ff1e7",
        "9187": "1e1fd56842938266cdea63cdd1f4b55c2f00d3dc",
        "9190": "eb29748603fe8b4a6775e9662f4f5b677da3d0eb",
        "9195": "d7c0d470417f446504a8eaa1a68d3d296a104337",
        "9203": "8349fd4180d14b4e0c67667202d9278474a64ee1",
        "9206": "769a507d517a1f075048a86fff534bb264783ded",
        "9210": "8cdf4843af8104e8dd9a1120806557acf7a471e5",
        "9211": "6797f17bd37ed9bf6a8d0c78c64c468df8501438",
        "9212": "ac9929dbcd58311f164fdebe962295ea980483f6",
        "9213": "148f439ec10ed9f751d1a84e9a14e2df5e6aaacc",
        "9216": "30c874ed27ed4cf8e3d49a2ee9303cbcaf10faa8",
        "9239": "8d7c9d1ce774d53eb0318ee7f4ad56e98cdbf2dc",
        "9241": "a854ae8513baeeaa02b99b3208597841ecea2b68",
        "9265": "864ae61c2effb62b4278de5c825e06232b42a5c8",
        "9280": "7557d099209a64bab2873f7f99466f280709ed81",
        "9282": "d2311f7ff436ec1b12f6ef0b27fa558da1484208",
        "9288": "b6e05caba3c80302842471914215dc566015d180",
        "9289": "921fa522be8230c34ba214ef646a071004ba865d",
        "9290": "f788235649b3d596aeff62369238e2beb7d2983d",
        "9291": "50eeb810ca8c2b537870e88621939dc5b0bcb05e",
        "9304": "488c97b729b240fb17cf6f972c2439f7a26ff475",
        "9305": "4e823e278b867463ec3c641a0b0f02be416c444b",
        "9316": "b5984513080279822a1443feb8e1ad771432c0a9",
        "9327": "f09755a332e7f2784cc937f0e042f5acdd7303a5",
        "9332": "50249d4c9d84b091e9a8764e15b7f089a5cac10e",
        "9337": "11e13f9fd0bc4db293955d249c549752d66436bc",
        "9348": "defcf9ca578f232029f14d694d33d617a5530927",
        "9357": "9bd2a949c26a3cededa50a81e295458ab7c2f5a8",
        "9358": "e5b9cbbfc47ee88ea0ba9d8bab7dd367479777e4",
        "9361": "f3c46576f14c92ea2826b84fb68d3aeecd878ee6",
        "9363": "f0c18370dd84e1a39cb72bd638b481e172d72c68",
        "9375": "3a26821365541c7ef58daf41c715f7e61c25c370",
        "9376": "88b4eb2858b8da825193dff597ad95d8e1ee73f7",
        "9377": "992a1c1f449075273f18f36dbe6964c9afdc7763",
        "9382": "a4a4c4b57e9af3bfa9b2f6ee7d123db0b801c673",
        "9395": "c418c6dbd7dc3ee4d5cb118c8557d2ec3875da9b",
        "9408": "2554d26818b9f219df2e0c88703c95e53c1b6449",
        "9414": "30d8eee01a432119bcf3ded4b51253ac128b4233",
        "9419": "69618c17403f2e9a8dc95a6f7b797fa9103af9c4",
        "9429": "caa94f9e08f52efb623804259e9fe09833065f07",
        "9432": "ef3cdfe2523de2c405cdc409376cb034bc580bd6",
        "9433": "c79a928da661c9bbe6ec2e18f33c0445aad10f5c",
        "9434": "620552284060ed5fe607b58c3fdee0993a39c6b0",
        "9437": "429aa14eb0896f180006c69f29e3dbe472ba5e5f",
        "9438": "3dc77a746cf4dd08a8278235d1214d537b741179",
        "9442": "ece941f6589b8a0616d8048c0d39e3f7394faefe",
        "9443": "0d5c047c1b833ab7363d012994f5d6a79c2b3899",
        "9451": "fb16abd9a84c90cefa48411d2ad7728b5430d39f",
        "9453": "3e868454060f9ccd15ea3b596356fdfeaff73f90",
        "9458": "b7501691d24486e90b8d078aec685fdf5f1f0323",
        "9460": "e01b4109e90bc3e5d3cc9372eac2acc40f7057e4",
        "9463": "b45875fd955ce8e2c0937aa7479f2e0be2d45f41",
        "9467": "c37d9e12f76f64977ab7a6e6857e4c979297759c",
        "9474": "48378ced1249da5c42714c80d950eb4289922f27",
        "9475": "9edfb785a5539384af7792bc3c912bff5e8e0632",
        "9490": "012eba9f94b2a70987755b53d06ac5cf42cacc7b",
        "9496": "1c078de178ff40c1e20e8c40bec68de2c1ffb4b4",
        "9506": "ccfc56699d144a685cbb89cc94173146c6d6664b",
        "9508": "aa8a08467aec5b4100abdf920acc11208a886bc3",
        "9510": "e54d9c1f4bdbf7a6110478b13846e78655267e98",
        "9513": "e1a14852bca15d3f3c02b8e79c9e38f4acf30a85",
        "9514": "7faf60068ea98160f3ac8c3c41be38fc44f4ef9a",
        "9515": "eafcea60ab335ea76df587b8e1ec9e7f508b6008",
        "9520": "255a666bddf28b6754b6457f139a517e73e06ee4",
        "9521": "0f79c49b5e1bf5b77a678266611d4859bab1daf4",
        "9522": "f8b3ec9cdd014b47e471dce4127efd54b656d5fa",
        "9523": "1902d7f0cfdab11ec75aab0b5adbc8f8ab2d8740",
        "9528": "345d601e1f6c1b41ed671a113c13a12106ab25ec",
        "9534": "0798ad415a39877baebbdb244976624d1703c493",
        "9535": "c1b730f5a6a181cba634bf435a7b82636b8575f4",
        "9569": "916d68252985a32f5cff091d2a5faf417497aa2b",
        "9583": "52b919a27dc425467b6623aff3ce56c29e7fc8b0",
        "9584": "95f9088343acf3284a5f24cddac572ac3914040c",
        "9585": "b1ca4f09f0053862ae81f08eca83b15d2ae323b8",
        "9588": "6c7d865f9b1e34c958f2b541fc0a5d63a47f8041",
        "9589": "5ed7ff9c9f23dfb3d436427ce15f642ff48bd06c",
        "9592": "7bc1535d4ffd4da63fa2259cd60074d046fa9f62",
        "9593": "4e8b584b24c273f8253a9ccfbd79ddeb34dd270a",
        "9601": "02604d1d2fea5fb32db277e4e34e59a204785f55",
        "9612": "b21fa3527dc0e3e8f56d14c08cc7a404d7e8a714",
        "9634": "d7855701fcc3803fe27382c2730be44aec38411a",
        "9636": "98938dc36d8dc118140feca15ccd5b12ede0e88f",
        "9646": "f481c56f2bec66ee79b0df8e63cb758ecf3980f6",
        "9647": "ed0094cf2bcce03f2a5c28a1435aa87fd6425c58",
        "9653": "0e6aa23e5376287231a38aaee130de45ad69e085",
        "9658": "bbfcca418c77d971b731b8a21d7df873df2e09fa",
        "9660": "40e6594e47e3f3ac2053ac07830a1334882d448f",
        "9661": "b23166255d97b5164a217d569d1cf8622b2a522e",
        "9684": "e50ab6ee4d95192d364cccced36cf0889860d023",
        "9689": "2a7f56d7da642a4bcb2c5b9367b077f36e087b03",
        "9695": "11ccbbd83f0f906622feb4ecf1a6e117e7312cb3",
        "9696": "4ed919793b1ccf0b08c7e91bc9f08e5888b56b23",
        "9697": "4554e445160ab1e052855db68d0ddfbba8df4119",
        "9698": "6cb85aeea648650aef5e8420448ad43c5b4889c7",
        "9700": "0b26203fa557e0b1047165650efdbad913cfd664",
        "9706": "36b1a042c816d04870874d11fdf4e44e51b76aa9",
        "9713": "0e3e4801dd353a5e3570d693ce00e2e315bea232",
        "9714": "54e45c6236487ad660a03a56af55dfd9ed9cc011",
        "9720": "1e2dd399e9a9440953a34de511195aaa0a6e782d",
        "9723": "0bb88e6d7b095851835469f5c9886b8da9541bca",
        "9748": "196886c114db654561533ec1b436c4f6ae24a2f7",
        "9750": "d61f45972bd88012a5d0a0961ed3704325c3e281",
        "9764": "cc21828fd99f3cde647c481c57cfe99351a19a36",
        "9766": "ec2dc85f8314cc7e154064837ac620166b5bfde3",
        "9769": "f2da03903526d6d230469fa112c7caae8b1c4a58",
        "9771": "2f2302fd14fa262257f1bf2be48b406c32e5e1b3",
        "9780": "26ce9d6d05b1d124a02bc71b6f05bab584f52951",
        "9781": "d871da0d95f59f47ed9c2ce5c50e8b92009dfa1e",
        "9793": "88bafa0a0fdf9c65bac43ac61cc4e29da2a5c609",
        "9794": "de51861a51e4aafbf0a5920ab9678dfdc10e9577",
        "9800": "2d214adeef9db5e4e9d5d14aa625b6892b20fb7a",
        "9802": "47f5d74c77f1112ac6b3a0bf61ea6ea9b98f4946",
        "9807": "6280046910295590d4496d620e2ed1f6a11e16b0",
        "9817": "86f1086786df3cd1d6a02327b9b8f5d76d408095",
        "9820": "54f93d962e247dcfefc04c83d9130eb8a12dcf97",
        "9832": "20be5ee555b62aac63d18d7e93767b11a95c0608",
        "9835": "94ec3ac4d531b170c4c2ebf80375849606e3efcb",
        "9849": "63433701b488a8310ecadf46e9b93f9e46acf89e",
        "9850": "e03abc9c5677539662d6ed267174adbc066954f7",
        "9851": "f3ec60bbecc52822bd20aafb2f663dd07f805fe1",
        "9852": "9b17e63e8a9eb71b173941c0e9c0ce18c427557f",
        "9860": "3bf052b46e998b977078c148d27701244c6a4e4d",
        "9861": "1869437139136299e6e91ca451ae8973857fdd4a",
        "9864": "2bdd7f50c5553943a6658432fbd2c6e267435650",
        "9865": "dde50d833c2dfc3237bdabfd42709b7268277e6a",
        "9867": "5a37bd3c95f4fa34ee4601a9da8d2ea4f1c41bfa",
        "9871": "3c9219ed843b39d6f2bc3fee6bd81baa50189312",
        "9881": "ad948372859d75572db7753640f49577abe986c5",
        "9885": "2a3e31a05e72cdae5bea018b9a5ec2e9479f2594",
        "9893": "a823caea31d7fb112bbb8f78baa619b7a4e5efd1",
        "9894": "4f2915ffa150affa8bf0ca8645223d29334ca4a8",
        "9895": "4dd63339b93fb8820814c4376723a47accdea6d8",
        "9896": "0775f451100cf121c778454c7e934297ae84298a",
        "9898": "84d1340a0c2f82c5eff39565aa1593c68992761c",
        "9905": "efd5672f7f905b9d72be1bf43b4227cd20e82f48",
        "9907": "35014474441221472e03bbaf7e1ea23415167527",
        "9911": "54b5c4a87bb66e3e10eb55007c2215bd21e3d1a2",
        "9915": "c0d6355d7b97cec34914211ff8e886ae89606ed4",
        "9916": "5f77e389594556992a3e6b712aeb4e3eeaf431d4",
        "9917": "f6eb2f655773e907e1764f51552e9cb849238fc2",
        "9920": "629aa795ebf21af12aa1519583e91ac971abf5f2",
        "9922": "0f80f584793d611f20b7db2f6bc347c908e1a9bb",
        "9924": "17289994ed02c1ea94e41f04c4b3911ef87ec60f",
        "9926": "f0ba2f69ddc9d9f7867591deb8fb71c7450d4eb8",
        "9932": "767d1ba202cf8057f417f6930d0d006754a1053f",
        "9933": "f6aed896c6286c48256bbccebbe6ed6a1c0c617e",
        "9934": "c26beff22b92f5c875bdf3477d7a59540d94308e",
        "9935": "8a1e2d0d0dd6b45b0995d2f42982dafb998c3ca3",
        "9939": "26714bb289844bb02c0fab2566a44915a183483e",
        "9942": "81c83aaacf1b8d871d4e31719efd670bfee50c9c",
        "9943": "7942f6703ee29f254451dde8a1d104e2e80bf473",
        "9944": "f21eb2d87aeec5a6c35804b1e7dcb62b341c2254",
        "9946": "b369b386ace2c5c2698ae021186923d75cb99889",
        "9948": "49b387fe604673b675459cb32af1cebc51791113",
        "9952": "09c27e7fa1c4da7fb59e6dd19d3d8668ae90a1f1",
        "9954": "940ab39840b75703843c7a81272f349f407b5e34",
        "9962": "513f9688b313c57d87a8a3809de8018d2eac0341",
        "9964": "34908eac3d6ff4ee2b58581c3568c4ea85a11a1c",
        "9967": "41ac00e0fd41e2c4613684bd03e2f9bbf69d607e",
        "9975": "b7071f25ceabaadb4a088b167007f7b0297b61d9",
        "9984": "86d34e297204ffc69cd5e6af97687ec39dd39c06",
        "9985": "83513c6a80354f6086fb6e4f2df5e7ffed3c954e",
        "9986": "43bd4337cd30fd0f24bcf57862d1e45db49004a2",
        "9987": "c14e90b7bf911e19711dd419751b3eaf1075ce52",
        "9988": "4e7f36094f2eb8b90db16128621bb447a677f0d5",
        "9991": "b2c3dced46679618bbde62cc28c49d24065ee6cb",
        "9999": "f7f53d556759d9208adcf8ef0aec72d2dcd23dff",
        "10001": "6805eb6058ef54a72b65548f91ca614150be7d84",
        "10012": "656ae59668fd8a06af0c363b1ab017afc906bbc7",
        "10024": "d6170bef81ce45199854a8c93fbdb17c6fa17eb3",
        "10025": "0eef58585144778b5f851430a21314ec6c1527c9",
        "10026": "dba174f3f16ee0d5a5cecc6b36086c1a54fbb1c0",
        "10028": "860617bc6af14efbca933ebcc226f43a289d7abf",
        "10033": "b9a877c566d03f3f5c679989ca90309028a088af",
        "10042": "b7a188d2ee12cb6a41daf8dae38b250a984ba8fb",
        "10046": "036ee223614673efbd9ca74612a3371d087a2210",
        "10054": "1938754a606a7dd4d002ef4f22e9b8fffd20d00c",
        "10055": "f6e46316e5fef4fb914e679a655e8ac1dc1a5503",
        "10062": "8d7e45209880879596a6deaa08a9ff54407df1e5",
        "10063": "fabf1a33259316f5409f4f46ca9391f599572597",
        "10064": "e8855bc4a58d6a9f7cb956340634271f5359c152",
        "10079": "dfbd14f4dfee36787f4fc2d8b83a8525b3cb8db6",
        "10080": "e00bc55a8870a419efede0797efd779117db0296",
        "10084": "f16f201cc1ad07f769653e7feb5e05e8ed9c7c48",
        "10089": "77d6a60c55374276ab60247e880809677fc2c1f6",
        "10093": "0a098f4067538c3c22f1a64c7b7fd2cfca6e4f52",
        "10102": "88e4fecf88f4c8c1f04f10d07dabe31a3c752bb4",
        "10119": "a436b5ff8db27636e84fa76ef48af5c931e52189",
        "10137": "7213d1aa3a9f24e90467afba6c86da342fc6b95c",
        "10141": "180c576d7957ff68557cf10fdde278047a962d0b",
        "10147": "4ed24abe583ccb4b9655caad99b01b1f1c4aa454",
        "10148": "672040beb9ebc0fff94f7b6be71e6a72e8f4736c",
        "10154": "d31fc2b71723fed14ea0f494bd566fca82c10524",
        "10157": "f6c25bc18221b6f1004160530764c674144ed7f8",
        "10158": "842d2d94e7734cefd52c7e5170731b456e6a8ae0",
        "10183": "ab241f5a0543de94c4b31fa91b42061eab9b4955",
        "10189": "4bc20dae11164691df6c89bd28ce1247886063ce",
        "10192": "3afc1f33241e3079e26f674a6fe07c36b3d3a551",
        "10194": "cb8d5f3359dc72cb6b05064de78c5d6973233518",
        "10195": "ac2f27879583b32f0f691af8d35a97f4887e5109",
        "10198": "40f81f2bcc77004ef51d1dca941f023d64f6e435",
        "10204": "eb208b1d195d6ab5fad7dc6a5c1f5dcbede3248c",
        "10206": "5dc286db93bf2555567720f9fcc1aa520facba54",
        "10210": "b0e4b81f547ca6d7c40686232fceb6148092000d",
        "10215": "75076dec2d72ee67f5fb585172d60ca1324b7461",
        "10216": "bbb6b279353f4dad6d965bbd653497d40c6d4949",
        "10217": "035953069188f21aae3df1dd0f5b8fec126469a8",
        "10234": "d8a8a0394e06554b4adb990c21935243c7e0a86d",
        "10235": "da02eea0e450612369bd7fecab1f1fb39fde0d1e",
        "10236": "1ca85e17711c66ced970409bb8863522bd4e6f81",
        "10238": "3b1b88c73672822d8235109829b74372f9fe3f26",
        "10239": "7943c4845e81456ea8c37aa49ea485732c40c757",
        "10240": "2ced185fa8f10d57327a28de40fb9b07784e1118",
        "10244": "6019257a9c7666efe81604c8d25c45c76059eac0",
        "10245": "45ff4b9268d7a30402e987204808a259aac7bb77",
        "10246": "4e7bc9c7682265435a2bf0a98b4948c64d0ad8cb",
        "10251": "2c2c62dbc170fe24bfda2b2c048578ed734438b9",
        "10254": "b629ee8dc694e48ee2d152117f94209533746d8c",
        "10255": "bb099a92e32cefd2d83c88e5225edb02495fb59d",
        "10256": "a4237562b78e9c4183173983051e5383dfab901c",
        "10261": "73dc8d1f0a7b40ce782a0aa78ba6566ac91de7d3",
        "10264": "00548be541cf455fc2fde47cbc44dc642c38d49e",
        "10265": "91019c6f0d8e3c22f0319b0e8e18676108e1b899",
        "10269": "420d77ea8681d1066dbd924c408247febd2dbe41",
        "10282": "68dab34c4f00393857b6344f07fdea138234352a",
        "10293": "39135e850de6e2992c2f7202d06b9b9cd4110379",
        "10294": "6b45a358493985ef9e14df9d90d4ffd3a7641f14",
        "10299": "b2e1bb3b2510038558fc142991b226c4b8340968",
        "10317": "8ad37c00b95a4deefc95454a3007e0476108c3bd",
        "10318": "e1ed30a3f3521380cc1dfd84c7a4be27c2ceaa23",
        "10321": "fb38dd7caacb8b064b8e41dab2cdab82eb8171bf",
        "10322": "d470a4cc6940b48f3f4b67270b55099bf2efdf6e",
        "10325": "aa60c8c38563a8a2132c6009f6e8cd27927ab238",
        "10326": "c339de7bbdaf721c240e501a95d36c6c7ddbd2b3",
        "10327": "9154c1f754720d6eb6ccd153c5ec819bae4d3748",
        "10334": "56ea119d89f939dc1aa8242396d2357f510ab1c8",
        "10335": "6cb6b817110fa8dd7a471998f94d1adada13e5c9",
        "10336": "c222c76dfa9dfb144f10b3b6459b46b2b73a61a4",
        "10340": "52ce6c43dfc9ad60e1340737526543c6297dff18",
        "10342": "eac4d732272525c3c8c7340487240aeef8297a2a",
        "10344": "7bff417526230b29d8945e93a5e1692c7606e7ef",
        "10345": "f2ce7f6d9aac6e4c2babb243f2d9585f648ee388",
        "10357": "cdb1db6e9e9f05cda06c9943d5f9245532cc3d22",
        "10366": "f1c19096568ec522d7a13c57b68ab4a265cbf684",
        "10368": "dcdc86e261d5add693e7f70ed3d1b3cc6f36a016",
        "10369": "485e1bb17d5207e308f23ddbf719e746e49b2656",
        "10370": "5b21f609a50ed7b875cbee28bf5e4a60e9000ec8",
        "10371": "2509d0b99b7fb22654c1954177eca19d67345bec",
        "10374": "7e2069ce67fb1ad7f6100f4580c9d32ea121c5bb",
        "10399": "a142f6901bba1601a3e0de87685b0e62dfe3a062",
        "10421": "febe09849a787804b92eac5164912b87af1123c6",
        "10424": "394b7be19c3518bec16816f0c55faf6a8ce87abc",
        "10426": "f97d254224c7f15952951f70a9eff3d4d487902c",
        "10427": "58f8a2ce01c51b94a9f79af2d0981a80c67d7e75",
        "10444": "2c676eccf7fd31422b449cbbdf098c8730c63a24",
        "10453": "6cf49932fde5d4838505b00c0008eba40718fa49",
        "10460": "8d9809c7fda1fc2a49d5918d9e3ba4224411f0bf",
        "10476": "7b57c70281222ea19f5e50830a6feb672d29422f",
        "10493": "44aca4325d3a0f1ad4b8f8f9ebf8af3572b59321",
        "10494": "5bfb3ad4d145679e4d92ce72e24be5ffd7f9407e",
        "10496": "9e084a80aa19522523373fa26f34f9a4415059ee",
        "10503": "94e015c85753a90393f89e0483204060f5f7fbfd",
        "10515": "a2c2d1c20793cb5765e6b3aa798c5f68b551df0f",
        "10517": "ab7e10b7d01227cc7c0b67327960ef9117b72927",
        "10520": "965a794ae33919fd2a79e6d2d090cc72a99552e9",
        "10542": "9e5fa64e2d2091a56c159e49eb1b81a24fed5005",
        "10544": "a3fe8932e4a8733f4491dcf4e25192f5314b0f2e",
        "10548": "b48a82512b253484f66e33fabe1af1ae80f4cc98",
        "10549": "11bac3da6a489c52c3d6d06aac87d20026ddaf61",
        "10551": "bff7f035046ab9075be905cc2fcb9f2202f6705e",
        "10552": "fce99c35cb2becec6a968c1c62d48ef50b9ca6eb",
        "10559": "098c99190ff5b851ef6ad7a2262181d2def1c3d0",
        "10569": "1c6d1338da4635646ca769f24802fff442922b98",
        "10597": "252967347e9b426b42c9a5202aadcbb008e8faaa",
        "10598": "e0a86561f345800389dde1bdf7868aba1a98c126",
        "10601": "7feb73ec2be2bc852a2bfc0ac1313a84c72c5b1c",
        "10606": "f43320550e8987e0ce064729049760bef1c0e55c",
        "10611": "dc8a633b257a264d134d2701d16005681329e7c2",
        "10615": "c819d86e787b4a15d1b64c65b4add651bf770ccb",
        "10616": "f02777b4a0ede88432475ac3b36f7a9cd670c7a8",
        "10620": "c8643e6ca80cbaf08b520cc4c12f00daebd43e6f",
        "10622": "1db8bb91f905094a3391a6fefdfb7970a12e3666",
        "10627": "0b81d8427d5eb184d13d0de02a06c6ab5ed5b5d3",
        "10633": "80026e768afb46b75a24133c40991992970d8d5e",
        "10636": "798473565791a6a7b47f0ecad2d82ffab9e4138d",
        "10641": "1f4c5b90d83d65a244c7e7cece51784d049afdd0",
        "10646": "ee78bfe3e66439197905551a451ea264704a3cdd",
        "10655": "ea1f1b4dcfc1e0eb585d2dca116e5cb7b0269fb2",
        "10656": "f472ab0550376faf2f970cf09ddccfbb5d65b48e",
        "10665": "6d753a82afbc0776f338013f887da05be81ee10c",
        "10667": "2d008c1dba8c1dcdffa314ddc5932a91bc83e623",
        "10671": "68dfda8c07ab3c6a0410677a121e613730811f14",
        "10672": "ebac2621045b24a6b0bd2f008ed5c51f355caa4f",
        "10675": "a75a6bc706b519c766534a06734f560709d6dd2a",
        "10676": "4149b5c62b0d76bd6f7b5138792eff3468a501f5",
        "10681": "262588934127305f49e4a8b0f70a1efcea892fde",
        "10683": "7ca5c4b5a851757c10a6d278e6d15fd67bd758e2",
        "10685": "672cff1cb545f33ded2194e14774b0faa7ae96bf",
        "10686": "aa57b86ac75d1ca29fd1e0eecf3294e5c5a788b8",
        "10689": "31dac722d2d70c70964b5de1e4e9efddf958c029",
        "10699": "34535d5eee12e25c48f3b7c02a646553489a5f59",
        "10703": "6a8bc5ef21cd599bea9a3150826b1a6c9fcda9eb",
        "10705": "cae6a0b7ece54acc5c885c63017989710d5f01e4",
        "10710": "0137cb4fc30a4d15660524cc9109ba7234dd7ab6",
        "10718": "0e9ebe9fa89de4ddb8e13ff2a3b0aaa600778f0a",
        "10719": "ecbac23bd107530aa0f2632f7076c7c6d19b6c3d",
        "10723": "106123318c50c85f69279f89f790597771a745e8",
        "10729": "9a0466db7a35c0ce7979c6f0e4870c1485133ae8",
        "10730": "65074aa54650b6c4ce1a6cc50125f808d0957cb0",
        "10733": "9fe2d75e66c2bdcce79efe196dda4e32abc9349e",
        "10735": "c4b0d617c6e0fa8844e028d4705206111cfeaca3",
        "10738": "7f646b02145c31e6078b31376a46cde7a9b9b98a",
        "10741": "796cae552035b34dd110fe14b08ac0ade444cd30",
        "10752": "b0aa4ba03c3c6faf4d62a66fc5bb5030f25056b8",
        "10767": "83342a6371a3c4362a9a91b8097da3dd4c007367",
        "10769": "5bd208c54b61d13c18412bed5d5ca9e3437f27f5",
        "10781": "66c2fa25ed5f3e14ee8af339a342ae94f08fe6f0",
        "10782": "e890bbfa1c47fbdb43082ef5d98d6703ea5e3659",
        "10785": "b74a330705ac4004b8e02f55286e1fbcaf393492",
        "10786": "e61a9210ce87f825e573c16a3bdd1cd8438abb6d",
        "10788": "b32b3a08b518698f66ea960fc6106905265e7b25",
        "10789": "511a1921a9d7571a4173cd141a50ef708673dee7",
        "10796": "e858c4497120865734c995b58c01d5bfd4efdeb7",
        "10807": "9b26e838eb605f141b2df7c55803aac63b467907",
        "10819": "de34e1745d5b49ddd2df80ada7c63605e85a02b6",
        "10823": "aac985eaef480781a6ad300d2736a6847bc951fe",
        "10837": "fb92b43f2a2b8dd05c3f2ac4d646d36a82daa641",
        "10840": "ef1c66aff91030e3172a5f91c6bb683f338da9a6",
        "10841": "276bb3f0a097e4e275cb859917d4bb68c187e3b8",
        "10848": "d82102b3a3c9f445838c2042e2463c2e9ce133cf",
        "10852": "b89d3a59b8b6c275bf46fcf23de43335e07a5d41",
        "10856": "3d22213bc00ab5480ba8f6e4620606071d79a61c",
        "10860": "edc0f925874077c21a851176a4663e9f800cfcfa",
        "10862": "a2536f6568dd93796a9c877f409803ea3aded5c9",
        "10871": "a3421beba7b3abc23357f78a5c416cb4ab3a49d4",
        "10874": "4711d716aa9bfad0c026a90aa703df8d587283b7",
        "10875": "ff54d7b53c56752603ae676a4a84cc36970565ba",
        "10877": "6ca78cecaaf2fe434e5efc0a2866776f1ba881b6",
        "10880": "20faf4bba799596f0c4188834aaaebcec84aab41",
        "10885": "9cdb5908d29b2d8d809f64f7dc79c6b1ef66d109",
        "10887": "b8eed30b6cc561631dfcc021c52c77230287654a",
        "10893": "61b273d8624e7cf9eae4df864f12425d7d403f66",
        "10894": "8deca8fcd03b8bd2561f476e643eb28f8b9a58ce",
        "10895": "eee2f86e63c0c8f3eb085a6550900f1b1d502e54",
        "10899": "7b62bc97bf841d33ee1dfeb3982aab48fff138ef",
        "10909": "7518843e876b78760ffb9588d8135ad16d2806da",
        "10912": "2155ffa6a3efac94764583773727d718c0888b6f",
        "10927": "dfd8af7afdca498388757cca272add6980d4a6ff",
        "10930": "7ea050b9bc972bf3a0966894b66c12b0d9ba5e56",
        "10936": "8bdff78d95408fca728b1e18596680ac394a7644",
        "10937": "7fd9d6e6dbdb42c43d566716bedcf9bdbfa10ebf",
        "10942": "6c41aba1104c7ed636693c4705c2fdc5851bf1f6",
        "10943": "7026c7712336459fa7650f6135f2b4e6a64a967d",
        "10971": "f901f38913b9241481e2c0e93099c14546ece413",
        "10973": "21f5c6aa28f996452ce71d848c2a0aa9c6d7b335",
        "10974": "024b8dcbdd1f9067e15881fcd99a832250181f0e",
        "10977": "75825e1d99bd2a93cb40b95cdcb1ffad66a8740b",
        "10997": "675a0e7302d7f2200ec99596942f5703a342fc9b",
        "11009": "10585c075b4dd28cb8b263112cd6e6e910ce8243",
        "11017": "42cc5e9ed33cb91cd488301eaaa18349a2b17286",
        "11018": "207aac6a30d574e9d828e86e23faa6c014126108",
        "11019": "2ab828c27aab5170fab453dc9c86664567ada454",
        "11022": "660e77784759fb15d91052dd532a022b74620a8b",
        "11030": "9d8248fcd229cff645c85727f4c3a6988feed668",
        "11031": "4c9da919dd94b8b9cc6ee83b745ce8c8c87550c8",
        "11040": "2d0e90515ec6d634ac953ac1046182bae16ea2f2",
        "11044": "2f0cf2dc7e12c09a540b4ec07c87477a9a2421b1",
        "11045": "4ea682e453dd75f64b6cebc9fcc7f4956eb2de8e",
        "11046": "f0ae7d94a3769f245f78b4be677cd42f878bb750",
        "11048": "fd655f088ebb0d70defbe0d6134cde1621777140",
        "11052": "63fdfe779b3254468c324b4eae4d9472a86e0d0d",
        "11055": "d2ca1fbfc0b4da41d08352522482f99e69d06e70",
        "11063": "03a378f5ce0b539340ec76eea05403f383631672",
        "11073": "10661a7deedd34f2cc1fc073adc113e5a1befba7",
        "11105": "f1f4db1b3cc4aff9d363289e1c4ecde390483006",
        "11106": "86841ed11a034bd04199e22302283fd24ae1f846",
        "11107": "37bee8e59dcf42d03bbaabd8314b6ffefcb5d087",
        "11108": "9b805cbfec86d4144afd36b44e35588967ac8caf",
        "11113": "67749772188b99c3e61ad2e26c080d16637781c5",
        "11120": "1410667fb66472b581cb8ef193093059211a31fc",
        "11123": "87a0020eb741161dcb01494ca906b6d02a548bb9",
        "11125": "102f3fef2c9784a3d36648fcd79b5c49f4f40a92",
        "11137": "0019cb6db112b554c7b08a550fd0e5f1f20fde3f",
        "11139": "00d337956d83969bc37de8ccce254735400f92ad",
        "11141": "9689173303a0d4e3a896a39c6e16e051d3b23326",
        "11145": "7f4bc57934d55fca06f75e34dd5e4ab1213787c4",
        "11146": "bc7224b154d50b9941a899f99e91fe8cdf9e06eb",
        "11147": "edee2c643b9238509c6eb17061adcf667432d7ea",
        "11148": "37c4cee1e6ea95b16493824b4aa86543df395c69",
        "11149": "d38b7d6b016875a78a9a46a9805aa3bc9bdc49da",
        "11159": "ca8c7b5810b61fbd3c270b32aa9d053f1dd2977b",
        "11160": "59bb1d830cd840d44056892e021f2e8b78c98457",
        "11162": "de075a49f118798a86aac6fcc590346e95043ad3",
        "11165": "83c0c93b7b93aa5b335d5cb1f57c430afceda202",
        "11168": "43136e0733469813768faa098ea61f8d3d6d0549",
        "11170": "fe99fbc4d5eca8d0968bb079881761f7d5558f3f",
        "11197": "699d1e2d56bebd60d20e8b0dfc40e8bfdf538ce2",
        "11198": "011b8e4be3ae6d1dd2d0bd5f0b2b57307004b0d2",
        "11199": "bd492b8a0743f1cdd9239c65ef1634855f5b3fa2",
        "11206": "e03a4170fdc59a87561394ccdfa0f4abfa7ec1ac",
        "11210": "17ab9cc8e7a2c2199a8fc446547573a12862462b",
        "11232": "3c967b3d9a8aa1004ef2c2aac7f82e233131343b",
        "11233": "dd578e8c121627acda0c28937d8c9b076d28f595",
        "11241": "6b17b3e52e116b33931a365c14502c2793f9e5a7",
        "11245": "95a53d65622645849389bfbaf919b715caf8952f",
        "11248": "53db9baf49929ff15180dfced09a425c5fb96563",
        "11249": "a0844747962a956d728984817c7eee928013cfcb",
        "11257": "a4e6d6689d11ddad4125a01c4e4ad19bc69c5759",
        "11266": "745d54a5ca671bbeda2f66821a949a4270b75b4f",
        "11271": "64ca1bc105816653d432ae425d6adc54766b8ab7",
        "11276": "2508aa8dd0162b28e03908f9eb91b432cbb260bb",
        "11298": "08d5c889491213288be0d5c7d726c4c34221c35b",
        "11311": "c5562517a4ebffc898735bb0e63555cd062bf8a9",
        "11312": "7376212214581117385742b707b12ac6aa9a825b",
        "11320": "6e52cf2f7a7d771323b452f32e8c42b90405c3f6",
        "11330": "36eb8eddb15b490183d07194492a66142e48f979",
        "11331": "b0653def6adfe0eb1ea1e6811a91adbe4389443d",
        "11337": "130a78f4cf814b804fde7816c0372c8d28af3f6b",
        "11340": "7b58b7982e0aaf3034584d7831b20bffe55490cf",
        "11341": "71774a648f0693adb220e2063fe86100ef49a67e",
        "11343": "0f4faaae907212589165ec7bfbbe4013d13face2",
        "11344": "03acc5f74fb20f3529666e493d68f3c1618a8dcf",
        "11347": "1065942020ab00d932892828ac24175485338681",
        "11354": "be82efc23ceb00838304ae8d24ee133691fd1cb5",
        "11356": "eba987ce2914d31f49aa9737bdf60ce9174bb931",
        "11360": "ead0dd3e3a9143daf8ac26be958bf0ceb0ee20dc",
        "11361": "9ce1f4bbf1966b99a01c53ee129460bdbbd8ea2a",
        "11364": "516b657286ff4eb79f09755207b83c3da16caf16",
        "11367": "9789438107948b73160569481926de14490a7e16",
        "11403": "9121d70ded3b5f1cba0270541e98c6b2d4124686",
        "11404": "da9cbd0b54bab78ae62d5cbf3abd25c321de5a49",
        "11414": "08a790da1cec0b77523a142441ce303e5f1932b7",
        "11415": "4a3b8b5b988d4f82fa96ad64bf03c13d42d2529c",
        "11417": "537bc2ba2258685f3fe1d412281eec8fbaff6f13",
        "11424": "4ee6c0830f60342e2ff4666536b14b747c2ff010",
        "11447": "dfc4677d505f414b7ea76a13a0a2de3724b39894",
        "11450": "731c34b6ced51b0b7cf5333eea67753492276714",
        "11458": "cf8c1a2f358974e0ce25a93901c2f94193d33282",
        "11459": "79b7304b5edb1d1267c1ee91ab1696ed00165a50",
        "11462": "01c8c0c8e284e8b16a99461b3bdd895b1a9bf29c",
        "11463": "f325f9db65f99804fa187573ec13302f19d8ec03",
        "11470": "2dffcece54c196bc0189056059b624c83f53122f",
        "11471": "c80e0a3dfe86c99c474a5fbe7f657b0bab26ada2",
        "11486": "9e33ad94780b24afe63260a432fe95b684521101",
        "11487": "52d0b30be98633bf2157e50ecac730a49bc969c3",
        "11488": "ca133d278ef0c51e3a043cdf0796b75919acec57",
        "11489": "edcfbd3dff3b3d557c81c2eb3533cf028d105b5c",
        "11499": "71232bc395684794e9783bcec8bc586616e702a7",
        "11501": "cd2945f6519c423fa424d64d9f40bedf7a9ca91d",
        "11505": "0c88ccef0b3b3cd70389a81c7e581e3aea96c414",
        "11515": "ad35d226c9dfccc6be595724a5abdbe26715b53f",
        "11517": "8c1033f8424d70437069343a069c6372b28955ad",
        "11518": "9b28dfa1575c40ffa4ad632bf385e73053faadb2",
        "11529": "8d946226c69cfd520d92ee62c85512676b9f87e7",
        "11530": "f6cf5647da05f814be215cf7b4161646f4b2d5e0",
        "11531": "fc5e716ee8a73c1c4ab85285ebe11065020a7f30",
        "11532": "624d492af76e772c6d4deaf2f7cab0ff9d8056a2",
        "11534": "5d1afe816b188aa231cc84a762ef8cac5f4f4128",
        "11547": "596f0b1ede2d4cdd030561d5f85654aa20a8fa09",
        "11557": "310dddef6b053156d5cdc9fcb19086c352bc7529",
        "11570": "21e19cef1c5d5996e651ba1feaaae398811e580f",
        "11577": "47a2f249d2c7ef8e1f89465ed83ce157646d444d",
        "11578": "d3cc931b07640d37308a4418056fed21b3a46bd3",
        "11580": "91a077359f5a1e48baaf157bf314dbaf9a56dfda",
        "11590": "f864dc9473a7c12c1b4f8d41876e21ba08af9608",
        "11593": "b1989fd163744588a08ad3f952128cca95f4f5be",
        "11595": "1976ae7b87dd42ad52472168f5d71ac030545ba6",
        "11600": "710b17fd25867791121b8fd513d31fddbc294d02",
        "11603": "56abf0463573531229a7e68d626262ad14e77492",
        "11609": "540064d42b3720ef79e54985af06c96978151b6c",
        "11613": "3bb1d9800d7771d8e0b6645e8f076f91bae54c2d",
        "11615": "099ce15c8b767527fd0669a99c879897f3155c83",
        "11621": "54037541424ecf90b1434681969d507c7c512dbd",
        "11635": "794a84f04420909373e3f0926deb586df91fb020",
        "11636": "0d73ad67c519298aef327beb0c1b4d10493ef67c",
        "11639": "3ee3107fffada42e0e2d1dfcff5638770214882b",
        "11642": "68d8f02c856a7c43adca2eefc36d91c62198d78e",
        "11643": "9657df6a068906e28bfecb8956516b01e9200027",
        "11652": "e0f4bed0c731f8ee099bb067a67566fa76eb3416",
        "11656": "0d14b7b00df7757388ede92ce421b2e892426928",
        "11659": "ee47dd1068e8301ba06dd8d3a167dd49e6a50dac",
        "11678": "bb5290fec5ea9fcda9d0e5111da7f9aa892ec846",
        "11680": "e618828f4c70aa593735791c3e05bddabd41c41e",
        "11682": "0b08aad73e2cb68de260e2c81cd8a58fadf943d0",
        "11684": "a1c9cc6a75e2c7c9011ac2a8e233edf628547519",
        "11686": "cbb3f1db166ea816ba5c262fba0ca59338e7a637",
        "11687": "fa4deaa598f40138cc64fb1547c5ba2f44eee539",
        "11693": "925361885909b663fedb28ca6a479b887c6d2d63",
        "11695": "139e4c6f8178b00d18a9606e5e1b1ea05f5d7cef",
        "11697": "711f7929c29a626e32508530f56e45f9b935c55d",
        "11698": "7e8aba644775fd67af5d1b172f3accc6c1716286",
        "11700": "2e6c224c88774d03a99ad9c1ec4dacf1d4dd7ac7",
        "11704": "912fb9a805c68f362110a32a4b91a03c5a2a2cac",
        "11713": "3e69f32a34236a98a9cc9f326d91b5812ae22f44",
        "11714": "45a04af5279c33a67b555b08ca92f653cf8d61a5",
        "11716": "d501d0510463de399edc71ac068b38190875e9b8",
        "11723": "c1ce17856ca58933c94d8a8b27b73ba233671b2d",
        "11729": "b4cff297633a25a90c4808339fc8e67d0867bc71",
        "12009": "034261ac983ac404d2601b88e0293b5113658470",
        "12013": "e374e63178f2606279d297f208f6ae261196b0ba",
        "12015": "c70b3ac896a17707da05979c3d58276512897dc5",
        "12019": "7cc54cc1d9cf6a2202eeedc7077e1a510b91b930",
        "12020": "5b7b2127fbd80705853e0828b648c3f80c74fd36",
        "12021": "9a587aa03be89f582d0d2be83e2cd2d9ef80f316",
        "12022": "4f00d100e8e7757599de3f66891c21ca532c415e",
        "12024": "b207e3f00af13cd41e66036a77bd51ba0db49123",
        "12027": "313a8ccbb8240c3db530f0fe5d37fa47e80b1f66",
        "12029": "386fb9871e684222c1be167bb20f7ee89232675f",
        "12030": "7538c4c10441458154e0205e5cd3110b280d5b12",
        "12037": "c3452aa07ecf6cfcf1dd242f353ed13fa5c5f9da",
        "12051": "e79330a4462aab6cea7cbcab5ac4d86a7ae436a2",
        "12053": "0dd097e2f3ed8904d18403c9a63d5e86884f8fb4",
        "12054": "d33dbb475f1851d70f2f0f983f9382d12a4042a4",
        "12075": "20fa31fdae6da69b9462259cbe24fc2b43824761",
        "12082": "4e4f517498edecf45d015d279a95e5b8189b5b0c",
        "12091": "25b329ce8618563e8c38d63cbe387874c647e835",
        "12093": "21a4cf9993ca0b8f4d5cd0699a6249ff3131b407",
        "12094": "59a8f8757b187b956058c9f04da5cfc2ad4e1229",
        "12108": "c8aeb6439f1d22536fcb18ec279505282eb1a716",
        "12110": "c6f27ddfdfdfd726c305f957da2fac87ba15cd03",
        "12117": "1a4cf39e982dd565be08ec5eae63989da3ce3aa1",
        "12123": "7874e3386a6753d0cab5ccaf52080e39d9fb7f69",
        "12126": "c699ef8679316f40af8d0678219fa197522a741f",
        "12128": "fbe9194c132a9c4ed584d5a2665d77952e8ce159",
        "12129": "6e5e647b269f403721b22255cc5cc7bcd08bbbe6",
        "12158": "81441a3ccdadeab650cd7bee8cd8d8b3b9397121",
        "12160": "88d27a172e2db8f503a05848ca0e529101917b7e",
        "12163": "06adc75d4a94afd5ddb6188290f99387a82866ab",
        "12167": "4b4b9c88a3bd8e30fac643bbd2e3b7eb6e83ac0e",
        "12175": "bf72160bc018a3b52b15d57395bddca0f0bd8335",
        "12176": "5c099e37fb9b614b6453e29bb8447115702b4cf2",
        "12178": "87860925f1afb6fcc89a189e1efe2fefd0d25cd7",
        "12180": "b3f4e4c8be080443f883250ba4347d16a6702b90",
        "12187": "b40740248dfe900df437613976d05dacdd121e9d",
        "12189": "754ab0423f2bc1720d765468f00401982ade2761",
        "12193": "094dfe9eff3450eaa275ed6c753ad37a151408a7",
        "12198": "bfd230795882de86115a64e92c8c36987261e75f",
        "12199": "f79d07082f08dcb1a31555715adce1131852b445",
        "12200": "bcbcdceb36f38d5bee977606c0baa62067a8289a",
        "12201": "34e16f7c0af58197bca968ac91172c08baa2307e",
        "12275": "39b79ce88f1061a7936cdc9a884bc4255efef5b3",
        "12276": "7277300bd1cd36735e5709e58d57b25647512029",
        "12281": "152724b4fe5667e41e3c97e1c69c947a09572c81",
        "12287": "11ae5f16e206e5d713481109971c31258122bce1",
        "12295": "31b4bb947bd99095d5deb1484476998f7fe08542",
        "12298": "25db471e45e0abfd4ea7d03f0cf3c4722e3b9406",
        "12299": "c8729a6f22421c50eab86830b4682cc154c6cb15",
        "12300": "790f8ae0d676316d766fe5530d2ca4374703bb35",
        "12303": "55939499a1f9f3b2b23cd2990983edf783ea9894",
        "12305": "b8b6944c1eb52c7250276745324b99e5eed841c2",
        "12308": "c1fdcbe64e8547291f3edd27d2690edc284d9e40",
        "12328": "1762237f4b3685955e6ca9bdc4d40fe21fd10e9b",
        "12330": "6d60618f932eff3210672bb121c7bb0769cd5f06",
        "12332": "aa5aa4f60d273917934457732cb2745f2e5954c4",
        "12378": "c8127d8b16ccdb20d1c38c28a0045db85e560c59",
        "12384": "7ddd3e7dbf309285c068a912567ade1304dc3751",
        "12385": "a90aa3e219129da784aaea75a91b1af61497fb52",
        "12390": "6e5b46ecd6f03f921558cb270b1228b13b903fec",
        "12397": "91a9dc484b15b7c3a804912452a78b844f70fa19",
        "12398": "161e96723705889f243f583b5fcc7db1b12afe20",
        "12412": "7566ab16d9e132c814157022d505091a0eea5b10",
        "12423": "1a94663fb1a7f253309053530481da7cc5fa841a",
        "12443": "57d6bd3cac439c695ed0cbdd5fddcaa0ce646397",
        "12449": "f8acd64ecb5d6e121a88a34c3db4f59e9ea603c7",
        "12454": "eef41c487713ec4046b729a008792e19c1e93016",
        "12456": "79cf966cb4b10c1043a7821dbaaf90480a30c6af",
        "12458": "4b086fe64843ff8f87d2d2b550d4349578498979",
        "12460": "3d9312d6296b176de2256daddb5ec72971fa8171",
        "12462": "65f7636d5166c760a8b20661b2bc332d6f9b2137",
        "12464": "24da7902b6911304537f49454b982ba9c3e4a9b5",
        "12466": "34c029dba69003f452b62761dc92fa6738a07a15",
        "12505": "4c389358be9c1af58c8efc74f1ec70e391619eea",
        "12507": "cc4833023f78c7a5acc608e64cd1b36eea857f8e",
        "12515": "bcf43384dc0256cfa7ac25ff7461e354b2a76078",
        "12524": "8e1f9a8783e52610d5e85822fc6de43c58648e34",
        "12525": "24aabbbd1d3a6ad87c4425bfde8e3936377b8071",
        "12526": "f8943feb542fdfc20cc4caab407428f854ee0302",
        "12537": "51474c02cc124e1441e187fee3d8f8702d9f843e",
        "12539": "d8bbd45501553ca8f8f7d0ac30b253b3caad0348",
        "12540": "f6a8fcf3b1873f07998f8ac32875d47958920332",
        "12544": "24edca2e097eb9492d0c464822383be30710b2d2",
        "12549": "2a921e54bcaf2831f91c6cd0f4e1527c07fa7235",
        "12550": "aa35fb1123fac741ab4373020df0a64f7732b0fc",
        "12553": "143f70e9005ed5ebc8d153d621d221d9aad19448",
        "12632": "0c167c4646f441b82d34e1963bd1e0f3c1f87ee1",
        "12637": "68ad9dcb7456deffc4a3b490c37f22d38bb88399",
        "12640": "2818dc9e24fc2f5c6990f77a2a8638167f98f808",
        "12644": "acf2702cb80415138323fd81ca93a53e4b39581c",
        "12648": "400bafe2e19556db0274f9f99991235034a019dc",
        "12816": "4afaf2bbe3c1fb9e1eb976d965e08dee2758bdb7",
        "12847": "f6a57821cbc30b78d6a8561049b1032a78ad7c95",
        "12848": "99320eb99d3459c39b493203d27ad7279289cfc8",
        "12850": "5224a7b84ee869c715938d5c8febbd77c01f6628",
        "12876": "1c1b37ff7018ffc39bcfd727d6230ee3d64bbfbc",
        "12877": "cf9af13f3461a8b2558bf8aaeb76df0d6f072ee4",
        "12915": "8a610feb2ee1a878a84ea70590748037414ff4f5",
        "12919": "406f080c3a7689b4e67f57c3ee32481388223b9d",
        "12933": "dedfe7c514965b17b8a6be4b553c5ee563d4eb92",
        "12947": "eb66bfc1115816c081a910dd4b76a265e2b95eb8",
        "12949": "f86c61587ae773461f2ff4c21c67b4f589b6c685",
        "12959": "bdeeaf8e8d2d5312d1c4ad1fdf37c89fe82d5450",
        "12962": "9ed665ea67ce293b94c641aab0387fc846588b38",
        "12981": "58f6a2844da291d02dbb6169afd7e96dca8e07e7",
        "12984": "40f5522bece812c014a31596bea9942a3647a7dc",
        "12985": "8bf0adc8b2c17fde9b3ec6d0fd9484f1bf897d5e",
        "12988": "b1275ced8ff802d32f14d2e1ab799282a4ba4323",
        "12990": "deb27e3a08665af7c70d0ddfd62814bdf0af51f5",
        "12992": "447813a39b3500611f5e8a1d9c4c82fe3338bc9d",
        "12994": "c9415c07edc72215a4c91110bb69f5bf667a9c4b",
        "12996": "684f59ed07b316f5e4b0776c08954a3025545025",
        "12999": "f6391886b29b446a9924cbeebd924f53909dd7cc",
        "13001": "84b9e5463325ffca8623e40a0c2d5eec4cc82eca",
        "13510": "d47d61cc4d772ea36bce8cc1f2e96cd6b33c9e66",
        "13512": "540650dbcffcdc94424596987fc63a49352525ef",
        "13518": "c014c9dc415b3d0b459f48de5f64c088923767a8",
        "13571": "3a4ae696a115871cca0fff4fa53ce518b8f34618",
        "13575": "7316f33fcf86e17dfb71308cdca2611c31bab0d6",
        "13590": "c52465720aa10dcbe226f7197ddb5147accd3f70",
        "13591": "4c286137f7e1c3de12532cc633264f292da34fe8",
        "13594": "032449c84b01a2fe597e175a96c8cc79ac81f77d",
        "13598": "1d155ee91465ee6349acc172ce8f0dad5ad79721",
        "13600": "0f8e4324c2acfb5f8a0f800e44ba8d9e80059f3a",
        "13601": "f77b19adf31562b65b7886aab3b688ce1ff0d735",
        "13602": "7607afc2cb61160cbcda8b07495ee1c8a0c20331",
        "13605": "02bc0824103af6753795048f3a0e167e846f123e",
        "13619": "a8a973f1cf53724a40b34a0de528adf1656e3c0a",
        "13635": "4c071ba31d44658e8741680439d90cffb37db1cb",
        "13638": "eb27bed8e8b3c7522ba6a56bebc01b6c33fb9779",
        "13660": "be5fb1f32dab825333e4d1676fb08552cbf34851",
        "13662": "ea00cd7f8a316f33e36d29a63964ac1500f73589",
        "13664": "543767df6e7a69bfe3cba75cf686a505e959c040",
        "13673": "d3f0f8a5800a91358ed4ffb051528e7476b44b6f",
        "13674": "4749ef7ccc630b7f649ec972497bc5b7fca79303",
        "13682": "f6b457e621a016f06375c746c23abc5475a7b386",
        "13698": "c2074d7b1ff0cd03bf1421b0ad387b6c8dc3191d",
        "13705": "b4e44a98dcc2b4f1036d58f5aab39542dc1ffb41",
        "13707": "c666c6118c25312f0b5008d9b2b188f0d0986f48",
        "13708": "e8df29a53d7570860c855e1542bc000cf4f2bdbc",
        "13709": "9f4c3a804a7c10d801c9a8305b429eb7ba1f7dc3",
        "13713": "0b3a7b3f5142e593cdf689e1d42b55e9df6dc7e2",
        "13715": "d53fb10511f5aa72c2e449d003a8de9ecefa2bf9",
        "13728": "e73e691e6a3cc3c60a891d45b9f5fa13f20df953",
        "13731": "d64163ce770d07dbd752af8bdd489d1b4320a62f",
        "13732": "c7e7ac6332a4eee539a4c8da06d088540e692ade",
        "13733": "92b5aa8e34ca927925ee10f7eb29984be7d5e755",
        "13734": "a99a0f7d9896df4d6db76b94bf5544f011fcae8a",
        "13735": "8474b1acaa56bff2ce15f8da5bcb77264d456c7b",
        "13739": "0109b4c04df857019492c6122b8309632518438a",
        "13742": "50996f430881dd8229675faec9cb3bb31bc53ff9",
        "13758": "5eb0aff6e8bd23a5524c92a84a020810ff34270a",
        "13759": "19ff5e927a6f4d1e2bc284ea9279ef171c085abe",
        "13761": "4c2684c09ddcf658c03084855ab845fb788d7d3f",
        "13764": "381cc31a69d94244c5896ff87ffdca38c467ba76",
        "13765": "bb713e70ca7249a4e01f297f155a3e4f937b190b",
        "13766": "77b6311fa954637b03ef2675bf9be3d61ea98810",
        "13768": "ee5d0d3cd2c25565206c5408ad8fb5da9a21d28c",
        "13773": "b6b965afaf88594c1f754c9db07f3cf73b824478",
        "13775": "b49a29c0235d11689f902e52c8c3e2b2e861ed7f",
        "13797": "cf82fb89771b29c065a65157a6726e0886a66396",
        "13798": "1d17549feb7e559cbf92cb14c84e26be4db43ad8",
        "13799": "76201b577de4fa1f9fce8e4e83c923f4bee5dad3",
        "13800": "881c58b09e1f9cafc2fef2e617db703f29a7e752",
        "13801": "65a90d5b63fe96768f4be6e53f3f2243aabca430",
        "13802": "cd68b54076c616729130e1dfc2ffd447703a1abf",
        "13821": "2fb9f630c7004ce4cfc42b55eb87d3feb042c801",
        "13829": "4b826b04bf6b63c1f37495dd8ac13db035ff7367",
        "13830": "36ad57fc00de131f407d52afe50d235cc26d7a4b",
        "13831": "b78aaa85446443267206d4eb4a1b37902f218ac3",
        "13834": "b8dcdb06353a896c7b1bef4b9c7648baa71b04ad",
        "13846": "d6f3a74f5a56a2d98fd0f1aed69a7686d66bb033",
        "13850": "badfa3fe367cdc256266dd4e7821b71376503bb7",
        "13851": "d591af1e6ce88e632a47242b89cfbf75c184edda",
        "13856": "41613d71b50b927c6b547d49eb95214b11ff35cb",
        "13857": "e35480edc3d129e703a8dd39a58687e532f4300f",
        "13861": "cb18fdcd77dbe1f468352aadb8e9f5cc466b0eb5",
        "13866": "245ccad550a9a65e8bb5bd78374a1d85561230f6",
        "13877": "56f99d34c40f2a22d81a151d95c09a8da5fdfbe7",
        "13899": "bc12c91a118b1ba7f6278272a757297c676c1bbd",
        "13901": "e842a8a95ecad30020d7badc6296d3ee9378020d",
        "13902": "7a5d99842a62b9cd51af86b632522ccc65b9ec17",
        "13904": "b7f802bc710e4c7696cb2ad042d01eea455b30c1",
        "13920": "438f2e3436b5376c1826d09498a3e071eddeadc9",
        "13921": "b68794987ed4ab8cbc243f0885594122173704ef",
        "13923": "9fdffb6981086029f580d23f5e26a8444ee97073",
        "13932": "dc837dbd854ac94ae1fbf3b76d907ab854e4cf39",
        "13959": "aa3bda93cda7687665d6690ea94f9f309d080f85",
        "13964": "857c6eb0dba4ac1bd0fc95aa68df6d7d65ed0d5f",
        "13965": "5b53652dea5b400433ada6411df2f42d7a19505d",
        "13966": "d0c558caae68b6e29a845c111974ac624c5161f1",
        "13967": "cd698d3941266c9fb202a108140b5f4d8a7cb4a6",
        "13980": "95ab2fa3da5e423654f632d1de81aecd760be470",
        "13982": "abeef3aeb7006c1b550318482c887197b574ea08",
        "14002": "85178eb180ce5b44545d93072279007aea222202",
        "14011": "a1985e1e296536bfa815f9288fbba7728f273f3e",
        "14012": "0b11f9aeb1940b056ac0206dd166d32ea16b0bc4",
        "14013": "38309e0ef398b8690d2d742983ee296a21f226dc",
        "14014": "35d29779650ef89c8a7b23dd006e73663055cad5",
        "14023": "970781aaff414822425151b091e4f8b780ce7c0a",
        "14024": "971ec39313f5f3d5c4d74392c07f98f0e886aa73",
        "14025": "be1702838106fd9bcbc796f8fab4952ce0e276f8",
        "14032": "b7a5b73a14a46dc9950c63b3a649daae251f46ae",
        "14036": "5cf7aee6c62558de4714ed000f96e129924f746a",
        "14042": "4b49d6d731817c7d7a8ce8f997c2e9497aaea5dc",
        "14044": "fff72430d536d4280231d84f834eff0b3e525215",
        "14046": "f8e2a2167b0c28c453c742f35ff302a2f6867f04",
        "14051": "d57f0b57e902b9f6484cbaa17275ffadc52cedf1",
        "14055": "a11ddd099bc2f49c326feacec2d9d81a76fa167e",
        "14056": "f3ad5882b80ed5c6c5c41fef332564c28d3bef86",
        "14057": "769791487ea29c2fba495a29ab0d4c35efe7d3ad",
        "14058": "79896c18b7ae4a0701fa7a88a910c0e7bcf8aa57",
        "14059": "6e536708b2057fb21ac0eadc253d3b293d84f27a",
        "14064": "ac284d3d226052d6a5f7cc915aff9942bacd3ec1",
        "14067": "99991a1f6281344ffe678897b67f892ffc4fb1eb",
        "14068": "1cf050709df1d8c3ec2b34b9d763f2e8b97ce49b",
        "14072": "9241e5e29e907bbb036ca6429f7e697c94b607eb",
        "14073": "66b90e4f3353f2291a056be22931a96eda646a23",
        "14074": "a0390f660c7e78e144237d737f2089c9f0d77f0b",
        "14081": "b984eaff8fdb39c15832b8b09d2cd9fba0d9ecfd",
        "14083": "a5669268098fcd81a54a3b42115e0437c45c21da",
        "14085": "8557f520ee8911fe671bddb6320031ba004720ea",
        "14089": "e58d0687f5def3b1a7b4e51e8ec8a07baec00164",
        "14090": "1f1a79b37c8b3d7b7702fddf2f2e9a683aa524ab",
        "14091": "4c5c63b4651ab9f2d4dbbaa074800587bbbb8758",
        "14093": "2a2b772fc0dd19dd3d6b2db2421c78c8b4da046e",
        "14104": "fbc4d866a35daad1ec111109a51f1aef6411f3d3",
        "14120": "4f6b63267964a6bce3127d812751a19681d62882",
        "14130": "c4357d1546c059fcbf773c85233c5d86530264f1",
        "14148": "0a97330597c84a33d0822ee0d94bddb44550e07a",
        "14149": "9076177c46783d039d05b7a7d398bd3e2d66961f",
        "14166": "8eb0ea8730c4edc3738cf1fff05818717a8093d7",
        "14167": "2757c831ba6d7ab30222afe1e506bf9ad9ffe71e",
        "14178": "90c738bcfa85dd3a328efe6ae2a74a8093488d92",
        "14181": "210d8397a79f0379ebbab753c3d611ac6a98eb48",
        "14213": "f0418c7ae79e26a6b708b6220908f3cf52d7ab9c",
        "14235": "4214bc74a3a9c5f40419ee68f08373fbead63c11",
        "14236": "89c7ee7df7902d42e66db72c76c83c7b61e99d77",
        "14237": "f5e050960e458b3bdbfe93d15aa47e6499de9919",
        "14256": "2d0a5d9e3ea8b5bce5a174c94acf11e547416ec6",
        "14257": "7957f25584ca69268422bad8e2d7c4203f7f225a",
        "14261": "9c9461904c3335ac9b55a3d78a51cedf86407d51",
        "14262": "0585329c69c24737e8480f1d0a65c143f5c87db0",
        "14292": "912ace4a5889424a5c54377b40f8141123ac0983",
        "14294": "6e61506cf1bc804f690969596118465d62b54af0",
        "14305": "681f7342f067b4b0a840e1b99404505065207761",
        "14306": "3ff22e5278cc56f411b05cc65f4ec791d442697c",
        "14307": "598d0e042600b91d6df5abeb2364766566a872b3",
        "14308": "07993dbd22ebe967d6b2d66e66330b3bb184941f",
        "14310": "f9089c2dc5c70a31fd5539ec2696810e79198c14",
        "14359": "7690756ca3b6340670e671ef5d433b09334fec27",
        "14360": "7fa714cda2862b853002964960506f5bff597934",
        "14382": "4e074b61291db0973157bd035032b84befad97ac",
        "14385": "41d83e0981a5e259f401a1429f32d2b33e9d42c4",
        "14387": "12d8b6fd351a9f9f1b565993ea419713e92ec34c",
        "14391": "63ed8300c94ba30223ffb747042c8cc02bc78257",
        "14397": "2640143e355bd9b6f569a587c94aa566082d5835",
        "14398": "6c9563f19437049150abc28941ee800f8517071e",
        "14401": "4d8af23372100a97223ac5be9a5228b3f384ffec",
        "14415": "5d981560ed4e17bc969d2246de95e5755d88fba6",
        "14423": "be78cdb720c45f4ecbc613f3ea22a0d9a79e52f2",
        "14426": "3df0a9a88e5a54c1939451f76d30f3f6a5bdf072",
        "14427": "06e25fa170c1fa5b636e38b55365f938856111eb",
        "14428": "dfb2b699528c0bcf45ba525ce2dfc44bfd184d08",
        "14429": "f2f6d64807f98d22777a3076587d6db768ae6bcf",
        "14432": "c5461dd295663559b55f7e59280df9317062887c",
        "14453": "7a1bd8ec88fbc04fa8d4906d5f65be60c0358d79",
        "14454": "07eeee07465e172b1ca6d4402dd611cdf50ec427",
        "14455": "26dde2b28cadda403a5549a84dc1698900b23f74",
        "14468": "243920b8f77057a3fbd035c0f0d4639b8ea60351",
        "14469": "a4b70ccc3936b51e4932408e076ee5da84056494",
        "14479": "4ecdb8a67f41c85141786994a8e2dd694b090a30",
        "14480": "054c1bd701118e0763c85d1641d24ab5652fe15e",
        "14494": "4e4956669ce53f5ee739f3394ea264efa7edd594",
        "14507": "5315055b8735f851028034b95b9596dc0f34d37e",
        "14528": "25b6541a6b7f85cdf292e3d874b05411aa4696c1",
        "14613": "a582d4d80526068c51fa3ae90e20cba3af1d5fc4",
        "14679": "f445ff779e9d1d29dade55bee22542a96f9dbb72",
        "14775": "88dfeb5d993c40139ceb42eafe89349407a3d905",
        "14841": "c18f54ca7bb521f1a5dc338785111ca77b189244"
    },
    "show_commit_url": "http://github.com/numba/numba/commit/",
    "tags": {
        "0.10.0": 3856,
        "0.10.1": 3963,
        "0.10.2": 3982,
        "0.11.0": 4095,
        "0.11.1": 4150,
        "0.12.0": 4453,
        "0.12.1": 4558,
        "0.12.2": 4625,
        "0.12.3": 3752,
        "0.12.4": 3913,
        "0.12.5": 4080,
        "0.12.6": 4108,
        "0.12.7": 4151,
        "0.13.0": 4713,
        "0.13.1": 4819,
        "0.13.2": 5087,
        "0.13.3": 5408,
        "0.13.4": 5749,
        "0.13.4rc2": 5747,
        "0.13.4rc3": 5749,
        "0.14.0": 6233,
        "0.14.1": 4820,
        "0.14.2": 5088,
        "0.14.3": 5406,
        "0.15.0": 6459,
        "0.15.1": 6485,
        "0.16.0": 6933,
        "0.17.0": 7283,
        "0.17.0rc1": 7283,
        "0.17.1": 7295,
        "0.17.1rc1": 7295,
        "0.18.0": 7751,
        "0.18.0rc1": 7749,
        "0.18.1": 7780,
        "0.18.2": 7804,
        "0.19.0": 8368,
        "0.19.1": 8385,
        "0.19.2": 8421,
        "0.2": 623,
        "0.20.0": 8646,
        "0.21.0": 9129,
        "0.22.0": 9490,
        "0.22.1": 9515,
        "0.23.0": 9835,
        "0.23.1": 9885,
        "0.24.0": 10158,
        "0.25.0": 10345,
        "0.26.0": 10656,
        "0.26.0.dev": 10345,
        "0.27.0": 10877,
        "0.27.0.dev": 10730,
        "0.28.0": 11165,
        "0.28.0.dev": 10880,
        "0.28.1": 11170,
        "0.29.0": 11360,
        "0.29.0.dev": 11170,
        "0.3": 1132,
        "0.3.1": 1161,
        "0.3.2": 1199,
        "0.30.0": 11488,
        "0.30.0.dev": 11361,
        "0.30.1": 11517,
        "0.30.1.dev": 11515,
        "0.31.0": 11613,
        "0.31.0.dev": 11489,
        "0.32.0": 11695,
        "0.32.0.dev": 11615,
        "0.32.0rc1": 11687,
        "0.33.0": 12051,
        "0.33.0.dev": 11697,
        "0.33.0rc1": 12037,
        "0.34.0": 12308,
        "0.34.0.dev": 12053,
        "0.34.0rc1": 12287,
        "0.35.0": 12544,
        "0.35.0.dev": 12328,
        "0.35.0rc1": 12526,
        "0.36.0": 12990,
        "0.36.0.dev": 12549,
        "0.36.0rc1": 12988,
        "0.36.1": 12999,
        "0.36.2": 13512,
        "0.37.0": 13773,
        "0.37.0dev0": 13001,
        "0.37.0dev1": 13518,
        "0.37.0rc1": 13768,
        "0.38.0": 14093,
        "0.38.0dev0": 13775,
        "0.38.0dev1": 14072,
        "0.38.0rc1": 14074,
        "0.38.1": 14292,
        "0.39.0": 14494,
        "0.39.0dev0": 14104,
        "0.39.0rc1": 14455,
        "0.40.0dev0": 14507,
        "0.5.0": 1723,
        "0.6.0": 1953,
        "0.7.0": 2419,
        "0.7.1": 2606,
        "0.7.2": 2811,
        "0.7.3": 1208,
        "0.8.0": 3117,
        "0.8.1": 3218,
        "0.9.0": 3438,
        "0.9.1": 3856,
        "dev": 214,
        "v0.1": 243,
        "v0.1.1": 358,
        "v0.1rc0": 239
    }
}