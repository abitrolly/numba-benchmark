{
    "bench_arrayexprs.ArrayExpressions.time_cube_float32": {
        "code": "def f(self):\n    func(*self.samples[dtype])\n",
        "goal_time": 2.0,
        "name": "bench_arrayexprs.ArrayExpressions.time_cube_float32",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "bench_arrayexprs.ArrayExpressions.time_cube_float64": {
        "code": "def f(self):\n    func(*self.samples[dtype])\n",
        "goal_time": 2.0,
        "name": "bench_arrayexprs.ArrayExpressions.time_cube_float64",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "bench_arrayexprs.ArrayExpressions.time_rel_diff_float32": {
        "code": "def f(self):\n    func(*self.samples[dtype])\n",
        "goal_time": 2.0,
        "name": "bench_arrayexprs.ArrayExpressions.time_rel_diff_float32",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "bench_arrayexprs.ArrayExpressions.time_rel_diff_float64": {
        "code": "def f(self):\n    func(*self.samples[dtype])\n",
        "goal_time": 2.0,
        "name": "bench_arrayexprs.ArrayExpressions.time_rel_diff_float64",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "bench_arrayexprs.ArrayExpressions.time_sq_diff_float32": {
        "code": "def f(self):\n    func(*self.samples[dtype])\n",
        "goal_time": 2.0,
        "name": "bench_arrayexprs.ArrayExpressions.time_sq_diff_float32",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "bench_arrayexprs.ArrayExpressions.time_sq_diff_float64": {
        "code": "def f(self):\n    func(*self.samples[dtype])\n",
        "goal_time": 2.0,
        "name": "bench_arrayexprs.ArrayExpressions.time_sq_diff_float64",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "bench_arrayexprs.ArrayExpressions.time_square_float32": {
        "code": "def f(self):\n    func(*self.samples[dtype])\n",
        "goal_time": 2.0,
        "name": "bench_arrayexprs.ArrayExpressions.time_square_float32",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "bench_arrayexprs.ArrayExpressions.time_square_float64": {
        "code": "def f(self):\n    func(*self.samples[dtype])\n",
        "goal_time": 2.0,
        "name": "bench_arrayexprs.ArrayExpressions.time_square_float64",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "bench_arrayexprs.ArrayExpressions.time_sum_float32": {
        "code": "def f(self):\n    func(*self.samples[dtype])\n",
        "goal_time": 2.0,
        "name": "bench_arrayexprs.ArrayExpressions.time_sum_float32",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "bench_arrayexprs.ArrayExpressions.time_sum_float64": {
        "code": "def f(self):\n    func(*self.samples[dtype])\n",
        "goal_time": 2.0,
        "name": "bench_arrayexprs.ArrayExpressions.time_sum_float64",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "bench_blackscholes.BlackScholes.time_blackscholes": {
        "code": "def time_blackscholes(self):\n    for i in range(10):\n        blackscholes(*args)\n",
        "goal_time": 2.0,
        "name": "bench_blackscholes.BlackScholes.time_blackscholes",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "bench_centdiff.CenteredDifference.time_centered_difference_1d": {
        "code": "def time_centered_difference_1d(self):\n    centered_difference_range1d(u1, D1, dx)\n",
        "goal_time": 2.0,
        "name": "bench_centdiff.CenteredDifference.time_centered_difference_1d",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "bench_centdiff.CenteredDifference.time_centered_difference_2d_C": {
        "code": "def time_centered_difference_2d_C(self):\n    centered_difference_range2d(u2c, D2c, dx)\n",
        "goal_time": 2.0,
        "name": "bench_centdiff.CenteredDifference.time_centered_difference_2d_C",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "bench_centdiff.CenteredDifference.time_centered_difference_2d_fortran": {
        "code": "def time_centered_difference_2d_fortran(self):\n    centered_difference_range2d(u2f, D2f, dx)\n",
        "goal_time": 2.0,
        "name": "bench_centdiff.CenteredDifference.time_centered_difference_2d_fortran",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "bench_centdiff.CenteredDifference.time_centered_difference_2d_non_contiguous": {
        "code": "def time_centered_difference_2d_non_contiguous(self):\n    centered_difference_range2d(u2a, D2a, dx)\n",
        "goal_time": 2.0,
        "name": "bench_centdiff.CenteredDifference.time_centered_difference_2d_non_contiguous",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "bench_compiling.CachedCompilation.time_jit_mandel": {
        "code": "def time_jit_mandel(self):\n    jit(mandel_sig, cache=True, nopython=True)(mandel)\n",
        "goal_time": 2.0,
        "name": "bench_compiling.CachedCompilation.time_jit_mandel",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "bench_compiling.CachedCompilation.time_jit_noop": {
        "code": "def time_jit_noop(self):\n    jit(\"int32(int32)\", cache=True, nopython=True)(no_op)\n",
        "goal_time": 2.0,
        "name": "bench_compiling.CachedCompilation.time_jit_noop",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "bench_compiling.LoopLiftedCompilation.time_lift": {
        "code": "def time_lift(self):\n    # The only way to time the entire thing (including the inner\n    # function formed by the loop) is to call the function wrapper.\n    f = jit(lift)\n    f(1.0)\n",
        "goal_time": 2.0,
        "name": "bench_compiling.LoopLiftedCompilation.time_lift",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "bench_compiling.NoPythonCompilation.time_jit_mandel": {
        "code": "def time_jit_mandel(self):\n    jit(mandel_sig, nopython=True)(mandel)\n",
        "goal_time": 2.0,
        "name": "bench_compiling.NoPythonCompilation.time_jit_mandel",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "bench_compiling.NoPythonCompilation.time_jit_noop": {
        "code": "def time_jit_noop(self):\n    jit(\"int32(int32)\", nopython=True)(no_op)\n",
        "goal_time": 2.0,
        "name": "bench_compiling.NoPythonCompilation.time_jit_noop",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "bench_compiling.PyObjectCompilation.time_jit_mandel_forceobj": {
        "code": "def time_jit_mandel_forceobj(self):\n    jit(mandel_sig, forceobj=True)(mandel)\n",
        "goal_time": 2.0,
        "name": "bench_compiling.PyObjectCompilation.time_jit_mandel_forceobj",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "bench_compiling.PyObjectCompilation.time_jit_noop_fallback": {
        "code": "def time_jit_noop_fallback(self):\n    jit(\"int32(int32)\")(force_obj)\n",
        "goal_time": 2.0,
        "name": "bench_compiling.PyObjectCompilation.time_jit_noop_fallback",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "bench_compiling.PyObjectCompilation.time_jit_noop_forceobj": {
        "code": "def time_jit_noop_forceobj(self):\n    jit(\"int32(int32)\", forceobj=True)(force_obj)\n",
        "goal_time": 2.0,
        "name": "bench_compiling.PyObjectCompilation.time_jit_noop_forceobj",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "bench_cuda.BlackScholes.time_blackscholes": {
        "code": "def time_blackscholes(self):\n    blockdim = 512, 1\n    griddim = int(math.ceil(float(N) / blockdim[0])), 1\n    for i in range(10):\n        black_scholes_cuda[griddim, blockdim, self.stream](\n            self.d_callResult, self.d_putResult,\n            self.d_stockPrice, self.d_optionStrike, self.d_optionYears,\n            RISKFREE, VOLATILITY)\n    self.stream.synchronize()\n",
        "goal_time": 2.0,
        "name": "bench_cuda.BlackScholes.time_blackscholes",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "bench_cuda.DataTransfer.time_transfer_from_gpu_large": {
        "code": "def time_transfer_from_gpu_large(self):\n    for i in range(10):\n        self.d_large_data.copy_to_host(self.large_data, self.stream)\n    self.stream.synchronize()\n",
        "goal_time": 2.0,
        "name": "bench_cuda.DataTransfer.time_transfer_from_gpu_large",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "bench_cuda.DataTransfer.time_transfer_from_gpu_small": {
        "code": "def time_transfer_from_gpu_small(self):\n    for i in range(10):\n        self.d_small_data.copy_to_host(self.small_data, self.stream)\n    self.stream.synchronize()\n",
        "goal_time": 2.0,
        "name": "bench_cuda.DataTransfer.time_transfer_from_gpu_small",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "bench_cuda.DataTransfer.time_transfer_to_gpu_large": {
        "code": "def time_transfer_to_gpu_large(self):\n    for i in range(10):\n        cuda.to_device(self.large_data, self.stream)\n    self.stream.synchronize()\n",
        "goal_time": 2.0,
        "name": "bench_cuda.DataTransfer.time_transfer_to_gpu_large",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "bench_cuda.DataTransfer.time_transfer_to_gpu_small": {
        "code": "def time_transfer_to_gpu_small(self):\n    for i in range(10):\n        cuda.to_device(self.small_data, self.stream)\n    self.stream.synchronize()\n",
        "goal_time": 2.0,
        "name": "bench_cuda.DataTransfer.time_transfer_to_gpu_small",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "bench_cuda.NBody.time_cpu_nbody": {
        "code": "def time_cpu_nbody(self):\n    run_cpu_nbody(self.positions, self.weights)\n",
        "goal_time": 2.0,
        "name": "bench_cuda.NBody.time_cpu_nbody",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "bench_cuda.NBody.time_cuda_nbody": {
        "code": "def time_cuda_nbody(self):\n    self.runner.run()\n",
        "goal_time": 2.0,
        "name": "bench_cuda.NBody.time_cuda_nbody",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "bench_cuda.Synthetic.time_addmul_f32": {
        "code": "def time_addmul_f32(self):\n    blockdim = 512, 1\n    griddim = int(math.ceil(float(self.n) / blockdim[0])), 1\n    for i in range(10):\n        addmul_f32[griddim, blockdim, self.stream](\n            self.d_f32, self.d_f32, self.d_f32)\n    self.stream.synchronize()\n",
        "goal_time": 2.0,
        "name": "bench_cuda.Synthetic.time_addmul_f32",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "bench_cuda.Synthetic.time_addmul_f64": {
        "code": "def time_addmul_f64(self):\n    blockdim = 512, 1\n    griddim = int(math.ceil(float(self.n) / blockdim[0])), 1\n    for i in range(10):\n        addmul_f64[griddim, blockdim, self.stream](\n            self.d_f64, self.d_f64, self.d_f64)\n    self.stream.synchronize()\n",
        "goal_time": 2.0,
        "name": "bench_cuda.Synthetic.time_addmul_f64",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "bench_cuda.Synthetic.time_reduce_f32": {
        "code": "def time_reduce_f32(self):\n    self.sum_reduce(self.d_f32, res=self.res_f32, stream=self.stream)\n    self.stream.synchronize()\n",
        "goal_time": 2.0,
        "name": "bench_cuda.Synthetic.time_reduce_f32",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "bench_cuda.Synthetic.time_reduce_f64": {
        "code": "def time_reduce_f64(self):\n    self.sum_reduce(self.d_f64, res=self.res_f64, stream=self.stream)\n    self.stream.synchronize()\n",
        "goal_time": 2.0,
        "name": "bench_cuda.Synthetic.time_reduce_f64",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "bench_cuda.Synthetic.time_run_empty_kernel": {
        "code": "def time_run_empty_kernel(self):\n    self.no_op[1, 1, self.stream]()\n    self.stream.synchronize()\n",
        "goal_time": 2.0,
        "name": "bench_cuda.Synthetic.time_run_empty_kernel",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "bench_dispatch.NoPythonDispatch.time_dispatch_array_1d": {
        "code": "def timefunc(self, arg=samples[name]):\n    func = binary\n    for i in range(1000):\n        func(arg, arg)\n",
        "goal_time": 2.0,
        "name": "bench_dispatch.NoPythonDispatch.time_dispatch_array_1d",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "bench_dispatch.NoPythonDispatch.time_dispatch_array_3d": {
        "code": "def timefunc(self, arg=samples[name]):\n    func = binary\n    for i in range(1000):\n        func(arg, arg)\n",
        "goal_time": 2.0,
        "name": "bench_dispatch.NoPythonDispatch.time_dispatch_array_3d",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "bench_dispatch.NoPythonDispatch.time_dispatch_array_records": {
        "code": "def timefunc(self, arg=samples[name]):\n    func = binary\n    for i in range(1000):\n        func(arg, arg)\n",
        "goal_time": 2.0,
        "name": "bench_dispatch.NoPythonDispatch.time_dispatch_array_records",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "bench_dispatch.NoPythonDispatch.time_dispatch_bool": {
        "code": "def timefunc(self, arg=samples[name]):\n    func = binary\n    for i in range(1000):\n        func(arg, arg)\n",
        "goal_time": 2.0,
        "name": "bench_dispatch.NoPythonDispatch.time_dispatch_bool",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "bench_dispatch.NoPythonDispatch.time_dispatch_bytearray": {
        "code": "def timefunc(self, arg=samples[name]):\n    func = binary\n    for i in range(1000):\n        func(arg, arg)\n",
        "goal_time": 2.0,
        "name": "bench_dispatch.NoPythonDispatch.time_dispatch_bytearray",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "bench_dispatch.NoPythonDispatch.time_dispatch_complex": {
        "code": "def timefunc(self, arg=samples[name]):\n    func = binary\n    for i in range(1000):\n        func(arg, arg)\n",
        "goal_time": 2.0,
        "name": "bench_dispatch.NoPythonDispatch.time_dispatch_complex",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "bench_dispatch.NoPythonDispatch.time_dispatch_defaults": {
        "code": "def time_dispatch_defaults(self):\n    unary_default()\n",
        "goal_time": 2.0,
        "name": "bench_dispatch.NoPythonDispatch.time_dispatch_defaults",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "bench_dispatch.NoPythonDispatch.time_dispatch_float": {
        "code": "def timefunc(self, arg=samples[name]):\n    func = binary\n    for i in range(1000):\n        func(arg, arg)\n",
        "goal_time": 2.0,
        "name": "bench_dispatch.NoPythonDispatch.time_dispatch_float",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "bench_dispatch.NoPythonDispatch.time_dispatch_int": {
        "code": "def timefunc(self, arg=samples[name]):\n    func = binary\n    for i in range(1000):\n        func(arg, arg)\n",
        "goal_time": 2.0,
        "name": "bench_dispatch.NoPythonDispatch.time_dispatch_int",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "bench_dispatch.NoPythonDispatch.time_dispatch_recarray": {
        "code": "def timefunc(self, arg=samples[name]):\n    func = binary\n    for i in range(1000):\n        func(arg, arg)\n",
        "goal_time": 2.0,
        "name": "bench_dispatch.NoPythonDispatch.time_dispatch_recarray",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "bench_dispatch.NoPythonDispatch.time_dispatch_record": {
        "code": "def timefunc(self, arg=samples[name]):\n    func = binary\n    for i in range(1000):\n        func(arg, arg)\n",
        "goal_time": 2.0,
        "name": "bench_dispatch.NoPythonDispatch.time_dispatch_record",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "bench_dispatch.NoPythonDispatch.time_dispatch_tuple": {
        "code": "def timefunc(self, arg=samples[name]):\n    func = binary\n    for i in range(1000):\n        func(arg, arg)\n",
        "goal_time": 2.0,
        "name": "bench_dispatch.NoPythonDispatch.time_dispatch_tuple",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "bench_dispatch.PyObjectDispatch.time_dispatch_pyobject": {
        "code": "def time_dispatch_pyobject(self):\n    x = object()\n    for i in range(1000):\n        binary_pyobj(x, x)\n",
        "goal_time": 2.0,
        "name": "bench_dispatch.PyObjectDispatch.time_dispatch_pyobject",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "bench_gameoflife.GameOfLife.time_gameoflife": {
        "code": "def time_gameoflife(self):\n    run_game(10)\n",
        "goal_time": 2.0,
        "name": "bench_gameoflife.GameOfLife.time_gameoflife",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "bench_ising.IsingModel.time_ising": {
        "code": "def time_ising(self):\n    x = x_start.copy()\n    for i in range(N_iterations):\n        update(x)\n",
        "goal_time": 2.0,
        "name": "bench_ising.IsingModel.time_ising",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "bench_iterating.MonoArrayIterators.time_array_iter_1d": {
        "code": "def time_array_iter_1d(self):\n    array_iter_1d(arr1)\n",
        "goal_time": 2.0,
        "name": "bench_iterating.MonoArrayIterators.time_array_iter_1d",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "bench_iterating.MonoArrayIterators.time_flat_index_1d": {
        "code": "def time_flat_index_1d(self):\n    flat_index(arr1)\n",
        "goal_time": 2.0,
        "name": "bench_iterating.MonoArrayIterators.time_flat_index_1d",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "bench_iterating.MonoArrayIterators.time_flat_index_2d_C": {
        "code": "def time_flat_index_2d_C(self):\n    flat_index(arr2c)\n",
        "goal_time": 2.0,
        "name": "bench_iterating.MonoArrayIterators.time_flat_index_2d_C",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "bench_iterating.MonoArrayIterators.time_flat_index_2d_fortran": {
        "code": "def time_flat_index_2d_fortran(self):\n    flat_index(arr2f)\n",
        "goal_time": 2.0,
        "name": "bench_iterating.MonoArrayIterators.time_flat_index_2d_fortran",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "bench_iterating.MonoArrayIterators.time_flat_index_2d_non_contiguous": {
        "code": "def time_flat_index_2d_non_contiguous(self):\n    flat_index(arr2a)\n",
        "goal_time": 2.0,
        "name": "bench_iterating.MonoArrayIterators.time_flat_index_2d_non_contiguous",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "bench_iterating.MonoArrayIterators.time_flat_iter_1d": {
        "code": "def time_flat_iter_1d(self):\n    flat_iter(arr1)\n",
        "goal_time": 2.0,
        "name": "bench_iterating.MonoArrayIterators.time_flat_iter_1d",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "bench_iterating.MonoArrayIterators.time_flat_iter_2d_C": {
        "code": "def time_flat_iter_2d_C(self):\n    flat_iter(arr2c)\n",
        "goal_time": 2.0,
        "name": "bench_iterating.MonoArrayIterators.time_flat_iter_2d_C",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "bench_iterating.MonoArrayIterators.time_flat_iter_2d_fortran": {
        "code": "def time_flat_iter_2d_fortran(self):\n    flat_iter(arr2f)\n",
        "goal_time": 2.0,
        "name": "bench_iterating.MonoArrayIterators.time_flat_iter_2d_fortran",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "bench_iterating.MonoArrayIterators.time_flat_iter_2d_non_contiguous": {
        "code": "def time_flat_iter_2d_non_contiguous(self):\n    flat_iter(arr2a)\n",
        "goal_time": 2.0,
        "name": "bench_iterating.MonoArrayIterators.time_flat_iter_2d_non_contiguous",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "bench_iterating.MonoArrayIterators.time_ndindex_1d": {
        "code": "def time_ndindex_1d(self):\n    ndindex(arr1)\n",
        "goal_time": 2.0,
        "name": "bench_iterating.MonoArrayIterators.time_ndindex_1d",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "bench_iterating.MonoArrayIterators.time_ndindex_2d": {
        "code": "def time_ndindex_2d(self):\n    ndindex(arr2c)\n",
        "goal_time": 2.0,
        "name": "bench_iterating.MonoArrayIterators.time_ndindex_2d",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "bench_iterating.MonoArrayIterators.time_nditer_iter_1d": {
        "code": "def time_nditer_iter_1d(self):\n    nditer1(arr1)\n",
        "goal_time": 2.0,
        "name": "bench_iterating.MonoArrayIterators.time_nditer_iter_1d",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "bench_iterating.MonoArrayIterators.time_nditer_iter_2d_C": {
        "code": "def time_nditer_iter_2d_C(self):\n    nditer1(arr2c)\n",
        "goal_time": 2.0,
        "name": "bench_iterating.MonoArrayIterators.time_nditer_iter_2d_C",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "bench_iterating.MonoArrayIterators.time_nditer_iter_2d_C_small_inner_dim": {
        "code": "def time_nditer_iter_2d_C_small_inner_dim(self):\n    nditer1(arr2c2)\n",
        "goal_time": 2.0,
        "name": "bench_iterating.MonoArrayIterators.time_nditer_iter_2d_C_small_inner_dim",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "bench_iterating.MonoArrayIterators.time_nditer_iter_2d_fortran": {
        "code": "def time_nditer_iter_2d_fortran(self):\n    nditer1(arr2f)\n",
        "goal_time": 2.0,
        "name": "bench_iterating.MonoArrayIterators.time_nditer_iter_2d_fortran",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "bench_iterating.MonoArrayIterators.time_nditer_iter_2d_non_contiguous": {
        "code": "def time_nditer_iter_2d_non_contiguous(self):\n    nditer1(arr2a)\n",
        "goal_time": 2.0,
        "name": "bench_iterating.MonoArrayIterators.time_nditer_iter_2d_non_contiguous",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "bench_iterating.MonoArrayIterators.time_range_index_1d": {
        "code": "def time_range_index_1d(self):\n    range1d(arr1)\n",
        "goal_time": 2.0,
        "name": "bench_iterating.MonoArrayIterators.time_range_index_1d",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "bench_iterating.MonoArrayIterators.time_range_index_2d": {
        "code": "def time_range_index_2d(self):\n    range2d(arr2c)\n",
        "goal_time": 2.0,
        "name": "bench_iterating.MonoArrayIterators.time_range_index_2d",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "bench_iterating.MultiArrayIterators.time_nditer_three_2d_A_A_A": {
        "code": "def time_nditer_three_2d_A_A_A(self):\n    nditer3(arr2a, arr2a, arr2a)\n",
        "goal_time": 2.0,
        "name": "bench_iterating.MultiArrayIterators.time_nditer_three_2d_A_A_A",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "bench_iterating.MultiArrayIterators.time_nditer_three_2d_C_C_C": {
        "code": "def time_nditer_three_2d_C_C_C(self):\n    nditer3(arr2c, arr2c, arr2c)\n",
        "goal_time": 2.0,
        "name": "bench_iterating.MultiArrayIterators.time_nditer_three_2d_C_C_C",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "bench_iterating.MultiArrayIterators.time_nditer_three_2d_F_F_F": {
        "code": "def time_nditer_three_2d_F_F_F(self):\n    nditer3(arr2f, arr2f, arr2f)\n",
        "goal_time": 2.0,
        "name": "bench_iterating.MultiArrayIterators.time_nditer_three_2d_F_F_F",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "bench_iterating.MultiArrayIterators.time_nditer_two_1d": {
        "code": "def time_nditer_two_1d(self):\n    nditer2(arr1, arr1)\n",
        "goal_time": 2.0,
        "name": "bench_iterating.MultiArrayIterators.time_nditer_two_1d",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "bench_iterating.MultiArrayIterators.time_nditer_two_2d_A_A": {
        "code": "def time_nditer_two_2d_A_A(self):\n    nditer2(arr2a, arr2a)\n",
        "goal_time": 2.0,
        "name": "bench_iterating.MultiArrayIterators.time_nditer_two_2d_A_A",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "bench_iterating.MultiArrayIterators.time_nditer_two_2d_C_A": {
        "code": "def time_nditer_two_2d_C_A(self):\n    nditer2(arr2c, arr2a)\n",
        "goal_time": 2.0,
        "name": "bench_iterating.MultiArrayIterators.time_nditer_two_2d_C_A",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "bench_iterating.MultiArrayIterators.time_nditer_two_2d_C_A_small_inner_dim": {
        "code": "def time_nditer_two_2d_C_A_small_inner_dim(self):\n    nditer2(arr2c2, arr2a2)\n",
        "goal_time": 2.0,
        "name": "bench_iterating.MultiArrayIterators.time_nditer_two_2d_C_A_small_inner_dim",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "bench_iterating.MultiArrayIterators.time_nditer_two_2d_C_C": {
        "code": "def time_nditer_two_2d_C_C(self):\n    nditer2(arr2c, arr2c)\n",
        "goal_time": 2.0,
        "name": "bench_iterating.MultiArrayIterators.time_nditer_two_2d_C_C",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "bench_iterating.MultiArrayIterators.time_nditer_two_2d_C_C_small_inner_dim": {
        "code": "def time_nditer_two_2d_C_C_small_inner_dim(self):\n    nditer2(arr2c2, arr2c2)\n",
        "goal_time": 2.0,
        "name": "bench_iterating.MultiArrayIterators.time_nditer_two_2d_C_C_small_inner_dim",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "bench_iterating.MultiArrayIterators.time_nditer_two_2d_F_C": {
        "code": "def time_nditer_two_2d_F_C(self):\n    nditer2(arr2f, arr2c)\n",
        "goal_time": 2.0,
        "name": "bench_iterating.MultiArrayIterators.time_nditer_two_2d_F_C",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "bench_iterating.MultiArrayIterators.time_nditer_two_2d_F_C_small_inner_dim": {
        "code": "def time_nditer_two_2d_F_C_small_inner_dim(self):\n    nditer2(arr2f2, arr2c2)\n",
        "goal_time": 2.0,
        "name": "bench_iterating.MultiArrayIterators.time_nditer_two_2d_F_C_small_inner_dim",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "bench_iterating.MultiArrayIterators.time_nditer_two_2d_F_F": {
        "code": "def time_nditer_two_2d_F_F(self):\n    nditer2(arr2f, arr2f)\n",
        "goal_time": 2.0,
        "name": "bench_iterating.MultiArrayIterators.time_nditer_two_2d_F_F",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "bench_iterating.MultiArrayIterators.time_nditer_two_2d_F_F_small_inner_dim": {
        "code": "def time_nditer_two_2d_F_F_small_inner_dim(self):\n    nditer2(arr2f2, arr2f2)\n",
        "goal_time": 2.0,
        "name": "bench_iterating.MultiArrayIterators.time_nditer_two_2d_F_F_small_inner_dim",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "bench_iterating.MultiArrayIterators.time_zip_flat_two_1d": {
        "code": "def time_zip_flat_two_1d(self):\n    zip_flat(arr1, arr1)\n",
        "goal_time": 2.0,
        "name": "bench_iterating.MultiArrayIterators.time_zip_flat_two_1d",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "bench_iterating.MultiArrayIterators.time_zip_flat_two_2d_A_A": {
        "code": "def time_zip_flat_two_2d_A_A(self):\n    zip_flat(arr2a, arr2a)\n",
        "goal_time": 2.0,
        "name": "bench_iterating.MultiArrayIterators.time_zip_flat_two_2d_A_A",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "bench_iterating.MultiArrayIterators.time_zip_flat_two_2d_C_C": {
        "code": "def time_zip_flat_two_2d_C_C(self):\n    zip_flat(arr2c, arr2c)\n",
        "goal_time": 2.0,
        "name": "bench_iterating.MultiArrayIterators.time_zip_flat_two_2d_C_C",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "bench_iterating.MultiArrayIterators.time_zip_flat_two_2d_C_C_small_inner_dim": {
        "code": "def time_zip_flat_two_2d_C_C_small_inner_dim(self):\n    zip_flat(arr2c2, arr2c2)\n",
        "goal_time": 2.0,
        "name": "bench_iterating.MultiArrayIterators.time_zip_flat_two_2d_C_C_small_inner_dim",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "bench_iterating.MultiArrayIterators.time_zip_flat_two_2d_F_F": {
        "code": "def time_zip_flat_two_2d_F_F(self):\n    zip_flat(arr2f, arr2f)\n",
        "goal_time": 2.0,
        "name": "bench_iterating.MultiArrayIterators.time_zip_flat_two_2d_F_F",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "bench_iterating.MultiArrayIterators.time_zip_iter_two_1d": {
        "code": "def time_zip_iter_two_1d(self):\n    zip_iter(arr1, arr1)\n",
        "goal_time": 2.0,
        "name": "bench_iterating.MultiArrayIterators.time_zip_iter_two_1d",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "bench_laplace.Laplace.time_laplace": {
        "code": "def time_laplace(self):\n    self.run_laplace(self.N, self.Niter)\n",
        "goal_time": 2.0,
        "name": "bench_laplace.Laplace.time_laplace",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "bench_lists.ListConstruction.time_list_append": {
        "code": "def time_list_append(self):\n    list_append(self.n, 0)\n",
        "goal_time": 2.0,
        "name": "bench_lists.ListConstruction.time_list_append",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "bench_lists.ListConstruction.time_list_call": {
        "code": "def time_list_call(self):\n    list_call(self.n, 0)\n",
        "goal_time": 2.0,
        "name": "bench_lists.ListConstruction.time_list_call",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "bench_lists.ListConstruction.time_list_extend": {
        "code": "def time_list_extend(self):\n    list_extend(self.n, 0)\n",
        "goal_time": 2.0,
        "name": "bench_lists.ListConstruction.time_list_extend",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "bench_lists.ListMutation.time_list_insert": {
        "code": "def time_list_insert(self):\n    # list.insert() is quadratic, so reduce the effort\n    list_insert(self.n // 10, 0)\n",
        "goal_time": 2.0,
        "name": "bench_lists.ListMutation.time_list_insert",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "bench_lists.ListMutation.time_list_pop": {
        "code": "def time_list_pop(self):\n    list_pop(self.n)\n",
        "goal_time": 2.0,
        "name": "bench_lists.ListMutation.time_list_pop",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "bench_lists.ListReturn.time_list_return": {
        "code": "def time_list_return(self):\n    list_return(self.n)\n",
        "goal_time": 2.0,
        "name": "bench_lists.ListReturn.time_list_return",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "bench_misc.IndirectIndexing.time_signed_indirect_indexing": {
        "code": "def time_signed_indirect_indexing(self):\n    self.targets[:] = 0\n    grouped_sum(self.values, self.labels, self.targets)\n",
        "goal_time": 2.0,
        "name": "bench_misc.IndirectIndexing.time_signed_indirect_indexing",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "bench_misc.IndirectIndexing.time_unsigned_indirect_indexing": {
        "code": "def time_unsigned_indirect_indexing(self):\n    self.targets[:] = 0\n    grouped_sum(self.values, self.unsigned_labels, self.targets)\n",
        "goal_time": 2.0,
        "name": "bench_misc.IndirectIndexing.time_unsigned_indirect_indexing",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "bench_misc.InitializationTime.time_new_process_import_numba": {
        "code": "def time_new_process_import_numba(self):\n    subprocess.check_call([sys.executable, \"-c\", \"from numba import jit\"])\n",
        "goal_time": 2.0,
        "name": "bench_misc.InitializationTime.time_new_process_import_numba",
        "number": 1,
        "param_names": [],
        "params": [],
        "repeat": 10,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "bench_nbody.NBody.time_numba_nbody": {
        "code": "def time_numba_nbody(self):\n    run_numba_nbody(self.positions, self.weights)\n",
        "goal_time": 2.0,
        "name": "bench_nbody.NBody.time_numba_nbody",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "bench_numbagg.Numbagg.time_move_nanmean": {
        "code": "def time_move_nanmean(self):\n    arr = some_nans\n    res = move_nanmean(arr, np.asarray(10))\n    assert res.shape == arr.shape\n",
        "goal_time": 2.0,
        "name": "bench_numbagg.Numbagg.time_move_nanmean",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "bench_numbagg.Numbagg.time_move_nanmean_2d": {
        "code": "def time_move_nanmean_2d(self):\n    arr = some_nans_2d\n    res = move_nanmean(arr, np.asarray(10))\n    assert res.shape == arr.shape\n",
        "goal_time": 2.0,
        "name": "bench_numbagg.Numbagg.time_move_nanmean_2d",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "bench_numbagg.Numbagg.time_nanmean_gufunc": {
        "code": "def time_nanmean_gufunc(self):\n    gu_nanmean(some_nans_2d)\n",
        "goal_time": 2.0,
        "name": "bench_numbagg.Numbagg.time_nanmean_gufunc",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "bench_numbagg.Numbagg.time_nanmean_jit_1d": {
        "code": "def time_nanmean_jit_1d(self):\n    nanmean(some_nans)\n",
        "goal_time": 2.0,
        "name": "bench_numbagg.Numbagg.time_nanmean_jit_1d",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "bench_numbagg.Numbagg.time_nanmean_jit_2d": {
        "code": "def time_nanmean_jit_2d(self):\n    nanmean(some_nans_2d)\n",
        "goal_time": 2.0,
        "name": "bench_numbagg.Numbagg.time_nanmean_jit_2d",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "bench_numbagg.Numbagg.time_nanmean_jit_2d_reversed": {
        "code": "def time_nanmean_jit_2d_reversed(self):\n    nanmean(some_nans_2d_reversed)\n",
        "goal_time": 2.0,
        "name": "bench_numbagg.Numbagg.time_nanmean_jit_2d_reversed",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "bench_random.RandomIntegers.time_py_getrandbits": {
        "code": "def time_py_getrandbits(self):\n    py_getrandbits(42, 100000)\n",
        "goal_time": 2.0,
        "name": "bench_random.RandomIntegers.time_py_getrandbits",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "bench_sets.IntegerSets.time_setops": {
        "code": "def time_setops(self):\n    self.run_setops(self.N)\n",
        "goal_time": 2.0,
        "name": "bench_sets.IntegerSets.time_setops",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "bench_sets.IntegerSets.time_unique": {
        "code": "def time_unique(self):\n    self.run_unique(self.N)\n",
        "goal_time": 2.0,
        "name": "bench_sets.IntegerSets.time_unique",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "bench_sorting.ArrayMedian.time_median_duplicates_array": {
        "code": "def time_median_duplicates_array(self):\n    \"\"\"\n    Median of a random array with many duplicates.\n    \"\"\"\n    median(self.duplicates_array)\n",
        "goal_time": 2.0,
        "name": "bench_sorting.ArrayMedian.time_median_duplicates_array",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "bench_sorting.ArrayMedian.time_median_random_array_even": {
        "code": "def time_median_random_array_even(self):\n    \"\"\"\n    Median of an even-sized random array.\n    \"\"\"\n    arr = self.random_array\n    assert arr.size & 1 == 0\n    median(arr)\n",
        "goal_time": 2.0,
        "name": "bench_sorting.ArrayMedian.time_median_random_array_even",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "bench_sorting.ArrayMedian.time_median_random_array_odd": {
        "code": "def time_median_random_array_odd(self):\n    \"\"\"\n    Median of an odd-sized random array.\n    \"\"\"\n    arr = self.random_array[:-1]\n    assert arr.size & 1 == 1\n    median(arr)\n",
        "goal_time": 2.0,
        "name": "bench_sorting.ArrayMedian.time_median_random_array_odd",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "bench_sorting.ArrayMedian.time_median_sorted_array": {
        "code": "def time_median_sorted_array(self):\n    \"\"\"\n    Median of a sorted array.\n    \"\"\"\n    median(self.sorted_array)\n",
        "goal_time": 2.0,
        "name": "bench_sorting.ArrayMedian.time_median_sorted_array",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "bench_sorting.ArrayMedian.time_median_triangle_array": {
        "code": "def time_median_triangle_array(self):\n    \"\"\"\n    Median of a \"triangular\" array: ascending then descending.\n    \"\"\"\n    median(self.triangle_array)\n",
        "goal_time": 2.0,
        "name": "bench_sorting.ArrayMedian.time_median_triangle_array",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "bench_sorting.ArraySorting.time_argsort_random_array": {
        "code": "def time_argsort_random_array(self):\n    \"\"\"\n    Arg-sort a random array.\n    \"\"\"\n    argsort(self.random_array)\n",
        "goal_time": 2.0,
        "name": "bench_sorting.ArraySorting.time_argsort_random_array",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "bench_sorting.ArraySorting.time_sort_duplicates_array": {
        "code": "def time_sort_duplicates_array(self):\n    \"\"\"\n    Sort a random array with many duplicates.\n    \"\"\"\n    sort(self.duplicates_array)\n",
        "goal_time": 2.0,
        "name": "bench_sorting.ArraySorting.time_sort_duplicates_array",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "bench_sorting.ArraySorting.time_sort_random_array": {
        "code": "def time_sort_random_array(self):\n    \"\"\"\n    Sort a random array.\n    \"\"\"\n    sort(self.random_array)\n",
        "goal_time": 2.0,
        "name": "bench_sorting.ArraySorting.time_sort_random_array",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "bench_sorting.ArraySorting.time_sort_sorted_array": {
        "code": "def time_sort_sorted_array(self):\n    \"\"\"\n    Sort an already sorted array.\n    \"\"\"\n    sort(self.sorted_array)\n",
        "goal_time": 2.0,
        "name": "bench_sorting.ArraySorting.time_sort_sorted_array",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "bench_sorting.ArraySorting.time_sort_triangle_array": {
        "code": "def time_sort_triangle_array(self):\n    \"\"\"\n    Sort a \"triangular\" array: ascending then descending.\n    \"\"\"\n    sort(self.triangle_array)\n",
        "goal_time": 2.0,
        "name": "bench_sorting.ArraySorting.time_sort_triangle_array",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "bench_vectorize.Vectorize.time_mul_complex128": {
        "code": "def f(self):\n    func(self.samples[dtype], self.samples[dtype], self.out[dtype])\n",
        "goal_time": 2.0,
        "name": "bench_vectorize.Vectorize.time_mul_complex128",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "bench_vectorize.Vectorize.time_mul_complex64": {
        "code": "def f(self):\n    func(self.samples[dtype], self.samples[dtype], self.out[dtype])\n",
        "goal_time": 2.0,
        "name": "bench_vectorize.Vectorize.time_mul_complex64",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "bench_vectorize.Vectorize.time_mul_float32": {
        "code": "def f(self):\n    func(self.samples[dtype], self.samples[dtype], self.out[dtype])\n",
        "goal_time": 2.0,
        "name": "bench_vectorize.Vectorize.time_mul_float32",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "bench_vectorize.Vectorize.time_mul_float64": {
        "code": "def f(self):\n    func(self.samples[dtype], self.samples[dtype], self.out[dtype])\n",
        "goal_time": 2.0,
        "name": "bench_vectorize.Vectorize.time_mul_float64",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "bench_vectorize.Vectorize.time_rel_diff_float32": {
        "code": "def f(self):\n    func(self.samples[dtype], self.samples[dtype], self.out[dtype])\n",
        "goal_time": 2.0,
        "name": "bench_vectorize.Vectorize.time_rel_diff_float32",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "bench_vectorize.Vectorize.time_rel_diff_float64": {
        "code": "def f(self):\n    func(self.samples[dtype], self.samples[dtype], self.out[dtype])\n",
        "goal_time": 2.0,
        "name": "bench_vectorize.Vectorize.time_rel_diff_float64",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "version": 1
}